

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>ðŸ’» | Blog</title>
  <subtitle>My adventures in hacking while segfaulting through life </subtitle>
  <updated>2024-03-26T07:07:00+08:00</updated>
  <author>
    <name>Sam Sanoop</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator>
  <rights> Â© 2024 Sam Sanoop </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Common SAML vulnerabilities and how to remediate them</title>
    <link href="http://localhost:4000/posts/saml_vulns/" rel="alternate" type="text/html" title="Common SAML vulnerabilities and how to remediate them" />
    <published>2023-12-20T03:25:52+08:00</published>
  
    <updated>2023-12-20T03:25:52+08:00</updated>
  
    <id>http://localhost:4000/posts/saml_vulns/</id>
    <content src="http://localhost:4000/posts/saml_vulns/" />
    <author>
      <name>snoopysecurity</name>
    </author>

  
    
    <category term="software security" />
    
  

  
    <summary>
      





      I wrote a blog which gives a short overview of popular SAML vulnerabilities and how they can be remediated with some examples: https://snyk.io/blog/common-saml-vulnerabilities-remediate/

    </summary>
  

  </entry>

  
  <entry>
    <title>Swift Deserialization Security primer</title>
    <link href="http://localhost:4000/posts/swift_deserialization/" rel="alternate" type="text/html" title="Swift Deserialization Security primer" />
    <published>2023-07-31T03:25:52+08:00</published>
  
    <updated>2023-07-31T03:25:52+08:00</updated>
  
    <id>http://localhost:4000/posts/swift_deserialization/</id>
    <content src="http://localhost:4000/posts/swift_deserialization/" />
    <author>
      <name>snoopysecurity</name>
    </author>

  
    
    <category term="software security" />
    
  

  
    <summary>
      





      NScoding and NSSecureCoding code related issues are often interesting to review and find. Some work I did regarding this can be found here: https://snyk.io/blog/swift-deserialization-security-primer/

    </summary>
  

  </entry>

  
  <entry>
    <title>Avoiding SMTP Injection: A Whitebox primer</title>
    <link href="http://localhost:4000/posts/avoiding-smtp-injection/" rel="alternate" type="text/html" title="Avoiding SMTP Injection: A Whitebox primer" />
    <published>2022-09-13T03:25:52+08:00</published>
  
    <updated>2022-09-13T03:25:52+08:00</updated>
  
    <id>http://localhost:4000/posts/avoiding-smtp-injection/</id>
    <content src="http://localhost:4000/posts/avoiding-smtp-injection/" />
    <author>
      <name>snoopysecurity</name>
    </author>

  
    
    <category term="software security" />
    
  

  
    <summary>
      





      SMTP Injection can often be interesting vulnerability to code review and find. Some work I did regarding this can be found here: https://snyk.io/blog/avoiding-smtp-injection/

    </summary>
  

  </entry>

  
  <entry>
    <title>Improving GraphQL security with static analysis</title>
    <link href="http://localhost:4000/posts/improving-graphql-security-with-static-analysis/" rel="alternate" type="text/html" title="Improving GraphQL security with static analysis" />
    <published>2022-04-13T03:25:52+08:00</published>
  
    <updated>2022-04-13T03:25:52+08:00</updated>
  
    <id>http://localhost:4000/posts/improving-graphql-security-with-static-analysis/</id>
    <content src="http://localhost:4000/posts/improving-graphql-security-with-static-analysis/" />
    <author>
      <name>snoopysecurity</name>
    </author>

  
    
    <category term="software security" />
    
  

  
    <summary>
      





      GraphQL frameworks can often be interesting to code review, and often most static analysis tools donâ€™t support them. Some work I did regarding this can be found here: https://snyk.io/blog/graphql-security-static-analysis-snyk-code/

    </summary>
  

  </entry>

  
  <entry>
    <title>rs-async-zip Zip Path Traversal (Zip Slip)</title>
    <link href="http://localhost:4000/posts/rs-async-zipslip/" rel="alternate" type="text/html" title="rs-async-zip Zip Path Traversal (Zip Slip)" />
    <published>2022-03-09T03:25:52+08:00</published>
  
    <updated>2022-03-09T03:25:52+08:00</updated>
  
    <id>http://localhost:4000/posts/rs-async-zipslip/</id>
    <content src="http://localhost:4000/posts/rs-async-zipslip/" />
    <author>
      <name>snoopysecurity</name>
    </author>

  
    
    <category term="software security" />
    
  

  
    <summary>
      





      Introduction

rs-async-zip is a asynchronous ZIP archive reading/writing crate with a heavy focus on streaming support. This package is vulnerable to Zip Traversal (Zip Slip).

Note: This issue was privately disclosed to the maintainer. He has stated that he has made conscious decision not to mitigate any sort of traversal attacks within the library itself. He has however added a notice to to t...
    </summary>
  

  </entry>

</feed>


