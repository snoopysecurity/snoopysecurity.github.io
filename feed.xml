

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>ðŸ’» | Blog</title>
  <subtitle>Learning security while segfaulting through life </subtitle>
  <updated>2025-04-08T03:58:31+08:00</updated>
  <author>
    <name>Sam Sanoop</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator>
  <rights> Â© 2025 Sam Sanoop </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Reading RFCs for Security Research</title>
    <link href="http://localhost:4000/posts/rfcs-for-security-research/" rel="alternate" type="text/html" title="Reading RFCs for Security Research" />
    <published>2025-04-07T23:25:52+08:00</published>
  
    <updated>2025-04-07T23:25:52+08:00</updated>
  
    <id>http://localhost:4000/posts/rfcs-for-security-research/</id>
    <content src="http://localhost:4000/posts/rfcs-for-security-research/" />
    <author>
      <name>snoopysecurity</name>
    </author>

  
    
    <category term="security research" />
    
  

  
    <summary>
      





      I recently needed to review an RFC for a protocol while working on some security research. I wrote a short guide based on my notes and other resources from the internet.

Reading RFCs for Security Research

RFCsâ€”Request for Commentsâ€”are more than just dry technical documentation, and for security research they can be very useful at times. This is mainly because they contain blueprints of how sy...
    </summary>
  

  </entry>

  
  <entry>
    <title>ExpressCart Prototype Pollution to Denial Of Service</title>
    <link href="http://localhost:4000/posts/expresscart-prototype-pollution/" rel="alternate" type="text/html" title="ExpressCart Prototype Pollution to Denial Of Service" />
    <published>2025-03-25T03:25:52+08:00</published>
  
    <updated>2025-03-25T03:25:52+08:00</updated>
  
    <id>http://localhost:4000/posts/expresscart-prototype-pollution/</id>
    <content src="http://localhost:4000/posts/expresscart-prototype-pollution/" />
    <author>
      <name>snoopysecurity</name>
    </author>

  
    
    <category term="web application security" />
    
  

  
    <summary>
      





      What is Prototype Pollution

Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.

More details and a better explanation can be found here:


  https://codebur...
    </summary>
  

  </entry>

  
  <entry>
    <title>Sec Blue Team Level 1 Exam Prep Notes</title>
    <link href="http://localhost:4000/posts/secblueteam-level1-exam-prep/" rel="alternate" type="text/html" title="Sec Blue Team Level 1 Exam Prep Notes" />
    <published>2025-03-10T03:25:52+08:00</published>
  
    <updated>2025-03-10T03:25:52+08:00</updated>
  
    <id>http://localhost:4000/posts/secblueteam-level1-exam-prep/</id>
    <content src="http://localhost:4000/posts/secblueteam-level1-exam-prep/" />
    <author>
      <name>snoopysecurity</name>
    </author>

  
    
    <category term="certification" />
    
  

  
    <summary>
      





      I recently passed Security Blue team level 1 exam. I got a free voucher from Security Blue Team booth at BSides London 2023, and been wanting to do this exam for a while. I found the course pretty fun and the course taught be a lot of foundational knowledge for blue team that I enjoyed.


  
  



I found the following free labs very useful to further my knowledge and prepare for the exam. Stud...
    </summary>
  

  </entry>

  
  <entry>
    <title>Chef Yaml Deserialization Vulnerability</title>
    <link href="http://localhost:4000/posts/chef-unsafe-deserialization/" rel="alternate" type="text/html" title="Chef Yaml Deserialization Vulnerability" />
    <published>2024-08-30T03:25:52+08:00</published>
  
    <updated>2025-03-10T20:11:12+08:00</updated>
  
    <id>http://localhost:4000/posts/chef-unsafe-deserialization/</id>
    <content src="http://localhost:4000/posts/chef-unsafe-deserialization/" />
    <author>
      <name>snoopysecurity</name>
    </author>

  
    
    <category term="software security" />
    
  

  
    <summary>
      





      YAML (YAML Ainâ€™t Markup Language) is a popular data serialization format used in many programming languages, including Ruby. Insecure deserialization is a security vulnerability that occurs when an application deserializes data from an untrusted source and allows an attacker to execute arbitrary code or perform unauthorized actions.

In Ruby, YAML deserialization can be exploited if the applica...
    </summary>
  

  </entry>

  
  <entry>
    <title>Common SAML vulnerabilities and how to remediate them</title>
    <link href="http://localhost:4000/posts/saml-security/" rel="alternate" type="text/html" title="Common SAML vulnerabilities and how to remediate them" />
    <published>2023-12-20T03:25:52+08:00</published>
  
    <updated>2023-12-20T03:25:52+08:00</updated>
  
    <id>http://localhost:4000/posts/saml-security/</id>
    <content src="http://localhost:4000/posts/saml-security/" />
    <author>
      <name>snoopysecurity</name>
    </author>

  
    
    <category term="software security" />
    
  

  
    <summary>
      





      This blog aims to give a short overview of popular SAML vulnerabilities and how they can be remediated with some examples: https://snyk.io/blog/common-saml-vulnerabilities-remediate/

    </summary>
  

  </entry>

</feed>


