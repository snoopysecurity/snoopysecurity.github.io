

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>ðŸ’» | Blog</title>
  <subtitle>My adventures in hacking while segfaulting through life </subtitle>
  <updated>2024-08-30T06:22:09+08:00</updated>
  <author>
    <name>Sam Sanoop</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator>
  <rights> Â© 2024 Sam Sanoop </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Chef Yaml Deserialization Vulnerability</title>
    <link href="http://localhost:4000/posts/chef-unsafe-deserialization/" rel="alternate" type="text/html" title="Chef Yaml Deserialization Vulnerability" />
    <published>2024-08-30T03:25:52+08:00</published>
  
    <updated>2024-08-30T03:25:52+08:00</updated>
  
    <id>http://localhost:4000/posts/chef-unsafe-deserialization/</id>
    <content src="http://localhost:4000/posts/chef-unsafe-deserialization/" />
    <author>
      <name>snoopysecurity</name>
    </author>

  
    
    <category term="software security" />
    
  

  
    <summary>
      





      YAML (YAML Ainâ€™t Markup Language) is a popular data serialization format used in many programming languages, including Ruby. Insecure deserialization is a security vulnerability that occurs when an application deserializes data from an untrusted source and allows an attacker to execute arbitrary code or perform unauthorized actions.

In Ruby, YAML deserialization can be exploited if the applica...
    </summary>
  

  </entry>

  
  <entry>
    <title>Common SAML vulnerabilities and how to remediate them</title>
    <link href="http://localhost:4000/posts/saml-security/" rel="alternate" type="text/html" title="Common SAML vulnerabilities and how to remediate them" />
    <published>2023-12-20T03:25:52+08:00</published>
  
    <updated>2023-12-20T03:25:52+08:00</updated>
  
    <id>http://localhost:4000/posts/saml-security/</id>
    <content src="http://localhost:4000/posts/saml-security/" />
    <author>
      <name>snoopysecurity</name>
    </author>

  
    
    <category term="software security" />
    
  

  
    <summary>
      





      This blog aims to give a short overview of popular SAML vulnerabilities and how they can be remediated with some examples: https://snyk.io/blog/common-saml-vulnerabilities-remediate/

    </summary>
  

  </entry>

  
  <entry>
    <title>Swift Deserialization Security primer</title>
    <link href="http://localhost:4000/posts/swift-deserialiation/" rel="alternate" type="text/html" title="Swift Deserialization Security primer" />
    <published>2023-07-01T03:25:52+08:00</published>
  
    <updated>2023-07-01T03:25:52+08:00</updated>
  
    <id>http://localhost:4000/posts/swift-deserialiation/</id>
    <content src="http://localhost:4000/posts/swift-deserialiation/" />
    <author>
      <name>snoopysecurity</name>
    </author>

  
    
    <category term="software security" />
    
  

  
    <summary>
      





      NScoding and NSSecureCoding code related issues are often interesting to review and find. Some work I did regarding this can be found here: https://snyk.io/blog/swift-deserialization-security-primer/

    </summary>
  

  </entry>

  
  <entry>
    <title>Avoiding SMTP Injection: A Whitebox primer</title>
    <link href="http://localhost:4000/posts/avoiding-smtp-injection/" rel="alternate" type="text/html" title="Avoiding SMTP Injection: A Whitebox primer" />
    <published>2022-09-13T03:25:52+08:00</published>
  
    <updated>2022-09-13T03:25:52+08:00</updated>
  
    <id>http://localhost:4000/posts/avoiding-smtp-injection/</id>
    <content src="http://localhost:4000/posts/avoiding-smtp-injection/" />
    <author>
      <name>snoopysecurity</name>
    </author>

  
    
    <category term="software security" />
    
  

  
    <summary>
      





      SMTP Injection can often be interesting vulnerability to code review and find. Some work I did regarding this can be found here: https://snyk.io/blog/avoiding-smtp-injection/

    </summary>
  

  </entry>

  
  <entry>
    <title>Improving GraphQL security with static analysis</title>
    <link href="http://localhost:4000/posts/improving-graphql-security-with-static-analysis/" rel="alternate" type="text/html" title="Improving GraphQL security with static analysis" />
    <published>2022-04-13T03:25:52+08:00</published>
  
    <updated>2022-04-13T03:25:52+08:00</updated>
  
    <id>http://localhost:4000/posts/improving-graphql-security-with-static-analysis/</id>
    <content src="http://localhost:4000/posts/improving-graphql-security-with-static-analysis/" />
    <author>
      <name>snoopysecurity</name>
    </author>

  
    
    <category term="software security" />
    
  

  
    <summary>
      





      GraphQL frameworks can often be interesting to code review, and often most static analysis tools donâ€™t support them. Some work I did regarding this can be found here: https://snyk.io/blog/graphql-security-static-analysis-snyk-code/

    </summary>
  

  </entry>

</feed>


