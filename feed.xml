

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>Personal Blog</title>
  <subtitle>My Hacking adventures while segfaulting through life</subtitle>
  <updated>2023-02-09T06:48:33+08:00</updated>
  <author>
    <name>Sam Sanoop</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator>
  <rights> © 2023 Sam Sanoop </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Avoiding SMTP Injection: A Whitebox primer</title>
    <link href="http://localhost:4000/posts/avoiding-smtp-injection/" rel="alternate" type="text/html" title="Avoiding SMTP Injection: A Whitebox primer" />
    <published>2022-09-13T03:25:52+08:00</published>
  
    <updated>2022-09-13T03:25:52+08:00</updated>
  
    <id>http://localhost:4000/posts/avoiding-smtp-injection/</id>
    <content src="http://localhost:4000/posts/avoiding-smtp-injection/" />
    <author>
      <name>snoopysecurity</name>
    </author>

  
    
    <category term="software security" />
    
  

  
    <summary>
      





      SMTP Injection can often be interesting vulnerability to code review and find. Some work I did regarding this can be found here: https://snyk.io/blog/avoiding-smtp-injection/

    </summary>
  

  </entry>

  
  <entry>
    <title>Improving GraphQL security with static analysis</title>
    <link href="http://localhost:4000/posts/improving-graphql-security-with-static-analysis/" rel="alternate" type="text/html" title="Improving GraphQL security with static analysis" />
    <published>2022-04-13T03:25:52+08:00</published>
  
    <updated>2022-04-13T03:25:52+08:00</updated>
  
    <id>http://localhost:4000/posts/improving-graphql-security-with-static-analysis/</id>
    <content src="http://localhost:4000/posts/improving-graphql-security-with-static-analysis/" />
    <author>
      <name>snoopysecurity</name>
    </author>

  
    
    <category term="software security" />
    
  

  
    <summary>
      





      GraphQL frameworks can often be interesting to code review, and often most static analysis tools don’t support them. Some work I did regarding this can be found here: https://snyk.io/blog/graphql-security-static-analysis-snyk-code/

    </summary>
  

  </entry>

  
  <entry>
    <title>rs-async-zip Zip Path Traversal (Zip Slip)</title>
    <link href="http://localhost:4000/posts/rs-async-zipslip/" rel="alternate" type="text/html" title="rs-async-zip Zip Path Traversal (Zip Slip)" />
    <published>2022-03-09T03:25:52+08:00</published>
  
    <updated>2022-03-09T03:25:52+08:00</updated>
  
    <id>http://localhost:4000/posts/rs-async-zipslip/</id>
    <content src="http://localhost:4000/posts/rs-async-zipslip/" />
    <author>
      <name>snoopysecurity</name>
    </author>

  
    
    <category term="software security" />
    
  

  
    <summary>
      





      Introduction

rs-async-zip is a asynchronous ZIP archive reading/writing crate with a heavy focus on streaming support. This package is vulnerable to Zip Traversal (Zip Slip).

Note: This issue was privately disclosed to the maintainer. He has stated that he has made conscious decision not to mitigate any sort of traversal attacks within the library itself. He has however added a notice to to t...
    </summary>
  

  </entry>

  
  <entry>
    <title>Joern Cheat Sheet</title>
    <link href="http://localhost:4000/posts/joern-cheat-sheet/" rel="alternate" type="text/html" title="Joern Cheat Sheet" />
    <published>2021-12-09T03:25:52+08:00</published>
  
    <updated>2021-12-09T03:25:52+08:00</updated>
  
    <id>http://localhost:4000/posts/joern-cheat-sheet/</id>
    <content src="http://localhost:4000/posts/joern-cheat-sheet/" />
    <author>
      <name>snoopysecurity</name>
    </author>

  
    
    <category term="software security" />
    
    <category term="static analysis" />
    
  

  
    <summary>
      





      Joern Notes

Joern is a static analyzer that can be used to create code property graphs and query them fairly easy. This is good alternative to CodeQL since analyzing with Joern doesn’t require you to compile/build the project. I often use this for cases where I can’t use CodeQL or Snyk’s internal static analysis engine to analyse a codebase.

Install Joern (Linux)

Pre-requisites
apt install s...
    </summary>
  

  </entry>

  
  <entry>
    <title>Exploit Education - Phoenix Notes</title>
    <link href="http://localhost:4000/posts/exploit-education-phoenix/" rel="alternate" type="text/html" title="Exploit Education - Phoenix Notes" />
    <published>2021-05-15T11:33:00+08:00</published>
  
    <updated>2021-05-15T11:33:00+08:00</updated>
  
    <id>http://localhost:4000/posts/exploit-education-phoenix/</id>
    <content src="http://localhost:4000/posts/exploit-education-phoenix/" />
    <author>
      <name>snoopysecurity</name>
    </author>

  
    
    <category term="ctf" />
    
    <category term="binary exploitation" />
    
  

  
    <summary>
      





      Exploit Education Notes

The image can be downloaded from https://exploit.education/phoenix/, and can be extracted and executed using

tar xJf exploit-education-phoenix-amd64-v1.0.0-alpha-3.tar.xz
cd exploit-education-phoenix-amd64/
./boot-exploit-education-phoenix-amd64.sh


After running the QEMU image, you can ssh into the machine via ssh -p2222 user@localhost

Stack Zero

/*
 * phoenix/stac...
    </summary>
  

  </entry>

</feed>


